{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v2.json", "dbt_version": "0.20.0", "generated_at": "2021-11-17T21:44:36.525689Z", "invocation_id": "18230734-8626-4c3d-b33a-af7b6ac04813", "env": {}, "project_id": "85619522d85846bb28197090548d8185", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.tuva.stg_procedures": {"raw_sql": "{{ config(materialized='view') }}\n\nselect\n    cast(encounter_id as string) as encounter_id,\n    cast(procedure_code as string) as procedure_code,\n    cast(procedure_code_ranking as integer) as procedure_code_ranking\nfrom {{ source('source','procedures') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.source.procedures"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "staging", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "staging", "fqn": ["tuva", "staging", "stg_procedures"], "unique_id": "model.tuva.stg_procedures", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "staging/stg_procedures.sql", "original_file_path": "models/staging/stg_procedures.sql", "name": "stg_procedures", "alias": "stg_procedures", "checksum": {"name": "sha256", "checksum": "5038e96e1030884db3827bf2b75808834aeadf37c739174d01cbb9aba2b20906"}, "tags": [], "refs": [], "sources": [["source", "procedures"]], "description": "A table of all present procedure codes for all members.\n", "columns": {"encounter_id": {"name": "encounter_id", "description": "The encounter_id corresponding to the encounter where this procedure code was present.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code": {"name": "procedure_code", "description": "ICD-10-PCS procedure code related to this diagnosis.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_ranking": {"name": "procedure_code_ranking", "description": "Integer representing the ranking of this procedure code (e.g. 1,2,3,...).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/staging/stg_procedures.yml", "compiled_path": "target/compiled/tuva/models/staging/stg_procedures.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "staging", "materialized": "view"}, "created_at": 1637185476, "compiled_sql": "\n\nselect\n    cast(encounter_id as string) as encounter_id,\n    cast(procedure_code as string) as procedure_code,\n    cast(procedure_code_ranking as integer) as procedure_code_ranking\nfrom hcup.public.procedures", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.staging.stg_procedures"}, "model.tuva.stg_encounters": {"raw_sql": "{{ config(materialized='view') }}\n\nselect\n    cast(encounter_id as string) as encounter_id,\n    cast(member_id as string) as patient_id,\n    to_date(encounter_start_date) as encounter_start_date,\n    to_date(encounter_end_date) as encounter_end_date,\n    cast(admit_type_code as integer) as admit_type_code,\n    cast(admit_source_code as integer) as admit_source_code,\n    cast(discharge_status_code as integer) as discharge_status_code\nfrom {{ source('source','encounters') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.source.encounters"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "staging", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "staging", "fqn": ["tuva", "staging", "stg_encounters"], "unique_id": "model.tuva.stg_encounters", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "staging/stg_encounters.sql", "original_file_path": "models/staging/stg_encounters.sql", "name": "stg_encounters", "alias": "stg_encounters", "checksum": {"name": "sha256", "checksum": "8c45aec140882a13fbda248e684f56552a33d47dffc40484745d8fc8627b95ea"}, "tags": [], "refs": [], "sources": [["source", "encounters"]], "description": "A table of unique encounters for all patients (each record is a unique encounter).\n", "columns": {"encounter_id": {"name": "encounter_id", "description": "The primary key for this table (a unique ID for each encounter).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient involved in the encounter.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The encounter start date in this format: 'YYYY-MM-DD'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_end_date": {"name": "encounter_end_date", "description": "The encounter end date in this format: 'YYY-MM-DD'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "The admit type code for the encounter.  Indicates type and priority of admission for inpatient hospital stays.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "The admit source code for the encounter.  Indicates where the patient came from prior to admission.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "The discharge status code for the encounter.  Indicates where a patient was discharged to.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/staging/stg_encounters.yml", "compiled_path": "target/compiled/tuva/models/staging/stg_encounters.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "staging", "materialized": "view"}, "created_at": 1637185476, "compiled_sql": "\n\nselect\n    cast(encounter_id as string) as encounter_id,\n    cast(member_id as string) as patient_id,\n    to_date(encounter_start_date) as encounter_start_date,\n    to_date(encounter_end_date) as encounter_end_date,\n    cast(admit_type_code as integer) as admit_type_code,\n    cast(admit_source_code as integer) as admit_source_code,\n    cast(discharge_status_code as integer) as discharge_status_code\nfrom hcup.public.encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.staging.stg_encounters"}, "model.tuva.stg_patients": {"raw_sql": "{{ config(materialized='view') }}\n\nselect\n    cast(patient_id as string) as patient_id\n,   cast(gender_code as integer) as gender_code\n,   to_date(birth_date) as birth_date\n,   to_date(deceased_date) as deceased_date\nfrom {{ source('source','patients') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.source.patients"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "staging", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "staging", "fqn": ["tuva", "staging", "stg_patients"], "unique_id": "model.tuva.stg_patients", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "staging/stg_patients.sql", "original_file_path": "models/staging/stg_patients.sql", "name": "stg_patients", "alias": "stg_patients", "checksum": {"name": "sha256", "checksum": "955bc5e3fbfc180fe0ccbe79fc13390a298a330f09bd602a1ea78a7bd060d1cc"}, "tags": [], "refs": [], "sources": [["source", "patients"]], "description": "A table of unique patients (members). Each row is a unique person.", "columns": {"patient_id": {"name": "patient_id", "description": "The primary key for this table (a unique ID for each person).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_code": {"name": "gender_code", "description": "A string that takes one of two values: 'male', 'female' ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "The date of birth of the patient in this format: 'YYYY-mm-dd'\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deceased_date": {"name": "deceased_date", "description": "The date of death for each patient. It should only be populated for patients who have died and should be NULL for living patients.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/staging/stg_patients.yml", "compiled_path": "target/compiled/tuva/models/staging/stg_patients.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "staging", "materialized": "view"}, "created_at": 1637185476, "compiled_sql": "\n\nselect\n    cast(patient_id as string) as patient_id\n,   cast(gender_code as integer) as gender_code\n,   to_date(birth_date) as birth_date\n,   to_date(deceased_date) as deceased_date\nfrom hcup.public.patients", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.staging.stg_patients"}, "model.tuva.stg_diagnoses": {"raw_sql": "{{ config(materialized='view') }}\n\nselect\n    cast(encounter_id as string) as encounter_id,\n    cast(diagnosis_code as string) as diagnosis_code,\n    cast(diagnosis_code_ranking as integer) as diagnosis_code_ranking,\n    cast(present_on_admission_code as integer) as present_on_admission_code\nfrom {{ source('source','diagnoses') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.source.diagnoses"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "staging", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "staging", "fqn": ["tuva", "staging", "stg_diagnoses"], "unique_id": "model.tuva.stg_diagnoses", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "staging/stg_diagnoses.sql", "original_file_path": "models/staging/stg_diagnoses.sql", "name": "stg_diagnoses", "alias": "stg_diagnoses", "checksum": {"name": "sha256", "checksum": "638f4665b688cec1711e533b314f9091e82fda29c134633c72f0828b2abb38ea"}, "tags": [], "refs": [], "sources": [["source", "diagnoses"]], "description": "A table of all diagnosis codes for all patients and encounters (one record per diagnosis code).\n", "columns": {"encounter_id": {"name": "encounter_id", "description": "The ID corresponding to the encounter where this diagnosis code occurred.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code": {"name": "diagnosis_code", "description": "ICD-10-CM diagnosis code for this diagnosis.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_ranking": {"name": "diagnosis_code_ranking", "description": "Integer representing the ranking of this diagnosis code.  1 is the primary diagnosis for the encounter.  2 or greater is a secondary diagnosis.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "present_on_admission_code": {"name": "present_on_admission_code", "description": "Code representing whether the diagnosis was present on admission.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/staging/stg_diagnoses.yml", "compiled_path": "target/compiled/tuva/models/staging/stg_diagnoses.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "staging", "materialized": "view"}, "created_at": 1637185476, "compiled_sql": "\n\nselect\n    cast(encounter_id as string) as encounter_id,\n    cast(diagnosis_code as string) as diagnosis_code,\n    cast(diagnosis_code_ranking as integer) as diagnosis_code_ranking,\n    cast(present_on_admission_code as integer) as present_on_admission_code\nfrom hcup.public.diagnoses", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.staging.stg_diagnoses"}, "model.tuva.benign_prostatic_hyperplasia": {"raw_sql": "{{ config(materialized='view') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_code_ranking\nfrom {{ ref('stg_patients') }}  a\nleft join {{ ref('stg_encounters') }}  b\n    on a.patient_id = b.patient_id    \nleft join {{ ref('stg_diagnoses') }} c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.stg_patients", "model.tuva.stg_encounters", "model.tuva.stg_diagnoses", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "chronic_conditions", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "chronic_conditions", "fqn": ["tuva", "chronic_conditions", "benign_prostatic_hyperplasia"], "unique_id": "model.tuva.benign_prostatic_hyperplasia", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions/benign_prostatic_hyperplasia.sql", "original_file_path": "models/chronic_conditions/benign_prostatic_hyperplasia.sql", "name": "benign_prostatic_hyperplasia", "alias": "benign_prostatic_hyperplasia", "checksum": {"name": "sha256", "checksum": "ad1151cad21db019757b0b037652aaa9661ca6fe2bf972d43500ad5f06662685"}, "tags": [], "refs": [["stg_patients"], ["stg_encounters"], ["stg_diagnoses"], ["chronic_conditions"], ["chronic_conditions"]], "sources": [], "description": "This model contains logic for identifying patients with a history of benign prostatic hyperplasia, also known as an enlarged prostate gland.  The logic for this condition is stored in a separate model because it's more complex than other conditions.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique ID for each encounter (visit).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The date the encounter began.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Cardiovascular Disease).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/chronic_conditions/benign_prostatic_hyperplasia.yml", "compiled_path": "target/compiled/tuva/models/chronic_conditions/benign_prostatic_hyperplasia.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "chronic_conditions", "materialized": "view"}, "created_at": 1637185477, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_code_ranking\nfrom tuva.staging.stg_patients  a\nleft join tuva.staging.stg_encounters  b\n    on a.patient_id = b.patient_id    \nleft join tuva.staging.stg_diagnoses c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.seed.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join tuva.seed.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.chronic_conditions.benign_prostatic_hyperplasia"}, "model.tuva.stroke_transient_ischemic_attack": {"raw_sql": "{{ config(materialized='view') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_code_ranking\nfrom {{ ref('stg_patients') }}  a\nleft join {{ ref('stg_encounters') }}  b\n    on a.patient_id = b.patient_id    \nleft join {{ ref('stg_diagnoses') }} c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.stg_patients", "model.tuva.stg_encounters", "model.tuva.stg_diagnoses", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "chronic_conditions", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "chronic_conditions", "fqn": ["tuva", "chronic_conditions", "stroke_transient_ischemic_attack"], "unique_id": "model.tuva.stroke_transient_ischemic_attack", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions/stroke_transient_ischemic_attack.sql", "original_file_path": "models/chronic_conditions/stroke_transient_ischemic_attack.sql", "name": "stroke_transient_ischemic_attack", "alias": "stroke_transient_ischemic_attack", "checksum": {"name": "sha256", "checksum": "f4c858f24612137d689599e18fbfbe920ea5b06c34dd904b3b843acb0f4bd06f"}, "tags": [], "refs": [["stg_patients"], ["stg_encounters"], ["stg_diagnoses"], ["chronic_conditions"], ["chronic_conditions"]], "sources": [], "description": "This model contains logic for identifying patients with a history of stroke or transient ischemic attack (essentially a mini-stroke).  The logic for this condition is stored in a separate model because it's more complex than other conditions.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique ID for each encounter (visit).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The date the encounter began.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Cardiovascular Disease).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/chronic_conditions/stroke_transient_ischemic_attack.yml", "compiled_path": "target/compiled/tuva/models/chronic_conditions/stroke_transient_ischemic_attack.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "chronic_conditions", "materialized": "view"}, "created_at": 1637185477, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_code_ranking\nfrom tuva.staging.stg_patients  a\nleft join tuva.staging.stg_encounters  b\n    on a.patient_id = b.patient_id    \nleft join tuva.staging.stg_diagnoses c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.seed.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join tuva.seed.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.chronic_conditions.stroke_transient_ischemic_attack"}, "model.tuva.condition_logic_simple": {"raw_sql": "{{ config(materialized='view') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\nfrom {{ ref('stg_patients') }} a\nleft join {{ ref('stg_encounters') }}  b\n    on a.patient_id = b.patient_id    \n)\n\n, diagnosis_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join {{ ref('stg_diagnoses') }}  b\n    on a.encounter_id = b.encounter_id\ninner join {{ ref('chronic_conditions') }}  c\n    on b.diagnosis_code = c.code\n    and c.code_type = 'ICD-10-CM'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n    \n, procedure_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join {{ ref('stg_procedures') }}  b\n    on a.encounter_id = b.encounter_id\ninner join {{ ref('chronic_conditions') }}  c\n    on b.procedure_code = c.code\n    and c.code_type = 'ICD-10-PCS'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n\nselect *\nfrom diagnosis_conditions\n\nunion\n\nselect *\nfrom procedure_conditions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.stg_patients", "model.tuva.stg_encounters", "model.tuva.stg_diagnoses", "seed.tuva.chronic_conditions", "model.tuva.stg_procedures", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "chronic_conditions", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "chronic_conditions", "fqn": ["tuva", "chronic_conditions", "condition_logic_simple"], "unique_id": "model.tuva.condition_logic_simple", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions/condition_logic_simple.sql", "original_file_path": "models/chronic_conditions/condition_logic_simple.sql", "name": "condition_logic_simple", "alias": "condition_logic_simple", "checksum": {"name": "sha256", "checksum": "31c72ad840f4ba056af48ac907e19e60565965518ad751ed71f6534528ee174f"}, "tags": [], "refs": [["stg_patients"], ["stg_encounters"], ["stg_diagnoses"], ["chronic_conditions"], ["stg_procedures"], ["chronic_conditions"]], "sources": [], "description": "This model contains simple logic for mapping ICD-10-CM diagnosis codes and ICD-10-PCS procedure codes to chronic conditions.  The conditions mapped using this model do not require special logic.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique ID for each encounter (visit).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The date the encounter began.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Cardiovascular Disease).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/chronic_conditions/condition_logic_simple.yml", "compiled_path": "target/compiled/tuva/models/chronic_conditions/condition_logic_simple.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "chronic_conditions", "materialized": "view"}, "created_at": 1637185476, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\nfrom tuva.staging.stg_patients a\nleft join tuva.staging.stg_encounters  b\n    on a.patient_id = b.patient_id    \n)\n\n, diagnosis_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join tuva.staging.stg_diagnoses  b\n    on a.encounter_id = b.encounter_id\ninner join tuva.seed.chronic_conditions  c\n    on b.diagnosis_code = c.code\n    and c.code_type = 'ICD-10-CM'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n    \n, procedure_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join tuva.staging.stg_procedures  b\n    on a.encounter_id = b.encounter_id\ninner join tuva.seed.chronic_conditions  c\n    on b.procedure_code = c.code\n    and c.code_type = 'ICD-10-PCS'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n\nselect *\nfrom diagnosis_conditions\n\nunion\n\nselect *\nfrom procedure_conditions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.chronic_conditions.condition_logic_simple"}, "model.tuva.condition_pivot": {"raw_sql": "{{ config(materialized='view') }}\n\nwith conditions as (\nselect\n    a.patient_id\n,   b.condition_column_name\n,   1 as condition_count\nfrom {{ ref('union_calculations') }} a\ninner join (select distinct condition, condition_column_name from {{ ref('chronic_conditions') }}) b\n    on a.condition = b.condition\n)\n\nselect \n    patient_id,\n    case when acquired_hypothyroidism >= 1 then 1 else 0 end acquired_hypothyroidism,\n    case when acute_myocardial_infarction >= 1 then 1 else 0 end acute_myocardial_infarction,\n    case when adhd_conduct_disorders_and_hyperkinetic_syndrome >= 1 then 1 else 0 end adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    case when alcohol_use_disorders >= 1 then 1 else 0 end alcohol_use_disorders,\n    case when alzheimers_disease >= 1 then 1 else 0 end alzheimers_disease,\n    case when alzheimers_disease_and_related_disorders_or_senile_dementia >= 1 then 1 else 0 end alzheimers_disease_and_related_disorders_or_senile_dementia,\n    case when anemia >= 1 then 1 else 0 end anemia,\n    case when anxiety_disorders >= 1 then 1 else 0 end anxiety_disorders,\n    case when asthma >= 1 then 1 else 0 end asthma,\n    case when atrial_fibrillation >= 1 then 1 else 0 end atrial_fibrillation,\n    case when autism_spectrum_disorders >= 1 then 1 else 0 end autism_spectrum_disorders,\n    case when benign_prostatic_hyperplasia >= 1 then 1 else 0 end benign_prostatic_hyperplasia,\n    case when bipolar_disorder >= 1 then 1 else 0 end bipolar_disorder,\n    case when cataract >= 1 then 1 else 0 end cataract,\n    case when cerebral_palsy >= 1 then 1 else 0 end cerebral_palsy,\n    case when chronic_kidney_disease >= 1 then 1 else 0 end chronic_kidney_disease,\n    case when chronic_obstructive_pulmonary_disease_and_bronchiectasis >= 1 then 1 else 0 end chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    case when colorectal_cancer >= 1 then 1 else 0 end colorectal_cancer,\n    case when cystic_fibrosis_and_other_metabolic_developmental_disorders >= 1 then 1 else 0 end cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    case when depression >= 1 then 1 else 0 end depression,\n    case when diabetes >= 1 then 1 else 0 end diabetes,\n    case when drug_use_disorders >= 1 then 1 else 0 end drug_use_disorders,\n    case when endometrial_cancer >= 1 then 1 else 0 end endometrial_cancer,\n    case when epilepsy >= 1 then 1 else 0 end epilepsy,\n    case when female_male_breast_cancer >= 1 then 1 else 0 end female_male_breast_cancer,\n    case when fibromyalgia_and_chronic_pain_and_fatigue >= 1 then 1 else 0 end fibromyalgia_and_chronic_pain_and_fatigue,\n    case when glaucoma >= 1 then 1 else 0 end glaucoma,\n    case when heart_failure >= 1 then 1 else 0 end heart_failure,\n    case when hepatitis_a >= 1 then 1 else 0 end hepatitis_a,\n    case when hepatitis_b >= 1 then 1 else 0 end hepatitis_b,\n    case when hepatitis_c_acute >= 1 then 1 else 0 end hepatitis_c_acute,\n    case when hepatitis_c_chronic >= 1 then 1 else 0 end hepatitis_c_chronic,\n    case when hepatitis_c_unspecified >= 1 then 1 else 0 end hepatitis_c_unspecified,\n    case when hepatitis_d >= 1 then 1 else 0 end hepatitis_d,\n    case when hepatitis_e >= 1 then 1 else 0 end hepatitis_e,\n    case when hip_pelvic_fracture >= 1 then 1 else 0 end hip_pelvic_fracture,\n    case when human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids >= 1 then 1 else 0 end human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    case when hyperlipidemia >= 1 then 1 else 0 end hyperlipidemia,\n    case when hypertension >= 1 then 1 else 0 end hypertension,\n    case when intellectual_disabilities_and_related_conditions >= 1 then 1 else 0 end intellectual_disabilities_and_related_conditions,\n    case when ischemic_heart_disease >= 1 then 1 else 0 end ischemic_heart_disease,\n    case when learning_disabilities >= 1 then 1 else 0 end learning_disabilities,\n    case when leukemias_and_lymphomas >= 1 then 1 else 0 end leukemias_and_lymphomas,\n    case when liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis >= 1 then 1 else 0 end liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    case when lung_cancer >= 1 then 1 else 0 end lung_cancer,\n    case when migraine_and_chronic_headache >= 1 then 1 else 0 end migraine_and_chronic_headache,\n    case when mobility_impairments >= 1 then 1 else 0 end mobility_impairments,\n    case when multiple_sclerosis_and_transverse_myelitis >= 1 then 1 else 0 end multiple_sclerosis_and_transverse_myelitis,\n    case when muscular_dystrophy >= 1 then 1 else 0 end muscular_dystrophy,\n    case when obesity >= 1 then 1 else 0 end obesity,\n    case when opioid_use_disorder >= 1 then 1 else 0 end opioid_use_disorder,\n    case when osteoporosis >= 1 then 1 else 0 end osteoporosis,\n    case when other_developmental_delays >= 1 then 1 else 0 end other_developmental_delays,\n    case when peripheral_vascular_disease_pvd >= 1 then 1 else 0 end peripheral_vascular_disease_pvd,\n    case when personality_disorders >= 1 then 1 else 0 end personality_disorders,\n    case when post_traumatic_stress_disorder_ptsd >= 1 then 1 else 0 end post_traumatic_stress_disorder_ptsd,\n    case when pressure_and_chronic_ulcers >= 1 then 1 else 0 end pressure_and_chronic_ulcers,\n    case when prostate_cancer >= 1 then 1 else 0 end prostate_cancer,\n    case when rheumatoid_arthritis__osteoarthritis_ra_oa >= 1 then 1 else 0 end rheumatoid_arthritis__osteoarthritis_ra_oa,\n    case when schizophrenia >= 1 then 1 else 0 end schizophrenia,\n    case when schizophrenia_and_other_psychotic_disorders >= 1 then 1 else 0 end schizophrenia_and_other_psychotic_disorders,\n    case when sensory_blindness_and_visual_impairment >= 1 then 1 else 0 end sensory_blindness_and_visual_impairment,\n    case when sensory_deafness_and_hearing_impairment >= 1 then 1 else 0 end sensory_deafness_and_hearing_impairment,\n    case when sickle_cell_disease >= 1 then 1 else 0 end sickle_cell_disease,\n    case when spina_bifida_and_other_congenital_anomalies_of_the_nervous_system >= 1 then 1 else 0 end spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    case when spinal_cord_injury >= 1 then 1 else 0 end spinal_cord_injury,\n    case when stroke_transient_ischemic_attack >= 1 then 1 else 0 end stroke_transient_ischemic_attack,\n    case when tobacco_use >= 1 then 1 else 0 end tobacco_use,\n    case when traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage >= 1 then 1 else 0 end traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\nfrom conditions\npivot\n(\n    sum(condition_count)\n    for condition_column_name in\n    (\n        'acquired_hypothyroidism',\n        'acute_myocardial_infarction',\n        'adhd_conduct_disorders_and_hyperkinetic_syndrome',\n        'alcohol_use_disorders',\n        'alzheimers_disease',\n        'alzheimers_disease_and_related_disorders_or_senile_dementia',\n        'anemia',\n        'anxiety_disorders',\n        'asthma',\n        'atrial_fibrillation',\n        'autism_spectrum_disorders',\n        'benign_prostatic_hyperplasia',\n        'bipolar_disorder',\n        'cataract',\n        'cerebral_palsy',\n        'chronic_kidney_disease',\n        'chronic_obstructive_pulmonary_disease_and_bronchiectasis',\n        'colorectal_cancer',\n        'cystic_fibrosis_and_other_metabolic_developmental_disorders',\n        'depression',\n        'diabetes',\n        'drug_use_disorders',\n        'endometrial_cancer',\n        'epilepsy',\n        'female_male_breast_cancer',\n        'fibromyalgia_and_chronic_pain_and_fatigue',\n        'glaucoma',\n        'heart_failure',\n        'hepatitis_a',\n        'hepatitis_b',\n        'hepatitis_c_acute',\n        'hepatitis_c_chronic',\n        'hepatitis_c_unspecified',\n        'hepatitis_d',\n        'hepatitis_e',\n        'hip_pelvic_fracture',\n        'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids',\n        'hyperlipidemia',\n        'hypertension',\n        'intellectual_disabilities_and_related_conditions',\n        'ischemic_heart_disease',\n        'learning_disabilities',\n        'leukemias_and_lymphomas',\n        'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis',\n        'lung_cancer',\n        'migraine_and_chronic_headache',\n        'mobility_impairments',\n        'multiple_sclerosis_and_transverse_myelitis',\n        'muscular_dystrophy',\n        'obesity',\n        'opioid_use_disorder',\n        'osteoporosis',\n        'other_developmental_delays',\n        'peripheral_vascular_disease_pvd',\n        'personality_disorders',\n        'post_traumatic_stress_disorder_ptsd',\n        'pressure_and_chronic_ulcers',\n        'prostate_cancer',\n        'rheumatoid_arthritis__osteoarthritis_ra_oa',\n        'schizophrenia',\n        'schizophrenia_and_other_psychotic_disorders',\n        'sensory_blindness_and_visual_impairment',\n        'sensory_deafness_and_hearing_impairment',\n        'sickle_cell_disease',\n        'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system',\n        'spinal_cord_injury',\n        'stroke_transient_ischemic_attack',\n        'tobacco_use',\n        'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n    )) \nas pvt (\n    patient_id,\n    acquired_hypothyroidism,\n    acute_myocardial_infarction,\n    adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    alcohol_use_disorders,\n    alzheimers_disease,\n    alzheimers_disease_and_related_disorders_or_senile_dementia,\n    anemia,\n    anxiety_disorders,\n    asthma,\n    atrial_fibrillation,\n    autism_spectrum_disorders,\n    benign_prostatic_hyperplasia,\n    bipolar_disorder,\n    cataract,\n    cerebral_palsy,\n    chronic_kidney_disease,\n    chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    colorectal_cancer,\n    cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    depression,\n    diabetes,\n    drug_use_disorders,\n    endometrial_cancer,\n    epilepsy,\n    female_male_breast_cancer,\n    fibromyalgia_and_chronic_pain_and_fatigue,\n    glaucoma,\n    heart_failure,\n    hepatitis_a,\n    hepatitis_b,\n    hepatitis_c_acute,\n    hepatitis_c_chronic,\n    hepatitis_c_unspecified,\n    hepatitis_d,\n    hepatitis_e,\n    hip_pelvic_fracture,\n    human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    hyperlipidemia,\n    hypertension,\n    intellectual_disabilities_and_related_conditions,\n    ischemic_heart_disease,\n    learning_disabilities,\n    leukemias_and_lymphomas,\n    liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    lung_cancer,\n    migraine_and_chronic_headache,\n    mobility_impairments,\n    multiple_sclerosis_and_transverse_myelitis,\n    muscular_dystrophy,\n    obesity,\n    opioid_use_disorder,\n    osteoporosis,\n    other_developmental_delays,\n    peripheral_vascular_disease_pvd,\n    personality_disorders,\n    post_traumatic_stress_disorder_ptsd,\n    pressure_and_chronic_ulcers,\n    prostate_cancer,\n    rheumatoid_arthritis__osteoarthritis_ra_oa,\n    schizophrenia,\n    schizophrenia_and_other_psychotic_disorders,\n    sensory_blindness_and_visual_impairment,\n    sensory_deafness_and_hearing_impairment,\n    sickle_cell_disease,\n    spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    spinal_cord_injury,\n    stroke_transient_ischemic_attack,\n    tobacco_use,\n    traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.union_calculations", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "chronic_conditions", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "chronic_conditions", "fqn": ["tuva", "chronic_conditions", "condition_pivot"], "unique_id": "model.tuva.condition_pivot", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions/condition_pivot.sql", "original_file_path": "models/chronic_conditions/condition_pivot.sql", "name": "condition_pivot", "alias": "condition_pivot", "checksum": {"name": "sha256", "checksum": "a657302164b374fb5cb80c864e223a19fc399390aa813a332d5c893d3f1f3fe1"}, "tags": [], "refs": [["union_calculations"], ["chronic_conditions"]], "sources": [], "description": "A patient-level table (i.e. one record per patient) with flags for each chronic condition.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/chronic_conditions/condition_pivot.yml", "compiled_path": "target/compiled/tuva/models/chronic_conditions/condition_pivot.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "chronic_conditions", "materialized": "view"}, "created_at": 1637185476, "compiled_sql": "\n\nwith conditions as (\nselect\n    a.patient_id\n,   b.condition_column_name\n,   1 as condition_count\nfrom tuva.chronic_conditions.union_calculations a\ninner join (select distinct condition, condition_column_name from tuva.seed.chronic_conditions) b\n    on a.condition = b.condition\n)\n\nselect \n    patient_id,\n    case when acquired_hypothyroidism >= 1 then 1 else 0 end acquired_hypothyroidism,\n    case when acute_myocardial_infarction >= 1 then 1 else 0 end acute_myocardial_infarction,\n    case when adhd_conduct_disorders_and_hyperkinetic_syndrome >= 1 then 1 else 0 end adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    case when alcohol_use_disorders >= 1 then 1 else 0 end alcohol_use_disorders,\n    case when alzheimers_disease >= 1 then 1 else 0 end alzheimers_disease,\n    case when alzheimers_disease_and_related_disorders_or_senile_dementia >= 1 then 1 else 0 end alzheimers_disease_and_related_disorders_or_senile_dementia,\n    case when anemia >= 1 then 1 else 0 end anemia,\n    case when anxiety_disorders >= 1 then 1 else 0 end anxiety_disorders,\n    case when asthma >= 1 then 1 else 0 end asthma,\n    case when atrial_fibrillation >= 1 then 1 else 0 end atrial_fibrillation,\n    case when autism_spectrum_disorders >= 1 then 1 else 0 end autism_spectrum_disorders,\n    case when benign_prostatic_hyperplasia >= 1 then 1 else 0 end benign_prostatic_hyperplasia,\n    case when bipolar_disorder >= 1 then 1 else 0 end bipolar_disorder,\n    case when cataract >= 1 then 1 else 0 end cataract,\n    case when cerebral_palsy >= 1 then 1 else 0 end cerebral_palsy,\n    case when chronic_kidney_disease >= 1 then 1 else 0 end chronic_kidney_disease,\n    case when chronic_obstructive_pulmonary_disease_and_bronchiectasis >= 1 then 1 else 0 end chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    case when colorectal_cancer >= 1 then 1 else 0 end colorectal_cancer,\n    case when cystic_fibrosis_and_other_metabolic_developmental_disorders >= 1 then 1 else 0 end cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    case when depression >= 1 then 1 else 0 end depression,\n    case when diabetes >= 1 then 1 else 0 end diabetes,\n    case when drug_use_disorders >= 1 then 1 else 0 end drug_use_disorders,\n    case when endometrial_cancer >= 1 then 1 else 0 end endometrial_cancer,\n    case when epilepsy >= 1 then 1 else 0 end epilepsy,\n    case when female_male_breast_cancer >= 1 then 1 else 0 end female_male_breast_cancer,\n    case when fibromyalgia_and_chronic_pain_and_fatigue >= 1 then 1 else 0 end fibromyalgia_and_chronic_pain_and_fatigue,\n    case when glaucoma >= 1 then 1 else 0 end glaucoma,\n    case when heart_failure >= 1 then 1 else 0 end heart_failure,\n    case when hepatitis_a >= 1 then 1 else 0 end hepatitis_a,\n    case when hepatitis_b >= 1 then 1 else 0 end hepatitis_b,\n    case when hepatitis_c_acute >= 1 then 1 else 0 end hepatitis_c_acute,\n    case when hepatitis_c_chronic >= 1 then 1 else 0 end hepatitis_c_chronic,\n    case when hepatitis_c_unspecified >= 1 then 1 else 0 end hepatitis_c_unspecified,\n    case when hepatitis_d >= 1 then 1 else 0 end hepatitis_d,\n    case when hepatitis_e >= 1 then 1 else 0 end hepatitis_e,\n    case when hip_pelvic_fracture >= 1 then 1 else 0 end hip_pelvic_fracture,\n    case when human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids >= 1 then 1 else 0 end human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    case when hyperlipidemia >= 1 then 1 else 0 end hyperlipidemia,\n    case when hypertension >= 1 then 1 else 0 end hypertension,\n    case when intellectual_disabilities_and_related_conditions >= 1 then 1 else 0 end intellectual_disabilities_and_related_conditions,\n    case when ischemic_heart_disease >= 1 then 1 else 0 end ischemic_heart_disease,\n    case when learning_disabilities >= 1 then 1 else 0 end learning_disabilities,\n    case when leukemias_and_lymphomas >= 1 then 1 else 0 end leukemias_and_lymphomas,\n    case when liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis >= 1 then 1 else 0 end liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    case when lung_cancer >= 1 then 1 else 0 end lung_cancer,\n    case when migraine_and_chronic_headache >= 1 then 1 else 0 end migraine_and_chronic_headache,\n    case when mobility_impairments >= 1 then 1 else 0 end mobility_impairments,\n    case when multiple_sclerosis_and_transverse_myelitis >= 1 then 1 else 0 end multiple_sclerosis_and_transverse_myelitis,\n    case when muscular_dystrophy >= 1 then 1 else 0 end muscular_dystrophy,\n    case when obesity >= 1 then 1 else 0 end obesity,\n    case when opioid_use_disorder >= 1 then 1 else 0 end opioid_use_disorder,\n    case when osteoporosis >= 1 then 1 else 0 end osteoporosis,\n    case when other_developmental_delays >= 1 then 1 else 0 end other_developmental_delays,\n    case when peripheral_vascular_disease_pvd >= 1 then 1 else 0 end peripheral_vascular_disease_pvd,\n    case when personality_disorders >= 1 then 1 else 0 end personality_disorders,\n    case when post_traumatic_stress_disorder_ptsd >= 1 then 1 else 0 end post_traumatic_stress_disorder_ptsd,\n    case when pressure_and_chronic_ulcers >= 1 then 1 else 0 end pressure_and_chronic_ulcers,\n    case when prostate_cancer >= 1 then 1 else 0 end prostate_cancer,\n    case when rheumatoid_arthritis__osteoarthritis_ra_oa >= 1 then 1 else 0 end rheumatoid_arthritis__osteoarthritis_ra_oa,\n    case when schizophrenia >= 1 then 1 else 0 end schizophrenia,\n    case when schizophrenia_and_other_psychotic_disorders >= 1 then 1 else 0 end schizophrenia_and_other_psychotic_disorders,\n    case when sensory_blindness_and_visual_impairment >= 1 then 1 else 0 end sensory_blindness_and_visual_impairment,\n    case when sensory_deafness_and_hearing_impairment >= 1 then 1 else 0 end sensory_deafness_and_hearing_impairment,\n    case when sickle_cell_disease >= 1 then 1 else 0 end sickle_cell_disease,\n    case when spina_bifida_and_other_congenital_anomalies_of_the_nervous_system >= 1 then 1 else 0 end spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    case when spinal_cord_injury >= 1 then 1 else 0 end spinal_cord_injury,\n    case when stroke_transient_ischemic_attack >= 1 then 1 else 0 end stroke_transient_ischemic_attack,\n    case when tobacco_use >= 1 then 1 else 0 end tobacco_use,\n    case when traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage >= 1 then 1 else 0 end traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\nfrom conditions\npivot\n(\n    sum(condition_count)\n    for condition_column_name in\n    (\n        'acquired_hypothyroidism',\n        'acute_myocardial_infarction',\n        'adhd_conduct_disorders_and_hyperkinetic_syndrome',\n        'alcohol_use_disorders',\n        'alzheimers_disease',\n        'alzheimers_disease_and_related_disorders_or_senile_dementia',\n        'anemia',\n        'anxiety_disorders',\n        'asthma',\n        'atrial_fibrillation',\n        'autism_spectrum_disorders',\n        'benign_prostatic_hyperplasia',\n        'bipolar_disorder',\n        'cataract',\n        'cerebral_palsy',\n        'chronic_kidney_disease',\n        'chronic_obstructive_pulmonary_disease_and_bronchiectasis',\n        'colorectal_cancer',\n        'cystic_fibrosis_and_other_metabolic_developmental_disorders',\n        'depression',\n        'diabetes',\n        'drug_use_disorders',\n        'endometrial_cancer',\n        'epilepsy',\n        'female_male_breast_cancer',\n        'fibromyalgia_and_chronic_pain_and_fatigue',\n        'glaucoma',\n        'heart_failure',\n        'hepatitis_a',\n        'hepatitis_b',\n        'hepatitis_c_acute',\n        'hepatitis_c_chronic',\n        'hepatitis_c_unspecified',\n        'hepatitis_d',\n        'hepatitis_e',\n        'hip_pelvic_fracture',\n        'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids',\n        'hyperlipidemia',\n        'hypertension',\n        'intellectual_disabilities_and_related_conditions',\n        'ischemic_heart_disease',\n        'learning_disabilities',\n        'leukemias_and_lymphomas',\n        'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis',\n        'lung_cancer',\n        'migraine_and_chronic_headache',\n        'mobility_impairments',\n        'multiple_sclerosis_and_transverse_myelitis',\n        'muscular_dystrophy',\n        'obesity',\n        'opioid_use_disorder',\n        'osteoporosis',\n        'other_developmental_delays',\n        'peripheral_vascular_disease_pvd',\n        'personality_disorders',\n        'post_traumatic_stress_disorder_ptsd',\n        'pressure_and_chronic_ulcers',\n        'prostate_cancer',\n        'rheumatoid_arthritis__osteoarthritis_ra_oa',\n        'schizophrenia',\n        'schizophrenia_and_other_psychotic_disorders',\n        'sensory_blindness_and_visual_impairment',\n        'sensory_deafness_and_hearing_impairment',\n        'sickle_cell_disease',\n        'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system',\n        'spinal_cord_injury',\n        'stroke_transient_ischemic_attack',\n        'tobacco_use',\n        'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n    )) \nas pvt (\n    patient_id,\n    acquired_hypothyroidism,\n    acute_myocardial_infarction,\n    adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    alcohol_use_disorders,\n    alzheimers_disease,\n    alzheimers_disease_and_related_disorders_or_senile_dementia,\n    anemia,\n    anxiety_disorders,\n    asthma,\n    atrial_fibrillation,\n    autism_spectrum_disorders,\n    benign_prostatic_hyperplasia,\n    bipolar_disorder,\n    cataract,\n    cerebral_palsy,\n    chronic_kidney_disease,\n    chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    colorectal_cancer,\n    cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    depression,\n    diabetes,\n    drug_use_disorders,\n    endometrial_cancer,\n    epilepsy,\n    female_male_breast_cancer,\n    fibromyalgia_and_chronic_pain_and_fatigue,\n    glaucoma,\n    heart_failure,\n    hepatitis_a,\n    hepatitis_b,\n    hepatitis_c_acute,\n    hepatitis_c_chronic,\n    hepatitis_c_unspecified,\n    hepatitis_d,\n    hepatitis_e,\n    hip_pelvic_fracture,\n    human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    hyperlipidemia,\n    hypertension,\n    intellectual_disabilities_and_related_conditions,\n    ischemic_heart_disease,\n    learning_disabilities,\n    leukemias_and_lymphomas,\n    liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    lung_cancer,\n    migraine_and_chronic_headache,\n    mobility_impairments,\n    multiple_sclerosis_and_transverse_myelitis,\n    muscular_dystrophy,\n    obesity,\n    opioid_use_disorder,\n    osteoporosis,\n    other_developmental_delays,\n    peripheral_vascular_disease_pvd,\n    personality_disorders,\n    post_traumatic_stress_disorder_ptsd,\n    pressure_and_chronic_ulcers,\n    prostate_cancer,\n    rheumatoid_arthritis__osteoarthritis_ra_oa,\n    schizophrenia,\n    schizophrenia_and_other_psychotic_disorders,\n    sensory_blindness_and_visual_impairment,\n    sensory_deafness_and_hearing_impairment,\n    sickle_cell_disease,\n    spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    spinal_cord_injury,\n    stroke_transient_ischemic_attack,\n    tobacco_use,\n    traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.chronic_conditions.condition_pivot"}, "model.tuva.condition_logic": {"raw_sql": "{{ config(materialized='view') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_code_ranking\nfrom {{ ref('stg_patients') }}  a\nleft join {{ ref('stg_encounters') }}  b\n    on a.patient_id = b.patient_id    \nleft join {{ ref('stg_diagnoses') }} c\n    on b.encounter_id = c.encounter_id\n)\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_code_ranking in (1,2)\n    and b.condition = 'Acute Myocardial Infarction'\n    and b.inclusion_type = 'Include'\n\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_code_ranking in (1,2)\n    and b.condition = 'Atrial Fibrillation'\n    and b.inclusion_type = 'Include'\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_code_ranking = 1\n    and b.condition = 'Cataract'\n    and b.inclusion_type = 'Include'\n\nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_code_ranking = 1\n    and b.condition = 'Glaucoma'\n    and b.inclusion_type = 'Include'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.stg_patients", "model.tuva.stg_encounters", "model.tuva.stg_diagnoses", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "chronic_conditions", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "chronic_conditions", "fqn": ["tuva", "chronic_conditions", "condition_logic"], "unique_id": "model.tuva.condition_logic", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions/condition_logic.sql", "original_file_path": "models/chronic_conditions/condition_logic.sql", "name": "condition_logic", "alias": "condition_logic", "checksum": {"name": "sha256", "checksum": "86c5440411521c6002ec31d3acf77bd178087a93c7723e2926a1e706962b562b"}, "tags": [], "refs": [["stg_patients"], ["stg_encounters"], ["stg_diagnoses"], ["chronic_conditions"], ["chronic_conditions"], ["chronic_conditions"], ["chronic_conditions"]], "sources": [], "description": "This model contains logic for mapping ICD-10-CM diagnosis codes and ICD-10-PCS procedure codes to chronic conditions.  Conditions mapped in this model require additional logic (e.g. restricting diagnosis codes to primary or secondary in order to qualify).\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique ID for each encounter (visit).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The date the encounter began.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Cardiovascular Disease).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/chronic_conditions/condition_logic.yml", "compiled_path": "target/compiled/tuva/models/chronic_conditions/condition_logic.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "chronic_conditions", "materialized": "view"}, "created_at": 1637185477, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_code_ranking\nfrom tuva.staging.stg_patients  a\nleft join tuva.staging.stg_encounters  b\n    on a.patient_id = b.patient_id    \nleft join tuva.staging.stg_diagnoses c\n    on b.encounter_id = c.encounter_id\n)\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.seed.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_code_ranking in (1,2)\n    and b.condition = 'Acute Myocardial Infarction'\n    and b.inclusion_type = 'Include'\n\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.seed.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_code_ranking in (1,2)\n    and b.condition = 'Atrial Fibrillation'\n    and b.inclusion_type = 'Include'\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.seed.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_code_ranking = 1\n    and b.condition = 'Cataract'\n    and b.inclusion_type = 'Include'\n\nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.seed.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_code_ranking = 1\n    and b.condition = 'Glaucoma'\n    and b.inclusion_type = 'Include'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.chronic_conditions.condition_logic"}, "model.tuva.union_calculations": {"raw_sql": "{{ config(materialized='view') }}\n\nwith condition_union as (\nselect *\nfrom {{ ref('condition_logic_simple') }}\n\nunion\n\nselect *\nfrom {{ ref('condition_logic') }}\n\nunion\n\nselect *\nfrom {{ ref('benign_prostatic_hyperplasia') }}\n\nunion\n\nselect *\nfrom {{ ref('stroke_transient_ischemic_attack') }}\n)\n\nselect\n    patient_id\n,   condition_category\n,   condition\n,   min(encounter_start_date) as condition_onset_date\n,   max(encounter_start_date) as condition_recent_date\n,   count(encounter_id) as condition_count\nfrom condition_union\ngroup by 1,2,3", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.condition_logic_simple", "model.tuva.condition_logic", "model.tuva.benign_prostatic_hyperplasia", "model.tuva.stroke_transient_ischemic_attack"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "chronic_conditions", "database": "tuva", "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "chronic_conditions", "fqn": ["tuva", "chronic_conditions", "union_calculations"], "unique_id": "model.tuva.union_calculations", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions/union_calculations.sql", "original_file_path": "models/chronic_conditions/union_calculations.sql", "name": "union_calculations", "alias": "union_calculations", "checksum": {"name": "sha256", "checksum": "0ad1ea4139210e857cc465a9edea49cf05c149304896310475cef2f03823d15d"}, "tags": [], "refs": [["condition_logic_simple"], ["condition_logic"], ["benign_prostatic_hyperplasia"], ["stroke_transient_ischemic_attack"]], "sources": [], "description": "This model unions condition flags from the 4 upstream models that calculate them.  It also calculates 3 metrics for each condition.  The resulting data is at the patient-condition level (i.e. one record per patient-condition).\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Cardiovascular Disease).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_onset_date": {"name": "condition_onset_date", "description": "The date the patient was first diagnosed with the condition.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_recent_date": {"name": "condition_recent_date", "description": "The date the patient was most recently diagnosed with the condition.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_count": {"name": "condition_count", "description": "The total number of times the patient had an encounter with this condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "tuva://models/chronic_conditions/union_calculations.yml", "compiled_path": "target/compiled/tuva/models/chronic_conditions/union_calculations.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "chronic_conditions", "materialized": "view"}, "created_at": 1637185477, "compiled_sql": "\n\nwith condition_union as (\nselect *\nfrom tuva.chronic_conditions.condition_logic_simple\n\nunion\n\nselect *\nfrom tuva.chronic_conditions.condition_logic\n\nunion\n\nselect *\nfrom tuva.chronic_conditions.benign_prostatic_hyperplasia\n\nunion\n\nselect *\nfrom tuva.chronic_conditions.stroke_transient_ischemic_attack\n)\n\nselect\n    patient_id\n,   condition_category\n,   condition\n,   min(encounter_start_date) as condition_onset_date\n,   max(encounter_start_date) as condition_recent_date\n,   count(encounter_id) as condition_count\nfrom condition_union\ngroup by 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.chronic_conditions.union_calculations"}, "test.tuva.death_after_birth": {"raw_sql": "select *\nfrom {{ ref('stg_patients') }}\nwhere (deceased_date is not null) and (birth_date > deceased_date)", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.tuva.stg_patients"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "data_test", "death_after_birth"], "unique_id": "test.tuva.death_after_birth", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "data_test/death_after_birth.sql", "original_file_path": "tests/death_after_birth.sql", "name": "death_after_birth", "alias": "death_after_birth", "checksum": {"name": "sha256", "checksum": "12b1ce19576be2023e1f2f4fdc10b8918b108e98c9cfe5f1aba5af745296d92b"}, "tags": ["data"], "refs": [["stg_patients"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/tests/death_after_birth.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1637185476, "compiled_sql": "select *\nfrom tuva.staging.stg_patients\nwhere (deceased_date is not null) and (birth_date > deceased_date)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "seed.tuva.categorical_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "seed", "database": "tuva", "tags": [], "full_refresh": null, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "seed", "fqn": ["tuva", "categorical_data"], "unique_id": "seed.tuva.categorical_data", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "categorical_data.csv", "original_file_path": "data/categorical_data.csv", "name": "categorical_data", "alias": "categorical_data", "checksum": {"name": "sha256", "checksum": "5fd64e0b003769b5ec23354c022fa7a3f93723186f83a13b8ed7ee3b4cce165f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "seed"}, "created_at": 1637185476, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.seed.categorical_data"}, "seed.tuva.chronic_conditions": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "seed", "database": "tuva", "tags": [], "full_refresh": null, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "seed", "fqn": ["tuva", "chronic_conditions"], "unique_id": "seed.tuva.chronic_conditions", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions.csv", "original_file_path": "data/chronic_conditions.csv", "name": "chronic_conditions", "alias": "chronic_conditions", "checksum": {"name": "sha256", "checksum": "745da9257b114671d9b1a495f5122daa81daccec89b414a687c5fff79959e142"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "seed"}, "created_at": 1637185476, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.seed.chronic_conditions"}, "test.tuva.not_null_stg_procedures_encounter_id.ba623240fa": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_procedures') }} where {{config.get('where')}}) stg_procedures{% else %}{{ ref('stg_procedures') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tuva.stg_procedures"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "not_null_stg_procedures_encounter_id"], "unique_id": "test.tuva.not_null_stg_procedures_encounter_id.ba623240fa", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/not_null_stg_procedures_encounter_id.sql", "original_file_path": "models/staging/stg_procedures.yml", "name": "not_null_stg_procedures_encounter_id", "alias": "not_null_stg_procedures_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_procedures"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_procedures.yml/schema_test/not_null_stg_procedures_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect *\nfrom tuva.staging.stg_procedures\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id"}, "test.tuva.relationships_stg_procedures_encounter_id__encounter_id__ref_stg_encounters_.75a07aee14": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_stg_procedures_c0c4fdb98df87af22a2eae57fa2ac907\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_encounters')", "field": "encounter_id", "column_name": "encounter_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_procedures') }} where {{config.get('where')}}) stg_procedures{% else %}{{ ref('stg_procedures') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["model.tuva.stg_encounters", "model.tuva.stg_procedures"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "relationships_stg_procedures_c0c4fdb98df87af22a2eae57fa2ac907", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "relationships_stg_procedures_encounter_id__encounter_id__ref_stg_encounters_"], "unique_id": "test.tuva.relationships_stg_procedures_encounter_id__encounter_id__ref_stg_encounters_.75a07aee14", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/relationships_stg_procedures_c0c4fdb98df87af22a2eae57fa2ac907.sql", "original_file_path": "models/staging/stg_procedures.yml", "name": "relationships_stg_procedures_encounter_id__encounter_id__ref_stg_encounters_", "alias": "relationships_stg_procedures_c0c4fdb98df87af22a2eae57fa2ac907", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_encounters"], ["stg_procedures"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_procedures.yml/schema_test/relationships_stg_procedures_c0c4fdb98df87af22a2eae57fa2ac907.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_procedures_c0c4fdb98df87af22a2eae57fa2ac907"}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect\n    child.encounter_id\n\nfrom tuva.staging.stg_procedures as child\n\nleft join tuva.staging.stg_encounters as parent\n    on child.encounter_id = parent.encounter_id\n\nwhere child.encounter_id is not null\n  and parent.encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id"}, "test.tuva.unique_stg_patients_patient_id.121e54ee91": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "patient_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_patients') }} where {{config.get('where')}}) stg_patients{% else %}{{ ref('stg_patients') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tuva.stg_patients"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "unique_stg_patients_patient_id"], "unique_id": "test.tuva.unique_stg_patients_patient_id.121e54ee91", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/unique_stg_patients_patient_id.sql", "original_file_path": "models/staging/stg_patients.yml", "name": "unique_stg_patients_patient_id", "alias": "unique_stg_patients_patient_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_patients"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_patients.yml/schema_test/unique_stg_patients_patient_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect\n    patient_id,\n    count(*) as n_records\n\nfrom tuva.staging.stg_patients\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id"}, "test.tuva.not_null_stg_patients_patient_id.18228e980a": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_patients') }} where {{config.get('where')}}) stg_patients{% else %}{{ ref('stg_patients') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tuva.stg_patients"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "not_null_stg_patients_patient_id"], "unique_id": "test.tuva.not_null_stg_patients_patient_id.18228e980a", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/not_null_stg_patients_patient_id.sql", "original_file_path": "models/staging/stg_patients.yml", "name": "not_null_stg_patients_patient_id", "alias": "not_null_stg_patients_patient_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_patients"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_patients.yml/schema_test/not_null_stg_patients_patient_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect *\nfrom tuva.staging.stg_patients\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id"}, "test.tuva.categorical_data_lookup_stg_patients_Discharge_Disposition__gender_code.3d57a84b27": {"raw_sql": "{{ test_categorical_data_lookup(**_dbt_schema_test_kwargs) }}{{ config(alias=\"categorical_data_lookup_stg_pa_4028d1a9b67d3f7d7d09c68bb234e610\") }}", "test_metadata": {"name": "categorical_data_lookup", "kwargs": {"code_set": "Discharge Disposition", "column_name": "gender_code", "model": "{% if config.get('where') %}(select * from {{ ref('stg_patients') }} where {{config.get('where')}}) stg_patients{% else %}{{ ref('stg_patients') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.tuva.test_categorical_data_lookup"], "nodes": ["model.tuva.stg_patients"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "categorical_data_lookup_stg_pa_4028d1a9b67d3f7d7d09c68bb234e610", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "categorical_data_lookup_stg_patients_Discharge_Disposition__gender_code"], "unique_id": "test.tuva.categorical_data_lookup_stg_patients_Discharge_Disposition__gender_code.3d57a84b27", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/categorical_data_lookup_stg_pa_4028d1a9b67d3f7d7d09c68bb234e610.sql", "original_file_path": "models/staging/stg_patients.yml", "name": "categorical_data_lookup_stg_patients_Discharge_Disposition__gender_code", "alias": "categorical_data_lookup_stg_pa_4028d1a9b67d3f7d7d09c68bb234e610", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_patients"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_patients.yml/schema_test/categorical_data_lookup_stg_pa_4028d1a9b67d3f7d7d09c68bb234e610.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "categorical_data_lookup_stg_pa_4028d1a9b67d3f7d7d09c68bb234e610"}, "created_at": 1637185476, "compiled_sql": "\n\nselect\n    gender_code\nfrom tuva.staging.stg_patients a\nleft join categorical_data b\n    on a.gender_code = b.code_value\n    and b.code_set = 'Discharge Disposition'\nwhere b.code_value is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gender_code"}, "test.tuva.not_null_stg_diagnoses_encounter_id.4dd9b44a6a": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_diagnoses') }} where {{config.get('where')}}) stg_diagnoses{% else %}{{ ref('stg_diagnoses') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tuva.stg_diagnoses"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "not_null_stg_diagnoses_encounter_id"], "unique_id": "test.tuva.not_null_stg_diagnoses_encounter_id.4dd9b44a6a", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/not_null_stg_diagnoses_encounter_id.sql", "original_file_path": "models/staging/stg_diagnoses.yml", "name": "not_null_stg_diagnoses_encounter_id", "alias": "not_null_stg_diagnoses_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_diagnoses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_diagnoses.yml/schema_test/not_null_stg_diagnoses_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect *\nfrom tuva.staging.stg_diagnoses\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id"}, "test.tuva.relationships_stg_diagnoses_encounter_id__encounter_id__ref_stg_encounters_.4f103bceb7": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_stg_diagnoses_67b5a20a33d2597c7398a570fb2bcba6\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_encounters')", "field": "encounter_id", "column_name": "encounter_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_diagnoses') }} where {{config.get('where')}}) stg_diagnoses{% else %}{{ ref('stg_diagnoses') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["model.tuva.stg_encounters", "model.tuva.stg_diagnoses"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "relationships_stg_diagnoses_67b5a20a33d2597c7398a570fb2bcba6", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "relationships_stg_diagnoses_encounter_id__encounter_id__ref_stg_encounters_"], "unique_id": "test.tuva.relationships_stg_diagnoses_encounter_id__encounter_id__ref_stg_encounters_.4f103bceb7", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/relationships_stg_diagnoses_67b5a20a33d2597c7398a570fb2bcba6.sql", "original_file_path": "models/staging/stg_diagnoses.yml", "name": "relationships_stg_diagnoses_encounter_id__encounter_id__ref_stg_encounters_", "alias": "relationships_stg_diagnoses_67b5a20a33d2597c7398a570fb2bcba6", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_encounters"], ["stg_diagnoses"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_diagnoses.yml/schema_test/relationships_stg_diagnoses_67b5a20a33d2597c7398a570fb2bcba6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_diagnoses_67b5a20a33d2597c7398a570fb2bcba6"}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect\n    child.encounter_id\n\nfrom tuva.staging.stg_diagnoses as child\n\nleft join tuva.staging.stg_encounters as parent\n    on child.encounter_id = parent.encounter_id\n\nwhere child.encounter_id is not null\n  and parent.encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id"}, "test.tuva.unique_stg_encounters_encounter_id.1007f14c49": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "encounter_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_encounters') }} where {{config.get('where')}}) stg_encounters{% else %}{{ ref('stg_encounters') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.tuva.stg_encounters"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "unique_stg_encounters_encounter_id"], "unique_id": "test.tuva.unique_stg_encounters_encounter_id.1007f14c49", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/unique_stg_encounters_encounter_id.sql", "original_file_path": "models/staging/stg_encounters.yml", "name": "unique_stg_encounters_encounter_id", "alias": "unique_stg_encounters_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_encounters"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_encounters.yml/schema_test/unique_stg_encounters_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect\n    encounter_id,\n    count(*) as n_records\n\nfrom tuva.staging.stg_encounters\nwhere encounter_id is not null\ngroup by encounter_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id"}, "test.tuva.not_null_stg_encounters_encounter_id.dd15417e7c": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_encounters') }} where {{config.get('where')}}) stg_encounters{% else %}{{ ref('stg_encounters') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tuva.stg_encounters"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "not_null_stg_encounters_encounter_id"], "unique_id": "test.tuva.not_null_stg_encounters_encounter_id.dd15417e7c", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/not_null_stg_encounters_encounter_id.sql", "original_file_path": "models/staging/stg_encounters.yml", "name": "not_null_stg_encounters_encounter_id", "alias": "not_null_stg_encounters_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_encounters"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_encounters.yml/schema_test/not_null_stg_encounters_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect *\nfrom tuva.staging.stg_encounters\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id"}, "test.tuva.not_null_stg_encounters_patient_id.485c3ec9e4": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_encounters') }} where {{config.get('where')}}) stg_encounters{% else %}{{ ref('stg_encounters') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.tuva.stg_encounters"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "not_null_stg_encounters_patient_id"], "unique_id": "test.tuva.not_null_stg_encounters_patient_id.485c3ec9e4", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/not_null_stg_encounters_patient_id.sql", "original_file_path": "models/staging/stg_encounters.yml", "name": "not_null_stg_encounters_patient_id", "alias": "not_null_stg_encounters_patient_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_encounters"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_encounters.yml/schema_test/not_null_stg_encounters_patient_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect *\nfrom tuva.staging.stg_encounters\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id"}, "test.tuva.relationships_stg_encounters_patient_id__patient_id__ref_stg_patients_.ea166bae85": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_stg_encounters_617e958530529628e4ddc571244eca08\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_patients')", "field": "patient_id", "column_name": "patient_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_encounters') }} where {{config.get('where')}}) stg_encounters{% else %}{{ ref('stg_encounters') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["model.tuva.stg_patients", "model.tuva.stg_encounters"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "relationships_stg_encounters_617e958530529628e4ddc571244eca08", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "relationships_stg_encounters_patient_id__patient_id__ref_stg_patients_"], "unique_id": "test.tuva.relationships_stg_encounters_patient_id__patient_id__ref_stg_patients_.ea166bae85", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/relationships_stg_encounters_617e958530529628e4ddc571244eca08.sql", "original_file_path": "models/staging/stg_encounters.yml", "name": "relationships_stg_encounters_patient_id__patient_id__ref_stg_patients_", "alias": "relationships_stg_encounters_617e958530529628e4ddc571244eca08", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_patients"], ["stg_encounters"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_encounters.yml/schema_test/relationships_stg_encounters_617e958530529628e4ddc571244eca08.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_encounters_617e958530529628e4ddc571244eca08"}, "created_at": 1637185476, "compiled_sql": "\n    \n    \n\nselect\n    child.patient_id\n\nfrom tuva.staging.stg_encounters as child\n\nleft join tuva.staging.stg_patients as parent\n    on child.patient_id = parent.patient_id\n\nwhere child.patient_id is not null\n  and parent.patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id"}, "test.tuva.categorical_data_lookup_stg_encounters_Discharge_Disposition__discharge_status_code.db9011e8a6": {"raw_sql": "{{ test_categorical_data_lookup(**_dbt_schema_test_kwargs) }}{{ config(alias=\"categorical_data_lookup_stg_en_da57dbcb7398e4c6aac505e2c76ce50d\") }}", "test_metadata": {"name": "categorical_data_lookup", "kwargs": {"code_set": "Discharge Disposition", "column_name": "discharge_status_code", "model": "{% if config.get('where') %}(select * from {{ ref('stg_encounters') }} where {{config.get('where')}}) stg_encounters{% else %}{{ ref('stg_encounters') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.tuva.test_categorical_data_lookup"], "nodes": ["model.tuva.stg_encounters"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "categorical_data_lookup_stg_en_da57dbcb7398e4c6aac505e2c76ce50d", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "HCUP", "schema": "dbt_test__audit", "fqn": ["tuva", "schema_test", "categorical_data_lookup_stg_encounters_Discharge_Disposition__discharge_status_code"], "unique_id": "test.tuva.categorical_data_lookup_stg_encounters_Discharge_Disposition__discharge_status_code.db9011e8a6", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "schema_test/categorical_data_lookup_stg_en_da57dbcb7398e4c6aac505e2c76ce50d.sql", "original_file_path": "models/staging/stg_encounters.yml", "name": "categorical_data_lookup_stg_encounters_Discharge_Disposition__discharge_status_code", "alias": "categorical_data_lookup_stg_en_da57dbcb7398e4c6aac505e2c76ce50d", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_encounters"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/staging/stg_encounters.yml/schema_test/categorical_data_lookup_stg_en_da57dbcb7398e4c6aac505e2c76ce50d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "categorical_data_lookup_stg_en_da57dbcb7398e4c6aac505e2c76ce50d"}, "created_at": 1637185476, "compiled_sql": "\n\nselect\n    discharge_status_code\nfrom tuva.staging.stg_encounters a\nleft join categorical_data b\n    on a.discharge_status_code = b.code_value\n    and b.code_set = 'Discharge Disposition'\nwhere b.code_value is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "discharge_status_code"}}, "sources": {"source.tuva.source.patients": {"fqn": ["tuva", "source", "patients"], "database": "hcup", "schema": "public", "unique_id": "source.tuva.source.patients", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "patients", "source_name": "source", "source_description": "", "loader": "", "identifier": "patients", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Table containing info about patients (e.g. demographics) with one record per patient.", "columns": {"patient_id": {"name": "patient_id", "description": "The primary key for this table (a unique ID for each person).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_code": {"name": "gender_code", "description": "A string that takes one of two values: 'male', 'female' ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "The date of birth of the patient in this format: 'YYYY-mm-dd' ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deceased_date": {"name": "deceased_date", "description": "The date of death for each patient. It should only be populated for patients who have died and should be NULL for living patients.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hcup.public.patients", "created_at": 1637185477}, "source.tuva.source.encounters": {"fqn": ["tuva", "source", "encounters"], "database": "hcup", "schema": "public", "unique_id": "source.tuva.source.encounters", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "encounters", "source_name": "source", "source_description": "", "loader": "", "identifier": "encounters", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Table containing information about diagnoses (e.g. discharge dates) with one record per encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The primary key for this table (a unique ID for each encounter).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient involved in the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The encounter start date in this format: 'YYYY-MM-DD'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_end_date": {"name": "encounter_end_date", "description": "The encounter end date in this format: 'YYY-MM-DD'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "The admit type code for the encounter.  Indicates type and priority of admission for inpatient hospital stays.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "The admit source code for the encounter.  Indicates where the patient came from prior to admission.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "The discharge status code for the encounter.  Indicates where a patient was discharged to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hcup.public.encounters", "created_at": 1637185477}, "source.tuva.source.diagnoses": {"fqn": ["tuva", "source", "diagnoses"], "database": "hcup", "schema": "public", "unique_id": "source.tuva.source.diagnoses", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "diagnoses", "source_name": "source", "source_description": "", "loader": "", "identifier": "diagnoses", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Table containing diagnosis codes with one record per diagnosis code per patient encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The ID corresponding to the encounter where this diagnosis code occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code": {"name": "diagnosis_code", "description": "ICD-10-CM diagnosis code for this diagnosis.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_ranking": {"name": "diagnosis_code_ranking", "description": "Integer representing the ranking of this diagnosis code.  1 is the primary diagnosis for the encounter.  2 or greater is a secondary diagnosis.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "present_on_admission_code": {"name": "present_on_admission_code", "description": "Code representing whether the diagnosis was present on admission.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hcup.public.diagnoses", "created_at": 1637185477}, "source.tuva.source.procedures": {"fqn": ["tuva", "source", "procedures"], "database": "hcup", "schema": "public", "unique_id": "source.tuva.source.procedures", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "procedures", "source_name": "source", "source_description": "", "loader": "", "identifier": "procedures", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Table containing procedure codes with one record for patient encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The encounter_id corresponding to the encounter where this performed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code": {"name": "procedure_code", "description": "ICD-10-PCS procedure code related to this diagnosis.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_ranking": {"name": "procedure_code_ranking", "description": "Integer representing the ranking of this procedure code (e.g. 1,2,3,...).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hcup.public.procedures", "created_at": 1637185477}}, "macros": {"macro.tuva.test_categorical_data_lookup": {"unique_id": "macro.tuva.test_categorical_data_lookup", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "macros/test_categorical_data_lookup.sql", "original_file_path": "macros/test_categorical_data_lookup.sql", "name": "test_categorical_data_lookup", "macro_sql": "{% test categorical_data_lookup(model, column_name, code_set) %}\n\nselect\n    {{column_name}}\nfrom {{model}} a\nleft join categorical_data b\n    on a.{{column_name}} = b.code_value\n    and b.code_set = '{{code_set}}'\nwhere b.code_value is null\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.tuva.generate_schema_name": {"unique_id": "macro.tuva.generate_schema_name", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        );\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n\n  -- setup\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% do adapter.drop_relation(intermediate_relation) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', macro_namespace = 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nselect\n    child.{{ column_name }}\n\nfrom {{ model }} as child\n\nleft join {{ to }} as parent\n    on child.{{ column_name }} = parent.{{ field }}\n\nwhere child.{{ column_name }} is not null\n  and parent.{{ field }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }},\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1637185476}}, "docs": {"tuva.__overview__": {"unique_id": "tuva.__overview__", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__overview__", "block_contents": "# Tuva\n\nThis project cleans and enhances raw healthcare data (EHR and claims data) to make it ready for machine learning and analytics.  The project runs on a minimum set of commonly available healthcare data fields (currently 4 tables and 18 total fields). This minimizes upfront configuration time.  Running the project creates new, data quality tested data in your data warehouse that is ready to power a variety of healthcare analytics use cases.\n\n| **use case** | **description** | **status** |\n| --------------- | -------------------- | ------------------- |\n| [chronic_conditions](#chronic-conditions) | Each patient is flagged for having any of 69 chronic conditions within 9 clinical areas (definitions based on CMS Chronic Condition Warehouse). | Available |\n| clinical_classification_software | Diagnosis grouper (over 70,000 ICD-10-CM are grouped into 530 clinical categories across 21 clinical domains) and procedure grouper (over 80,000 ICD-10-PCS codes are grouped into 320 procedure categories across 31 clinical domains). | Planned Release: Nov 2021 |\n| readmissions | All 7 CMS readmission measures, LACE index, and pre-processed tables ready to train ML readmission models. | Planned: Nov 2021 |\n| cms_and_hhs_hccs | Condition categories, hierarchies, and risk scores at the patient-level. | Planned Release: Dec 2021 |\n\n## Pre-requisites\n1. You have healthcare data (EHR or claims data) in a data warehouse\n2. You have [dbt](https://www.getdbt.com/) installed and configured (i.e. connected to your data warehouse)\n\n## Configuration\n\n1. [Clone](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository) this repo to your local machine\n2. Configure [dbt_profile.yml](/dbt_profile.yml) \n3. Configure staging models\n\nThis package requires you to configure 4 staging models.  These 4 staging models are all that is needed to run all the logic in this project.\n\nTo configure each staging model, directly modify each [sql file](models/staging) so that they run on your data.  The sql provided in these files shows you the target schema (tables, columns, and data types) that are required, but you must map your data to this schema by modifying the files.\n\n| **staging table** | **description** |\n| --------------- | -------------------- |\n| [patients](models/stage/patients.sql) | One record per patient with basic demographic information. |\n| [encounters](models/stage/encounters.sql) | One record per encounter with basic administrative information and links to patients. |\n| [diagnoses](models/stage/diagnoses.sql) | One record per diagnosis which links back to encounters. |\n| [procedures](models/stage/procedures.sql) | One record per procedure which links back to encounters. |\n\n## Use Cases \nThis section summarizes all currently available use cases.\n\n### Chronic Conditions\nFor several types of analyses (e.g. utilization, spend, outcomes, risk-adjustment, etc.) it's necessary to know if a patient has any number of chronic conditions.  The models in this part of the project create 69 chronic conditions flags at the patient-level (i.e. one record per patient).  A 'long' version of the table includes metrics related to each condition such as date of onset, most recent diagnosis date, and total number of encounters with the chronic condition.\n\n\n| **model** | **description** |\n| --------------- | -------------------- |\n| [condition_logic_simple](models/chronic_conditions/condition_logic_simple.sql) | Joins diagnosis and procedure codes from stg_diagnoses and stg_procedures to the proper codes in [chronic_conditions](data/chronic_conditions.csv). |\n| [condition_logic](models/chronic_conditions/condition_logic.sql) | Joins diagnosis and procedure codes from stg_diagnoses and stg_procedures to the proper codes in [chronic_conditions](data/chronic_conditions.csv).  Conditions identified using this logic require additional criteria (e.g. only consider primary diagnosis). |\n| [stroke_transient_ischemic_attack](models/chronic_conditions/stroke_transient_ischemic_attack.sql) | This logic specifically identifies patients who have experienced a stroke or TIA (mini-stroke) by joining diagnosis codes to [chronic_conditions](data/chronic_conditions.csv). |\n| [benign_prostatic_hyperplasia](models/chronic_conditions/benign_prostatic_hyperplasia.sql) | This logic specifically identifies patients who have experience benign prostatic hyperplasia (also known as prostate gland enlargement) by joining to diagnosis codes in [chronic_conditions](data/chronic_conditions.csv). |\n| [union_calculations](models/chronic_conditions/union_calculations.sql) | Unions the four condition logic models together and calculates measures (i.e. date of onset, most recent diagnosis date, and number of distinct encounters with the diagnosis). |\n| [condition_pivot](models/chronic_conditions/condition_pivot.sql) | Pivots union_calculations to create a 'wide' table, i.e. one record per patient with 69 columns, one for each chronic condition (the values of these columns are either 1 if the patient has the condition or 0 otherwise). |\n\n## Contributions\nDon't see a model or specific metric you would have liked to be included? Notice any bugs when installing \nand running the package? If so, we highly encourage and welcome contributions to this package! \nPlease create issues or open PRs against `master`. See [the Discourse post](https://discourse.getdbt.com/t/contributing-to-a-dbt-package/657) for information on how to contribute to a package.\n\n## Database Support\nThis package has been tested on Snowflake.  We are planning to expand testing to BigQuery and Redshift in the near future."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.20.0_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.tuva.stg_procedures": ["source.tuva.source.procedures"], "model.tuva.stg_encounters": ["source.tuva.source.encounters"], "model.tuva.stg_patients": ["source.tuva.source.patients"], "model.tuva.stg_diagnoses": ["source.tuva.source.diagnoses"], "model.tuva.benign_prostatic_hyperplasia": ["model.tuva.stg_diagnoses", "model.tuva.stg_encounters", "model.tuva.stg_patients", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"], "model.tuva.stroke_transient_ischemic_attack": ["model.tuva.stg_diagnoses", "model.tuva.stg_encounters", "model.tuva.stg_patients", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"], "model.tuva.condition_logic_simple": ["model.tuva.stg_diagnoses", "model.tuva.stg_encounters", "model.tuva.stg_patients", "model.tuva.stg_procedures", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"], "model.tuva.condition_pivot": ["model.tuva.union_calculations", "seed.tuva.chronic_conditions"], "model.tuva.condition_logic": ["model.tuva.stg_diagnoses", "model.tuva.stg_encounters", "model.tuva.stg_patients", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"], "model.tuva.union_calculations": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack"], "test.tuva.death_after_birth": ["model.tuva.stg_patients"], "seed.tuva.categorical_data": [], "seed.tuva.chronic_conditions": [], "test.tuva.not_null_stg_procedures_encounter_id.ba623240fa": ["model.tuva.stg_procedures"], "test.tuva.relationships_stg_procedures_encounter_id__encounter_id__ref_stg_encounters_.75a07aee14": ["model.tuva.stg_encounters", "model.tuva.stg_procedures"], "test.tuva.unique_stg_patients_patient_id.121e54ee91": ["model.tuva.stg_patients"], "test.tuva.not_null_stg_patients_patient_id.18228e980a": ["model.tuva.stg_patients"], "test.tuva.categorical_data_lookup_stg_patients_Discharge_Disposition__gender_code.3d57a84b27": ["model.tuva.stg_patients"], "test.tuva.not_null_stg_diagnoses_encounter_id.4dd9b44a6a": ["model.tuva.stg_diagnoses"], "test.tuva.relationships_stg_diagnoses_encounter_id__encounter_id__ref_stg_encounters_.4f103bceb7": ["model.tuva.stg_diagnoses", "model.tuva.stg_encounters"], "test.tuva.unique_stg_encounters_encounter_id.1007f14c49": ["model.tuva.stg_encounters"], "test.tuva.not_null_stg_encounters_encounter_id.dd15417e7c": ["model.tuva.stg_encounters"], "test.tuva.not_null_stg_encounters_patient_id.485c3ec9e4": ["model.tuva.stg_encounters"], "test.tuva.relationships_stg_encounters_patient_id__patient_id__ref_stg_patients_.ea166bae85": ["model.tuva.stg_encounters", "model.tuva.stg_patients"], "test.tuva.categorical_data_lookup_stg_encounters_Discharge_Disposition__discharge_status_code.db9011e8a6": ["model.tuva.stg_encounters"], "source.tuva.source.patients": [], "source.tuva.source.encounters": [], "source.tuva.source.diagnoses": [], "source.tuva.source.procedures": []}, "child_map": {"model.tuva.stg_procedures": ["model.tuva.condition_logic_simple", "test.tuva.not_null_stg_procedures_encounter_id.ba623240fa", "test.tuva.relationships_stg_procedures_encounter_id__encounter_id__ref_stg_encounters_.75a07aee14"], "model.tuva.stg_encounters": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack", "test.tuva.categorical_data_lookup_stg_encounters_Discharge_Disposition__discharge_status_code.db9011e8a6", "test.tuva.not_null_stg_encounters_encounter_id.dd15417e7c", "test.tuva.not_null_stg_encounters_patient_id.485c3ec9e4", "test.tuva.relationships_stg_diagnoses_encounter_id__encounter_id__ref_stg_encounters_.4f103bceb7", "test.tuva.relationships_stg_encounters_patient_id__patient_id__ref_stg_patients_.ea166bae85", "test.tuva.relationships_stg_procedures_encounter_id__encounter_id__ref_stg_encounters_.75a07aee14", "test.tuva.unique_stg_encounters_encounter_id.1007f14c49"], "model.tuva.stg_patients": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack", "test.tuva.categorical_data_lookup_stg_patients_Discharge_Disposition__gender_code.3d57a84b27", "test.tuva.death_after_birth", "test.tuva.not_null_stg_patients_patient_id.18228e980a", "test.tuva.relationships_stg_encounters_patient_id__patient_id__ref_stg_patients_.ea166bae85", "test.tuva.unique_stg_patients_patient_id.121e54ee91"], "model.tuva.stg_diagnoses": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack", "test.tuva.not_null_stg_diagnoses_encounter_id.4dd9b44a6a", "test.tuva.relationships_stg_diagnoses_encounter_id__encounter_id__ref_stg_encounters_.4f103bceb7"], "model.tuva.benign_prostatic_hyperplasia": ["model.tuva.union_calculations"], "model.tuva.stroke_transient_ischemic_attack": ["model.tuva.union_calculations"], "model.tuva.condition_logic_simple": ["model.tuva.union_calculations"], "model.tuva.condition_pivot": [], "model.tuva.condition_logic": ["model.tuva.union_calculations"], "model.tuva.union_calculations": ["model.tuva.condition_pivot"], "test.tuva.death_after_birth": [], "seed.tuva.categorical_data": [], "seed.tuva.chronic_conditions": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic", "model.tuva.condition_logic", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.condition_logic_simple", "model.tuva.condition_pivot", "model.tuva.stroke_transient_ischemic_attack", "model.tuva.stroke_transient_ischemic_attack"], "test.tuva.not_null_stg_procedures_encounter_id.ba623240fa": [], "test.tuva.relationships_stg_procedures_encounter_id__encounter_id__ref_stg_encounters_.75a07aee14": [], "test.tuva.unique_stg_patients_patient_id.121e54ee91": [], "test.tuva.not_null_stg_patients_patient_id.18228e980a": [], "test.tuva.categorical_data_lookup_stg_patients_Discharge_Disposition__gender_code.3d57a84b27": [], "test.tuva.not_null_stg_diagnoses_encounter_id.4dd9b44a6a": [], "test.tuva.relationships_stg_diagnoses_encounter_id__encounter_id__ref_stg_encounters_.4f103bceb7": [], "test.tuva.unique_stg_encounters_encounter_id.1007f14c49": [], "test.tuva.not_null_stg_encounters_encounter_id.dd15417e7c": [], "test.tuva.not_null_stg_encounters_patient_id.485c3ec9e4": [], "test.tuva.relationships_stg_encounters_patient_id__patient_id__ref_stg_patients_.ea166bae85": [], "test.tuva.categorical_data_lookup_stg_encounters_Discharge_Disposition__discharge_status_code.db9011e8a6": [], "source.tuva.source.patients": ["model.tuva.stg_patients"], "source.tuva.source.encounters": ["model.tuva.stg_encounters"], "source.tuva.source.diagnoses": ["model.tuva.stg_diagnoses"], "source.tuva.source.procedures": ["model.tuva.stg_procedures"]}}