{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json", "dbt_version": "0.21.1", "generated_at": "2022-01-25T18:04:30.133104Z", "invocation_id": "6c25eaf0-16db-4619-ad9f-6e82f74523c4", "env": {}, "project_id": "85619522d85846bb28197090548d8185", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.tuva.benign_prostatic_hyperplasia": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom {{ ref('patients') }}  a\nleft join {{ ref('encounters') }}  b\n    on a.patient_id = b.patient_id    \nleft join {{ ref('diagnoses') }} c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.patients", "model.tuva.encounters", "model.tuva.diagnoses", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "benign_prostatic_hyperplasia"], "unique_id": "model.tuva.benign_prostatic_hyperplasia", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "benign_prostatic_hyperplasia.sql", "original_file_path": "models/benign_prostatic_hyperplasia.sql", "name": "benign_prostatic_hyperplasia", "alias": "benign_prostatic_hyperplasia", "checksum": {"name": "sha256", "checksum": "62776bbd26f51016e4a3f0bbbddadbf20c2162bfe1e4a5c793700d530ac29053"}, "tags": ["chronic conditions"], "refs": [["patients"], ["encounters"], ["diagnoses"], ["chronic_conditions"], ["chronic_conditions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/benign_prostatic_hyperplasia.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom tuva.core.patients  a\nleft join tuva.core.encounters  b\n    on a.patient_id = b.patient_id    \nleft join tuva.core.diagnoses c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join tuva.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.benign_prostatic_hyperplasia"}, "model.tuva.chronic_conditions_long": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith condition_union as (\nselect *\nfrom {{ ref('condition_logic_simple') }}\n\nunion\n\nselect *\nfrom {{ ref('condition_logic') }}\n\nunion\n\nselect *\nfrom {{ ref('benign_prostatic_hyperplasia') }}\n\nunion\n\nselect *\nfrom {{ ref('stroke_transient_ischemic_attack') }}\n)\n\nselect\n    patient_id\n,   condition_category\n,   condition\n,   min(encounter_start_date) as condition_onset_date\n,   max(encounter_start_date) as condition_recent_date\n,   count(encounter_id) as condition_count\nfrom condition_union\ngroup by 1,2,3", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.condition_logic_simple", "model.tuva.condition_logic", "model.tuva.benign_prostatic_hyperplasia", "model.tuva.stroke_transient_ischemic_attack"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "chronic_conditions_long"], "unique_id": "model.tuva.chronic_conditions_long", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions_long.sql", "original_file_path": "models/chronic_conditions_long.sql", "name": "chronic_conditions_long", "alias": "chronic_conditions_long", "checksum": {"name": "sha256", "checksum": "9c593c5fb6c19275bb11e87ebf9131aa4837b86ff13f6bf0f0074de60611b415"}, "tags": ["chronic conditions"], "refs": [["condition_logic_simple"], ["condition_logic"], ["benign_prostatic_hyperplasia"], ["stroke_transient_ischemic_attack"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/chronic_conditions_long.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith condition_union as (\nselect *\nfrom tuva.core.condition_logic_simple\n\nunion\n\nselect *\nfrom tuva.core.condition_logic\n\nunion\n\nselect *\nfrom tuva.core.benign_prostatic_hyperplasia\n\nunion\n\nselect *\nfrom tuva.core.stroke_transient_ischemic_attack\n)\n\nselect\n    patient_id\n,   condition_category\n,   condition\n,   min(encounter_start_date) as condition_onset_date\n,   max(encounter_start_date) as condition_recent_date\n,   count(encounter_id) as condition_count\nfrom condition_union\ngroup by 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.chronic_conditions_long"}, "model.tuva.stroke_transient_ischemic_attack": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom {{ ref('patients') }}  a\nleft join {{ ref('encounters') }}  b\n    on a.patient_id = b.patient_id    \nleft join {{ ref('diagnoses') }} c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.patients", "model.tuva.encounters", "model.tuva.diagnoses", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "stroke_transient_ischemic_attack"], "unique_id": "model.tuva.stroke_transient_ischemic_attack", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "stroke_transient_ischemic_attack.sql", "original_file_path": "models/stroke_transient_ischemic_attack.sql", "name": "stroke_transient_ischemic_attack", "alias": "stroke_transient_ischemic_attack", "checksum": {"name": "sha256", "checksum": "599d5f739be7e02539bc533d83f766e021332ed205cdfe101e9cc2cc0f3ecd67"}, "tags": ["chronic conditions"], "refs": [["patients"], ["encounters"], ["diagnoses"], ["chronic_conditions"], ["chronic_conditions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/stroke_transient_ischemic_attack.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom tuva.core.patients  a\nleft join tuva.core.encounters  b\n    on a.patient_id = b.patient_id    \nleft join tuva.core.diagnoses c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join tuva.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.stroke_transient_ischemic_attack"}, "model.tuva.procedures": {"raw_sql": "{{ config(materialized='view', tags='core') }}\n\nselect\n    encounter_id\n,   code_type\n,   procedure_code \nfrom {{ var('src_procedures') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.source.stg_procedures"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["core"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "procedures"], "unique_id": "model.tuva.procedures", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "procedures.sql", "original_file_path": "models/procedures.sql", "name": "procedures", "alias": "procedures", "checksum": {"name": "sha256", "checksum": "d97c5df22fa3a4c795056e97b622fedc8415878df43a78c08ba5abee78a7f6bb"}, "tags": ["core"], "refs": [], "sources": [["source", "stg_procedures"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/procedures.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["core"]}, "created_at": 1643133870, "compiled_sql": "\n\nselect\n    encounter_id\n,   code_type\n,   procedure_code \nfrom desynpuf.staging.stg_procedures", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.procedures"}, "model.tuva.coverage": {"raw_sql": "{{ config(materialized='view', tags='core') }}\n\nselect\n    patient_id\n,   coverage_start_date\n,   coverage_end_date\n,   primary_payer\n,   payer_type\nfrom {{ var('src_coverage') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.source.stg_coverage"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["core"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "coverage"], "unique_id": "model.tuva.coverage", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "coverage.sql", "original_file_path": "models/coverage.sql", "name": "coverage", "alias": "coverage", "checksum": {"name": "sha256", "checksum": "23c8a15d46a32ecff965228be30703f358fb53be8a2442029960d7e67196eabe"}, "tags": ["core"], "refs": [], "sources": [["source", "stg_coverage"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/coverage.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["core"]}, "created_at": 1643133870, "compiled_sql": "\n\nselect\n    patient_id\n,   coverage_start_date\n,   coverage_end_date\n,   primary_payer\n,   payer_type\nfrom desynpuf.staging.stg_coverage", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.coverage"}, "model.tuva.hospital_wide_readmission": {"raw_sql": "{{ config(materialized='view', tags='readmissions') }}\n\nwith index_admissions as (\nselect\n    encounter_id\nfrom {{ ref('encounters') }}\nwhere discharge_status_code not in (02,07,20)\n    and encounter_type = 'Acute Inpatient'\n)\n\n, encounter_sequence as (\nselect\n    row_number() over(partition by patient_id order by encounter_end_date) as encounter_sequence\n,   *\nfrom {{ ref('encounters') }}\nwhere encounter_type = 'Acute Inpatient'\n)\n\n, readmit_calc as (\nselect\n    a.patient_id,\n    a.encounter_id,\n    (b.encounter_start_date - a.encounter_end_date) AS days_to_readmit,\n    1 as readmit_flag\nfrom encounter_sequence a\ninner join encounter_sequence b\n    on a.patient_id = b.patient_id\n    and a.encounter_sequence + 1 = b.encounter_sequence\n)\n\nselect\n    case\n        when b.readmit_flag = 1 then 1 \n        else 0\n    end as readmit_flag,\n    b.days_to_readmit,\n    case\n        when b.days_to_readmit < 8 then 1 \n        else 0\n    end as readmit_7_flag,\n    case\n        when b.days_to_readmit < 16 then 1 \n        else 0\n    end as readmit_15_flag,\n    case\n        when b.days_to_readmit < 31 then 1 \n        else 0\n    end as readmit_30_flag,\n    case\n        when b.days_to_readmit < 91 then 1 \n        else 0\n    end as readmit_90_flag,\n    case\n        when b.days_to_readmit < 366 then 1 \n        else 0\n    end as readmit_365_flag,\n    a.*\nfrom encounter_sequence a\nleft join readmit_calc b\n    on a.encounter_id = b.encounter_id\ninner join index_admissions c\n    on a.encounter_id = c.encounter_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.encounters", "model.tuva.encounters"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "hospital_wide_readmission"], "unique_id": "model.tuva.hospital_wide_readmission", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "hospital_wide_readmission.sql", "original_file_path": "models/hospital_wide_readmission.sql", "name": "hospital_wide_readmission", "alias": "hospital_wide_readmission", "checksum": {"name": "sha256", "checksum": "bb623399c412bd2a6524ba9b2ad16d6a095e137b311edf96070bfcc5d7adc724"}, "tags": ["readmissions"], "refs": [["encounters"], ["encounters"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/hospital_wide_readmission.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["readmissions"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith index_admissions as (\nselect\n    encounter_id\nfrom tuva.core.encounters\nwhere discharge_status_code not in (02,07,20)\n    and encounter_type = 'Acute Inpatient'\n)\n\n, encounter_sequence as (\nselect\n    row_number() over(partition by patient_id order by encounter_end_date) as encounter_sequence\n,   *\nfrom tuva.core.encounters\nwhere encounter_type = 'Acute Inpatient'\n)\n\n, readmit_calc as (\nselect\n    a.patient_id,\n    a.encounter_id,\n    (b.encounter_start_date - a.encounter_end_date) AS days_to_readmit,\n    1 as readmit_flag\nfrom encounter_sequence a\ninner join encounter_sequence b\n    on a.patient_id = b.patient_id\n    and a.encounter_sequence + 1 = b.encounter_sequence\n)\n\nselect\n    case\n        when b.readmit_flag = 1 then 1 \n        else 0\n    end as readmit_flag,\n    b.days_to_readmit,\n    case\n        when b.days_to_readmit < 8 then 1 \n        else 0\n    end as readmit_7_flag,\n    case\n        when b.days_to_readmit < 16 then 1 \n        else 0\n    end as readmit_15_flag,\n    case\n        when b.days_to_readmit < 31 then 1 \n        else 0\n    end as readmit_30_flag,\n    case\n        when b.days_to_readmit < 91 then 1 \n        else 0\n    end as readmit_90_flag,\n    case\n        when b.days_to_readmit < 366 then 1 \n        else 0\n    end as readmit_365_flag,\n    a.*\nfrom encounter_sequence a\nleft join readmit_calc b\n    on a.encounter_id = b.encounter_id\ninner join index_admissions c\n    on a.encounter_id = c.encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.hospital_wide_readmission"}, "model.tuva.condition_logic_simple": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\nfrom {{ ref('patients') }} a\nleft join {{ ref('encounters') }}  b\n    on a.patient_id = b.patient_id    \n)\n\n, diagnosis_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join {{ ref('diagnoses') }}  b\n    on a.encounter_id = b.encounter_id\ninner join {{ ref('chronic_conditions') }}  c\n    on b.diagnosis_code = c.code\n    and c.code_type = 'ICD-10-CM'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n    \n, procedure_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join {{ ref('procedures') }}  b\n    on a.encounter_id = b.encounter_id\ninner join {{ ref('chronic_conditions') }}  c\n    on b.procedure_code = c.code\n    and c.code_type = 'ICD-10-PCS'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n\nselect *\nfrom diagnosis_conditions\n\nunion\n\nselect *\nfrom procedure_conditions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.patients", "model.tuva.encounters", "model.tuva.diagnoses", "seed.tuva.chronic_conditions", "model.tuva.procedures", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "condition_logic_simple"], "unique_id": "model.tuva.condition_logic_simple", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "condition_logic_simple.sql", "original_file_path": "models/condition_logic_simple.sql", "name": "condition_logic_simple", "alias": "condition_logic_simple", "checksum": {"name": "sha256", "checksum": "bc0e65e70559cdf554de65515fc64787af90888656b9b2f710cda08ba8aa9960"}, "tags": ["chronic conditions"], "refs": [["patients"], ["encounters"], ["diagnoses"], ["chronic_conditions"], ["procedures"], ["chronic_conditions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/condition_logic_simple.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\nfrom tuva.core.patients a\nleft join tuva.core.encounters  b\n    on a.patient_id = b.patient_id    \n)\n\n, diagnosis_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join tuva.core.diagnoses  b\n    on a.encounter_id = b.encounter_id\ninner join tuva.vocabulary.chronic_conditions  c\n    on b.diagnosis_code = c.code\n    and c.code_type = 'ICD-10-CM'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n    \n, procedure_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join tuva.core.procedures  b\n    on a.encounter_id = b.encounter_id\ninner join tuva.vocabulary.chronic_conditions  c\n    on b.procedure_code = c.code\n    and c.code_type = 'ICD-10-PCS'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n\nselect *\nfrom diagnosis_conditions\n\nunion\n\nselect *\nfrom procedure_conditions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.condition_logic_simple"}, "model.tuva.member_months": {"raw_sql": "{{ config(materialized='view', tags='medical economics') }}\n\nwith bookend_dates as (\nselect \n    patient_id\n,   coverage_start_date\n,   coverage_end_date\n,   to_date(year(coverage_start_date) || '-' || month(coverage_start_date) || '-' || '01', 'YYYY-MM-DD' ) as min_date\n,   case\n        when coverage_end_date is null then to_date(year(current_date()) || '-' || month(current_date()) || '-' || '01', 'YYYY-MM-DD' )\n        else to_date(year(coverage_end_date) || '-' || month(coverage_end_date) || '-' || '01', 'YYYY-MM-DD' ) \n    end max_date\nfrom {{ ref('coverage') }}\n)\n\nselect distinct\n    a.patient_id\n,   b.member_date\n,   b.member_month\n,   b.member_year\n,   row_number() over(partition by patient_id order by member_date) as sequence\nfrom bookend_dates a\nleft join {{ ref('member_months_lookup') }} b\n    on a.min_date <= b.member_date\n    and a.max_date >= b.member_date", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.coverage", "seed.tuva.member_months_lookup"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["medical economics"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "member_months"], "unique_id": "model.tuva.member_months", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "member_months.sql", "original_file_path": "models/member_months.sql", "name": "member_months", "alias": "member_months", "checksum": {"name": "sha256", "checksum": "8a77e85d59ad4bfd4c3712d2370e3c2f30de6c47979f939037b071920e918ec0"}, "tags": ["medical economics"], "refs": [["coverage"], ["member_months_lookup"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/member_months.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["medical economics"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith bookend_dates as (\nselect \n    patient_id\n,   coverage_start_date\n,   coverage_end_date\n,   to_date(year(coverage_start_date) || '-' || month(coverage_start_date) || '-' || '01', 'YYYY-MM-DD' ) as min_date\n,   case\n        when coverage_end_date is null then to_date(year(current_date()) || '-' || month(current_date()) || '-' || '01', 'YYYY-MM-DD' )\n        else to_date(year(coverage_end_date) || '-' || month(coverage_end_date) || '-' || '01', 'YYYY-MM-DD' ) \n    end max_date\nfrom tuva.core.coverage\n)\n\nselect distinct\n    a.patient_id\n,   b.member_date\n,   b.member_month\n,   b.member_year\n,   row_number() over(partition by patient_id order by member_date) as sequence\nfrom bookend_dates a\nleft join tuva.vocabulary.member_months_lookup b\n    on a.min_date <= b.member_date\n    and a.max_date >= b.member_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.member_months"}, "model.tuva.ccsr_dx_wide": {"raw_sql": "{{ config(materialized='view', tags='ccsr') }}\n\nwith ccsr as (\nselect\n    encounter_id\n,   ccsr\n,   1 as condition_count\nfrom {{ ref('ccsr_dx_long') }} a\n)\n\nselect \n    encounter_id,\n    case when BLD001 >=1 then 1 else 0 end BLD001,\n    case when BLD002 >=1 then 1 else 0 end BLD002,\n    case when BLD003 >=1 then 1 else 0 end BLD003,\n    case when BLD004 >=1 then 1 else 0 end BLD004,\n    case when BLD005 >=1 then 1 else 0 end BLD005,\n    case when BLD006 >=1 then 1 else 0 end BLD006,\n    case when BLD007 >=1 then 1 else 0 end BLD007,\n    case when BLD008 >=1 then 1 else 0 end BLD008,\n    case when BLD009 >=1 then 1 else 0 end BLD009,\n    case when BLD010 >=1 then 1 else 0 end BLD010,\n    case when CIR001 >=1 then 1 else 0 end CIR001,\n    case when CIR002 >=1 then 1 else 0 end CIR002,\n    case when CIR003 >=1 then 1 else 0 end CIR003,\n    case when CIR004 >=1 then 1 else 0 end CIR004,\n    case when CIR005 >=1 then 1 else 0 end CIR005,\n    case when CIR006 >=1 then 1 else 0 end CIR006,\n    case when CIR007 >=1 then 1 else 0 end CIR007,\n    case when CIR008 >=1 then 1 else 0 end CIR008,\n    case when CIR009 >=1 then 1 else 0 end CIR009,\n    case when CIR010 >=1 then 1 else 0 end CIR010,\n    case when CIR011 >=1 then 1 else 0 end CIR011,\n    case when CIR012 >=1 then 1 else 0 end CIR012,\n    case when CIR013 >=1 then 1 else 0 end CIR013,\n    case when CIR014 >=1 then 1 else 0 end CIR014,\n    case when CIR015 >=1 then 1 else 0 end CIR015,\n    case when CIR016 >=1 then 1 else 0 end CIR016,\n    case when CIR017 >=1 then 1 else 0 end CIR017,\n    case when CIR018 >=1 then 1 else 0 end CIR018,\n    case when CIR019 >=1 then 1 else 0 end CIR019,\n    case when CIR020 >=1 then 1 else 0 end CIR020,\n    case when CIR021 >=1 then 1 else 0 end CIR021,\n    case when CIR022 >=1 then 1 else 0 end CIR022,\n    case when CIR023 >=1 then 1 else 0 end CIR023,\n    case when CIR024 >=1 then 1 else 0 end CIR024,\n    case when CIR025 >=1 then 1 else 0 end CIR025,\n    case when CIR026 >=1 then 1 else 0 end CIR026,\n    case when CIR027 >=1 then 1 else 0 end CIR027,\n    case when CIR028 >=1 then 1 else 0 end CIR028,\n    case when CIR029 >=1 then 1 else 0 end CIR029,\n    case when CIR030 >=1 then 1 else 0 end CIR030,\n    case when CIR031 >=1 then 1 else 0 end CIR031,\n    case when CIR032 >=1 then 1 else 0 end CIR032,\n    case when CIR033 >=1 then 1 else 0 end CIR033,\n    case when CIR034 >=1 then 1 else 0 end CIR034,\n    case when CIR035 >=1 then 1 else 0 end CIR035,\n    case when CIR036 >=1 then 1 else 0 end CIR036,\n    case when CIR037 >=1 then 1 else 0 end CIR037,\n    case when CIR038 >=1 then 1 else 0 end CIR038,\n    case when CIR039 >=1 then 1 else 0 end CIR039,\n    case when DIG001 >=1 then 1 else 0 end DIG001,\n    case when DIG002 >=1 then 1 else 0 end DIG002,\n    case when DIG003 >=1 then 1 else 0 end DIG003,\n    case when DIG004 >=1 then 1 else 0 end DIG004,\n    case when DIG005 >=1 then 1 else 0 end DIG005,\n    case when DIG006 >=1 then 1 else 0 end DIG006,\n    case when DIG007 >=1 then 1 else 0 end DIG007,\n    case when DIG008 >=1 then 1 else 0 end DIG008,\n    case when DIG009 >=1 then 1 else 0 end DIG009,\n    case when DIG010 >=1 then 1 else 0 end DIG010,\n    case when DIG011 >=1 then 1 else 0 end DIG011,\n    case when DIG012 >=1 then 1 else 0 end DIG012,\n    case when DIG013 >=1 then 1 else 0 end DIG013,\n    case when DIG014 >=1 then 1 else 0 end DIG014,\n    case when DIG015 >=1 then 1 else 0 end DIG015,\n    case when DIG016 >=1 then 1 else 0 end DIG016,\n    case when DIG017 >=1 then 1 else 0 end DIG017,\n    case when DIG018 >=1 then 1 else 0 end DIG018,\n    case when DIG019 >=1 then 1 else 0 end DIG019,\n    case when DIG020 >=1 then 1 else 0 end DIG020,\n    case when DIG021 >=1 then 1 else 0 end DIG021,\n    case when DIG022 >=1 then 1 else 0 end DIG022,\n    case when DIG023 >=1 then 1 else 0 end DIG023,\n    case when DIG024 >=1 then 1 else 0 end DIG024,\n    case when DIG025 >=1 then 1 else 0 end DIG025,\n    case when EAR001 >=1 then 1 else 0 end EAR001,\n    case when EAR002 >=1 then 1 else 0 end EAR002,\n    case when EAR003 >=1 then 1 else 0 end EAR003,\n    case when EAR004 >=1 then 1 else 0 end EAR004,\n    case when EAR005 >=1 then 1 else 0 end EAR005,\n    case when EAR006 >=1 then 1 else 0 end EAR006,\n    case when END001 >=1 then 1 else 0 end END001,\n    case when END002 >=1 then 1 else 0 end END002,\n    case when END003 >=1 then 1 else 0 end END003,\n    case when END004 >=1 then 1 else 0 end END004,\n    case when END005 >=1 then 1 else 0 end END005,\n    case when END006 >=1 then 1 else 0 end END006,\n    case when END007 >=1 then 1 else 0 end END007,\n    case when END008 >=1 then 1 else 0 end END008,\n    case when END009 >=1 then 1 else 0 end END009,\n    case when END010 >=1 then 1 else 0 end END010,\n    case when END011 >=1 then 1 else 0 end END011,\n    case when END012 >=1 then 1 else 0 end END012,\n    case when END013 >=1 then 1 else 0 end END013,\n    case when END014 >=1 then 1 else 0 end END014,\n    case when END015 >=1 then 1 else 0 end END015,\n    case when END016 >=1 then 1 else 0 end END016,\n    case when END017 >=1 then 1 else 0 end END017,\n    case when EXT001 >=1 then 1 else 0 end EXT001,\n    case when EXT002 >=1 then 1 else 0 end EXT002,\n    case when EXT003 >=1 then 1 else 0 end EXT003,\n    case when EXT004 >=1 then 1 else 0 end EXT004,\n    case when EXT005 >=1 then 1 else 0 end EXT005,\n    case when EXT006 >=1 then 1 else 0 end EXT006,\n    case when EXT007 >=1 then 1 else 0 end EXT007,\n    case when EXT008 >=1 then 1 else 0 end EXT008,\n    case when EXT009 >=1 then 1 else 0 end EXT009,\n    case when EXT010 >=1 then 1 else 0 end EXT010,\n    case when EXT011 >=1 then 1 else 0 end EXT011,\n    case when EXT012 >=1 then 1 else 0 end EXT012,\n    case when EXT013 >=1 then 1 else 0 end EXT013,\n    case when EXT014 >=1 then 1 else 0 end EXT014,\n    case when EXT015 >=1 then 1 else 0 end EXT015,\n    case when EXT016 >=1 then 1 else 0 end EXT016,\n    case when EXT017 >=1 then 1 else 0 end EXT017,\n    case when EXT018 >=1 then 1 else 0 end EXT018,\n    case when EXT019 >=1 then 1 else 0 end EXT019,\n    case when EXT020 >=1 then 1 else 0 end EXT020,\n    case when EXT021 >=1 then 1 else 0 end EXT021,\n    case when EXT022 >=1 then 1 else 0 end EXT022,\n    case when EXT023 >=1 then 1 else 0 end EXT023,\n    case when EXT024 >=1 then 1 else 0 end EXT024,\n    case when EXT025 >=1 then 1 else 0 end EXT025,\n    case when EXT026 >=1 then 1 else 0 end EXT026,\n    case when EXT027 >=1 then 1 else 0 end EXT027,\n    case when EXT028 >=1 then 1 else 0 end EXT028,\n    case when EXT029 >=1 then 1 else 0 end EXT029,\n    case when EXT030 >=1 then 1 else 0 end EXT030,\n    case when EYE001 >=1 then 1 else 0 end EYE001,\n    case when EYE002 >=1 then 1 else 0 end EYE002,\n    case when EYE003 >=1 then 1 else 0 end EYE003,\n    case when EYE004 >=1 then 1 else 0 end EYE004,\n    case when EYE005 >=1 then 1 else 0 end EYE005,\n    case when EYE006 >=1 then 1 else 0 end EYE006,\n    case when EYE007 >=1 then 1 else 0 end EYE007,\n    case when EYE008 >=1 then 1 else 0 end EYE008,\n    case when EYE009 >=1 then 1 else 0 end EYE009,\n    case when EYE010 >=1 then 1 else 0 end EYE010,\n    case when EYE011 >=1 then 1 else 0 end EYE011,\n    case when EYE012 >=1 then 1 else 0 end EYE012,\n    case when FAC001 >=1 then 1 else 0 end FAC001,\n    case when FAC002 >=1 then 1 else 0 end FAC002,\n    case when FAC003 >=1 then 1 else 0 end FAC003,\n    case when FAC004 >=1 then 1 else 0 end FAC004,\n    case when FAC005 >=1 then 1 else 0 end FAC005,\n    case when FAC006 >=1 then 1 else 0 end FAC006,\n    case when FAC007 >=1 then 1 else 0 end FAC007,\n    case when FAC008 >=1 then 1 else 0 end FAC008,\n    case when FAC009 >=1 then 1 else 0 end FAC009,\n    case when FAC010 >=1 then 1 else 0 end FAC010,\n    case when FAC011 >=1 then 1 else 0 end FAC011,\n    case when FAC012 >=1 then 1 else 0 end FAC012,\n    case when FAC013 >=1 then 1 else 0 end FAC013,\n    case when FAC014 >=1 then 1 else 0 end FAC014,\n    case when FAC015 >=1 then 1 else 0 end FAC015,\n    case when FAC016 >=1 then 1 else 0 end FAC016,\n    case when FAC017 >=1 then 1 else 0 end FAC017,\n    case when FAC018 >=1 then 1 else 0 end FAC018,\n    case when FAC019 >=1 then 1 else 0 end FAC019,\n    case when FAC020 >=1 then 1 else 0 end FAC020,\n    case when FAC021 >=1 then 1 else 0 end FAC021,\n    case when FAC022 >=1 then 1 else 0 end FAC022,\n    case when FAC023 >=1 then 1 else 0 end FAC023,\n    case when FAC024 >=1 then 1 else 0 end FAC024,\n    case when FAC025 >=1 then 1 else 0 end FAC025,\n    case when GEN001 >=1 then 1 else 0 end GEN001,\n    case when GEN002 >=1 then 1 else 0 end GEN002,\n    case when GEN003 >=1 then 1 else 0 end GEN003,\n    case when GEN004 >=1 then 1 else 0 end GEN004,\n    case when GEN005 >=1 then 1 else 0 end GEN005,\n    case when GEN006 >=1 then 1 else 0 end GEN006,\n    case when GEN007 >=1 then 1 else 0 end GEN007,\n    case when GEN008 >=1 then 1 else 0 end GEN008,\n    case when GEN009 >=1 then 1 else 0 end GEN009,\n    case when GEN010 >=1 then 1 else 0 end GEN010,\n    case when GEN011 >=1 then 1 else 0 end GEN011,\n    case when GEN012 >=1 then 1 else 0 end GEN012,\n    case when GEN013 >=1 then 1 else 0 end GEN013,\n    case when GEN014 >=1 then 1 else 0 end GEN014,\n    case when GEN015 >=1 then 1 else 0 end GEN015,\n    case when GEN016 >=1 then 1 else 0 end GEN016,\n    case when GEN017 >=1 then 1 else 0 end GEN017,\n    case when GEN018 >=1 then 1 else 0 end GEN018,\n    case when GEN019 >=1 then 1 else 0 end GEN019,\n    case when GEN020 >=1 then 1 else 0 end GEN020,\n    case when GEN021 >=1 then 1 else 0 end GEN021,\n    case when GEN022 >=1 then 1 else 0 end GEN022,\n    case when GEN023 >=1 then 1 else 0 end GEN023,\n    case when GEN024 >=1 then 1 else 0 end GEN024,\n    case when GEN025 >=1 then 1 else 0 end GEN025,\n    case when GEN026 >=1 then 1 else 0 end GEN026,\n    case when INF001 >=1 then 1 else 0 end INF001,\n    case when INF002 >=1 then 1 else 0 end INF002,\n    case when INF003 >=1 then 1 else 0 end INF003,\n    case when INF004 >=1 then 1 else 0 end INF004,\n    case when INF005 >=1 then 1 else 0 end INF005,\n    case when INF006 >=1 then 1 else 0 end INF006,\n    case when INF007 >=1 then 1 else 0 end INF007,\n    case when INF008 >=1 then 1 else 0 end INF008,\n    case when INF009 >=1 then 1 else 0 end INF009,\n    case when INF010 >=1 then 1 else 0 end INF010,\n    case when INF011 >=1 then 1 else 0 end INF011,\n    case when INF012 >=1 then 1 else 0 end INF012,\n    case when INJ001 >=1 then 1 else 0 end INJ001,\n    case when INJ002 >=1 then 1 else 0 end INJ002,\n    case when INJ003 >=1 then 1 else 0 end INJ003,\n    case when INJ004 >=1 then 1 else 0 end INJ004,\n    case when INJ005 >=1 then 1 else 0 end INJ005,\n    case when INJ006 >=1 then 1 else 0 end INJ006,\n    case when INJ007 >=1 then 1 else 0 end INJ007,\n    case when INJ008 >=1 then 1 else 0 end INJ008,\n    case when INJ009 >=1 then 1 else 0 end INJ009,\n    case when INJ010 >=1 then 1 else 0 end INJ010,\n    case when INJ011 >=1 then 1 else 0 end INJ011,\n    case when INJ012 >=1 then 1 else 0 end INJ012,\n    case when INJ013 >=1 then 1 else 0 end INJ013,\n    case when INJ014 >=1 then 1 else 0 end INJ014,\n    case when INJ015 >=1 then 1 else 0 end INJ015,\n    case when INJ016 >=1 then 1 else 0 end INJ016,\n    case when INJ017 >=1 then 1 else 0 end INJ017,\n    case when INJ018 >=1 then 1 else 0 end INJ018,\n    case when INJ019 >=1 then 1 else 0 end INJ019,\n    case when INJ020 >=1 then 1 else 0 end INJ020,\n    case when INJ021 >=1 then 1 else 0 end INJ021,\n    case when INJ022 >=1 then 1 else 0 end INJ022,\n    case when INJ023 >=1 then 1 else 0 end INJ023,\n    case when INJ024 >=1 then 1 else 0 end INJ024,\n    case when INJ025 >=1 then 1 else 0 end INJ025,\n    case when INJ026 >=1 then 1 else 0 end INJ026,\n    case when INJ027 >=1 then 1 else 0 end INJ027,\n    case when INJ028 >=1 then 1 else 0 end INJ028,\n    case when INJ029 >=1 then 1 else 0 end INJ029,\n    case when INJ030 >=1 then 1 else 0 end INJ030,\n    case when INJ031 >=1 then 1 else 0 end INJ031,\n    case when INJ032 >=1 then 1 else 0 end INJ032,\n    case when INJ033 >=1 then 1 else 0 end INJ033,\n    case when INJ034 >=1 then 1 else 0 end INJ034,\n    case when INJ035 >=1 then 1 else 0 end INJ035,\n    case when INJ036 >=1 then 1 else 0 end INJ036,\n    case when INJ037 >=1 then 1 else 0 end INJ037,\n    case when INJ038 >=1 then 1 else 0 end INJ038,\n    case when INJ039 >=1 then 1 else 0 end INJ039,\n    case when INJ040 >=1 then 1 else 0 end INJ040,\n    case when INJ041 >=1 then 1 else 0 end INJ041,\n    case when INJ042 >=1 then 1 else 0 end INJ042,\n    case when INJ043 >=1 then 1 else 0 end INJ043,\n    case when INJ044 >=1 then 1 else 0 end INJ044,\n    case when INJ045 >=1 then 1 else 0 end INJ045,\n    case when INJ046 >=1 then 1 else 0 end INJ046,\n    case when INJ047 >=1 then 1 else 0 end INJ047,\n    case when INJ048 >=1 then 1 else 0 end INJ048,\n    case when INJ049 >=1 then 1 else 0 end INJ049,\n    case when INJ050 >=1 then 1 else 0 end INJ050,\n    case when INJ051 >=1 then 1 else 0 end INJ051,\n    case when INJ052 >=1 then 1 else 0 end INJ052,\n    case when INJ053 >=1 then 1 else 0 end INJ053,\n    case when INJ054 >=1 then 1 else 0 end INJ054,\n    case when INJ055 >=1 then 1 else 0 end INJ055,\n    case when INJ056 >=1 then 1 else 0 end INJ056,\n    case when INJ057 >=1 then 1 else 0 end INJ057,\n    case when INJ058 >=1 then 1 else 0 end INJ058,\n    case when INJ059 >=1 then 1 else 0 end INJ059,\n    case when INJ060 >=1 then 1 else 0 end INJ060,\n    case when INJ061 >=1 then 1 else 0 end INJ061,\n    case when INJ062 >=1 then 1 else 0 end INJ062,\n    case when INJ063 >=1 then 1 else 0 end INJ063,\n    case when INJ064 >=1 then 1 else 0 end INJ064,\n    case when INJ065 >=1 then 1 else 0 end INJ065,\n    case when INJ066 >=1 then 1 else 0 end INJ066,\n    case when INJ067 >=1 then 1 else 0 end INJ067,\n    case when INJ068 >=1 then 1 else 0 end INJ068,\n    case when INJ069 >=1 then 1 else 0 end INJ069,\n    case when INJ070 >=1 then 1 else 0 end INJ070,\n    case when INJ071 >=1 then 1 else 0 end INJ071,\n    case when INJ072 >=1 then 1 else 0 end INJ072,\n    case when INJ073 >=1 then 1 else 0 end INJ073,\n    case when INJ074 >=1 then 1 else 0 end INJ074,\n    case when INJ075 >=1 then 1 else 0 end INJ075,\n    case when INJ076 >=1 then 1 else 0 end INJ076,\n    case when MAL001 >=1 then 1 else 0 end MAL001,\n    case when MAL002 >=1 then 1 else 0 end MAL002,\n    case when MAL003 >=1 then 1 else 0 end MAL003,\n    case when MAL004 >=1 then 1 else 0 end MAL004,\n    case when MAL005 >=1 then 1 else 0 end MAL005,\n    case when MAL006 >=1 then 1 else 0 end MAL006,\n    case when MAL007 >=1 then 1 else 0 end MAL007,\n    case when MAL008 >=1 then 1 else 0 end MAL008,\n    case when MAL009 >=1 then 1 else 0 end MAL009,\n    case when MAL010 >=1 then 1 else 0 end MAL010,\n    case when MBD001 >=1 then 1 else 0 end MBD001,\n    case when MBD002 >=1 then 1 else 0 end MBD002,\n    case when MBD003 >=1 then 1 else 0 end MBD003,\n    case when MBD004 >=1 then 1 else 0 end MBD004,\n    case when MBD005 >=1 then 1 else 0 end MBD005,\n    case when MBD006 >=1 then 1 else 0 end MBD006,\n    case when MBD007 >=1 then 1 else 0 end MBD007,\n    case when MBD008 >=1 then 1 else 0 end MBD008,\n    case when MBD009 >=1 then 1 else 0 end MBD009,\n    case when MBD010 >=1 then 1 else 0 end MBD010,\n    case when MBD011 >=1 then 1 else 0 end MBD011,\n    case when MBD012 >=1 then 1 else 0 end MBD012,\n    case when MBD013 >=1 then 1 else 0 end MBD013,\n    case when MBD014 >=1 then 1 else 0 end MBD014,\n    case when MBD017 >=1 then 1 else 0 end MBD017,\n    case when MBD018 >=1 then 1 else 0 end MBD018,\n    case when MBD019 >=1 then 1 else 0 end MBD019,\n    case when MBD020 >=1 then 1 else 0 end MBD020,\n    case when MBD021 >=1 then 1 else 0 end MBD021,\n    case when MBD022 >=1 then 1 else 0 end MBD022,\n    case when MBD023 >=1 then 1 else 0 end MBD023,\n    case when MBD024 >=1 then 1 else 0 end MBD024,\n    case when MBD025 >=1 then 1 else 0 end MBD025,\n    case when MBD026 >=1 then 1 else 0 end MBD026,\n    case when MBD027 >=1 then 1 else 0 end MBD027,\n    case when MBD028 >=1 then 1 else 0 end MBD028,\n    case when MBD029 >=1 then 1 else 0 end MBD029,\n    case when MBD030 >=1 then 1 else 0 end MBD030,\n    case when MBD031 >=1 then 1 else 0 end MBD031,\n    case when MBD032 >=1 then 1 else 0 end MBD032,\n    case when MBD033 >=1 then 1 else 0 end MBD033,\n    case when MBD034 >=1 then 1 else 0 end MBD034,\n    case when MUS001 >=1 then 1 else 0 end MUS001,\n    case when MUS002 >=1 then 1 else 0 end MUS002,\n    case when MUS003 >=1 then 1 else 0 end MUS003,\n    case when MUS004 >=1 then 1 else 0 end MUS004,\n    case when MUS005 >=1 then 1 else 0 end MUS005,\n    case when MUS006 >=1 then 1 else 0 end MUS006,\n    case when MUS007 >=1 then 1 else 0 end MUS007,\n    case when MUS008 >=1 then 1 else 0 end MUS008,\n    case when MUS009 >=1 then 1 else 0 end MUS009,\n    case when MUS010 >=1 then 1 else 0 end MUS010,\n    case when MUS011 >=1 then 1 else 0 end MUS011,\n    case when MUS012 >=1 then 1 else 0 end MUS012,\n    case when MUS013 >=1 then 1 else 0 end MUS013,\n    case when MUS014 >=1 then 1 else 0 end MUS014,\n    case when MUS015 >=1 then 1 else 0 end MUS015,\n    case when MUS016 >=1 then 1 else 0 end MUS016,\n    case when MUS017 >=1 then 1 else 0 end MUS017,\n    case when MUS018 >=1 then 1 else 0 end MUS018,\n    case when MUS019 >=1 then 1 else 0 end MUS019,\n    case when MUS020 >=1 then 1 else 0 end MUS020,\n    case when MUS021 >=1 then 1 else 0 end MUS021,\n    case when MUS022 >=1 then 1 else 0 end MUS022,\n    case when MUS023 >=1 then 1 else 0 end MUS023,\n    case when MUS024 >=1 then 1 else 0 end MUS024,\n    case when MUS025 >=1 then 1 else 0 end MUS025,\n    case when MUS026 >=1 then 1 else 0 end MUS026,\n    case when MUS027 >=1 then 1 else 0 end MUS027,\n    case when MUS028 >=1 then 1 else 0 end MUS028,\n    case when MUS029 >=1 then 1 else 0 end MUS029,\n    case when MUS030 >=1 then 1 else 0 end MUS030,\n    case when MUS031 >=1 then 1 else 0 end MUS031,\n    case when MUS032 >=1 then 1 else 0 end MUS032,\n    case when MUS033 >=1 then 1 else 0 end MUS033,\n    case when MUS034 >=1 then 1 else 0 end MUS034,\n    case when MUS035 >=1 then 1 else 0 end MUS035,\n    case when MUS036 >=1 then 1 else 0 end MUS036,\n    case when MUS037 >=1 then 1 else 0 end MUS037,\n    case when MUS038 >=1 then 1 else 0 end MUS038,\n    case when NEO001 >=1 then 1 else 0 end NEO001,\n    case when NEO002 >=1 then 1 else 0 end NEO002,\n    case when NEO003 >=1 then 1 else 0 end NEO003,\n    case when NEO004 >=1 then 1 else 0 end NEO004,\n    case when NEO005 >=1 then 1 else 0 end NEO005,\n    case when NEO006 >=1 then 1 else 0 end NEO006,\n    case when NEO007 >=1 then 1 else 0 end NEO007,\n    case when NEO008 >=1 then 1 else 0 end NEO008,\n    case when NEO009 >=1 then 1 else 0 end NEO009,\n    case when NEO010 >=1 then 1 else 0 end NEO010,\n    case when NEO011 >=1 then 1 else 0 end NEO011,\n    case when NEO012 >=1 then 1 else 0 end NEO012,\n    case when NEO013 >=1 then 1 else 0 end NEO013,\n    case when NEO014 >=1 then 1 else 0 end NEO014,\n    case when NEO015 >=1 then 1 else 0 end NEO015,\n    case when NEO016 >=1 then 1 else 0 end NEO016,\n    case when NEO017 >=1 then 1 else 0 end NEO017,\n    case when NEO018 >=1 then 1 else 0 end NEO018,\n    case when NEO019 >=1 then 1 else 0 end NEO019,\n    case when NEO020 >=1 then 1 else 0 end NEO020,\n    case when NEO021 >=1 then 1 else 0 end NEO021,\n    case when NEO022 >=1 then 1 else 0 end NEO022,\n    case when NEO023 >=1 then 1 else 0 end NEO023,\n    case when NEO024 >=1 then 1 else 0 end NEO024,\n    case when NEO025 >=1 then 1 else 0 end NEO025,\n    case when NEO026 >=1 then 1 else 0 end NEO026,\n    case when NEO027 >=1 then 1 else 0 end NEO027,\n    case when NEO028 >=1 then 1 else 0 end NEO028,\n    case when NEO029 >=1 then 1 else 0 end NEO029,\n    case when NEO030 >=1 then 1 else 0 end NEO030,\n    case when NEO031 >=1 then 1 else 0 end NEO031,\n    case when NEO032 >=1 then 1 else 0 end NEO032,\n    case when NEO033 >=1 then 1 else 0 end NEO033,\n    case when NEO034 >=1 then 1 else 0 end NEO034,\n    case when NEO035 >=1 then 1 else 0 end NEO035,\n    case when NEO036 >=1 then 1 else 0 end NEO036,\n    case when NEO037 >=1 then 1 else 0 end NEO037,\n    case when NEO038 >=1 then 1 else 0 end NEO038,\n    case when NEO039 >=1 then 1 else 0 end NEO039,\n    case when NEO040 >=1 then 1 else 0 end NEO040,\n    case when NEO041 >=1 then 1 else 0 end NEO041,\n    case when NEO042 >=1 then 1 else 0 end NEO042,\n    case when NEO043 >=1 then 1 else 0 end NEO043,\n    case when NEO044 >=1 then 1 else 0 end NEO044,\n    case when NEO045 >=1 then 1 else 0 end NEO045,\n    case when NEO046 >=1 then 1 else 0 end NEO046,\n    case when NEO047 >=1 then 1 else 0 end NEO047,\n    case when NEO048 >=1 then 1 else 0 end NEO048,\n    case when NEO049 >=1 then 1 else 0 end NEO049,\n    case when NEO050 >=1 then 1 else 0 end NEO050,\n    case when NEO051 >=1 then 1 else 0 end NEO051,\n    case when NEO052 >=1 then 1 else 0 end NEO052,\n    case when NEO053 >=1 then 1 else 0 end NEO053,\n    case when NEO054 >=1 then 1 else 0 end NEO054,\n    case when NEO055 >=1 then 1 else 0 end NEO055,\n    case when NEO056 >=1 then 1 else 0 end NEO056,\n    case when NEO057 >=1 then 1 else 0 end NEO057,\n    case when NEO058 >=1 then 1 else 0 end NEO058,\n    case when NEO059 >=1 then 1 else 0 end NEO059,\n    case when NEO060 >=1 then 1 else 0 end NEO060,\n    case when NEO061 >=1 then 1 else 0 end NEO061,\n    case when NEO062 >=1 then 1 else 0 end NEO062,\n    case when NEO063 >=1 then 1 else 0 end NEO063,\n    case when NEO064 >=1 then 1 else 0 end NEO064,\n    case when NEO065 >=1 then 1 else 0 end NEO065,\n    case when NEO066 >=1 then 1 else 0 end NEO066,\n    case when NEO067 >=1 then 1 else 0 end NEO067,\n    case when NEO068 >=1 then 1 else 0 end NEO068,\n    case when NEO069 >=1 then 1 else 0 end NEO069,\n    case when NEO070 >=1 then 1 else 0 end NEO070,\n    case when NEO071 >=1 then 1 else 0 end NEO071,\n    case when NEO072 >=1 then 1 else 0 end NEO072,\n    case when NEO073 >=1 then 1 else 0 end NEO073,\n    case when NEO074 >=1 then 1 else 0 end NEO074,\n    case when NVS001 >=1 then 1 else 0 end NVS001,\n    case when NVS002 >=1 then 1 else 0 end NVS002,\n    case when NVS003 >=1 then 1 else 0 end NVS003,\n    case when NVS004 >=1 then 1 else 0 end NVS004,\n    case when NVS005 >=1 then 1 else 0 end NVS005,\n    case when NVS006 >=1 then 1 else 0 end NVS006,\n    case when NVS007 >=1 then 1 else 0 end NVS007,\n    case when NVS008 >=1 then 1 else 0 end NVS008,\n    case when NVS009 >=1 then 1 else 0 end NVS009,\n    case when NVS010 >=1 then 1 else 0 end NVS010,\n    case when NVS011 >=1 then 1 else 0 end NVS011,\n    case when NVS012 >=1 then 1 else 0 end NVS012,\n    case when NVS013 >=1 then 1 else 0 end NVS013,\n    case when NVS014 >=1 then 1 else 0 end NVS014,\n    case when NVS015 >=1 then 1 else 0 end NVS015,\n    case when NVS016 >=1 then 1 else 0 end NVS016,\n    case when NVS017 >=1 then 1 else 0 end NVS017,\n    case when NVS018 >=1 then 1 else 0 end NVS018,\n    case when NVS019 >=1 then 1 else 0 end NVS019,\n    case when NVS020 >=1 then 1 else 0 end NVS020,\n    case when NVS021 >=1 then 1 else 0 end NVS021,\n    case when NVS022 >=1 then 1 else 0 end NVS022,\n    case when PNL001 >=1 then 1 else 0 end PNL001,\n    case when PNL002 >=1 then 1 else 0 end PNL002,\n    case when PNL003 >=1 then 1 else 0 end PNL003,\n    case when PNL004 >=1 then 1 else 0 end PNL004,\n    case when PNL005 >=1 then 1 else 0 end PNL005,\n    case when PNL006 >=1 then 1 else 0 end PNL006,\n    case when PNL007 >=1 then 1 else 0 end PNL007,\n    case when PNL008 >=1 then 1 else 0 end PNL008,\n    case when PNL009 >=1 then 1 else 0 end PNL009,\n    case when PNL010 >=1 then 1 else 0 end PNL010,\n    case when PNL011 >=1 then 1 else 0 end PNL011,\n    case when PNL012 >=1 then 1 else 0 end PNL012,\n    case when PNL013 >=1 then 1 else 0 end PNL013,\n    case when PNL014 >=1 then 1 else 0 end PNL014,\n    case when PNL015 >=1 then 1 else 0 end PNL015,\n    case when PRG001 >=1 then 1 else 0 end PRG001,\n    case when PRG002 >=1 then 1 else 0 end PRG002,\n    case when PRG003 >=1 then 1 else 0 end PRG003,\n    case when PRG004 >=1 then 1 else 0 end PRG004,\n    case when PRG005 >=1 then 1 else 0 end PRG005,\n    case when PRG006 >=1 then 1 else 0 end PRG006,\n    case when PRG007 >=1 then 1 else 0 end PRG007,\n    case when PRG008 >=1 then 1 else 0 end PRG008,\n    case when PRG009 >=1 then 1 else 0 end PRG009,\n    case when PRG010 >=1 then 1 else 0 end PRG010,\n    case when PRG011 >=1 then 1 else 0 end PRG011,\n    case when PRG012 >=1 then 1 else 0 end PRG012,\n    case when PRG013 >=1 then 1 else 0 end PRG013,\n    case when PRG014 >=1 then 1 else 0 end PRG014,\n    case when PRG015 >=1 then 1 else 0 end PRG015,\n    case when PRG016 >=1 then 1 else 0 end PRG016,\n    case when PRG017 >=1 then 1 else 0 end PRG017,\n    case when PRG018 >=1 then 1 else 0 end PRG018,\n    case when PRG019 >=1 then 1 else 0 end PRG019,\n    case when PRG020 >=1 then 1 else 0 end PRG020,\n    case when PRG021 >=1 then 1 else 0 end PRG021,\n    case when PRG022 >=1 then 1 else 0 end PRG022,\n    case when PRG023 >=1 then 1 else 0 end PRG023,\n    case when PRG024 >=1 then 1 else 0 end PRG024,\n    case when PRG025 >=1 then 1 else 0 end PRG025,\n    case when PRG026 >=1 then 1 else 0 end PRG026,\n    case when PRG027 >=1 then 1 else 0 end PRG027,\n    case when PRG028 >=1 then 1 else 0 end PRG028,\n    case when PRG029 >=1 then 1 else 0 end PRG029,\n    case when PRG030 >=1 then 1 else 0 end PRG030,\n    case when RSP001 >=1 then 1 else 0 end RSP001,\n    case when RSP002 >=1 then 1 else 0 end RSP002,\n    case when RSP003 >=1 then 1 else 0 end RSP003,\n    case when RSP004 >=1 then 1 else 0 end RSP004,\n    case when RSP005 >=1 then 1 else 0 end RSP005,\n    case when RSP006 >=1 then 1 else 0 end RSP006,\n    case when RSP007 >=1 then 1 else 0 end RSP007,\n    case when RSP008 >=1 then 1 else 0 end RSP008,\n    case when RSP009 >=1 then 1 else 0 end RSP009,\n    case when RSP010 >=1 then 1 else 0 end RSP010,\n    case when RSP011 >=1 then 1 else 0 end RSP011,\n    case when RSP012 >=1 then 1 else 0 end RSP012,\n    case when RSP013 >=1 then 1 else 0 end RSP013,\n    case when RSP014 >=1 then 1 else 0 end RSP014,\n    case when RSP015 >=1 then 1 else 0 end RSP015,\n    case when RSP016 >=1 then 1 else 0 end RSP016,\n    case when RSP017 >=1 then 1 else 0 end RSP017,\n    case when SKN001 >=1 then 1 else 0 end SKN001,\n    case when SKN002 >=1 then 1 else 0 end SKN002,\n    case when SKN003 >=1 then 1 else 0 end SKN003,\n    case when SKN004 >=1 then 1 else 0 end SKN004,\n    case when SKN005 >=1 then 1 else 0 end SKN005,\n    case when SKN006 >=1 then 1 else 0 end SKN006,\n    case when SKN007 >=1 then 1 else 0 end SKN007,\n    case when SYM001 >=1 then 1 else 0 end SYM001,\n    case when SYM002 >=1 then 1 else 0 end SYM002,\n    case when SYM003 >=1 then 1 else 0 end SYM003,\n    case when SYM004 >=1 then 1 else 0 end SYM004,\n    case when SYM005 >=1 then 1 else 0 end SYM005,\n    case when SYM006 >=1 then 1 else 0 end SYM006,\n    case when SYM007 >=1 then 1 else 0 end SYM007,\n    case when SYM008 >=1 then 1 else 0 end SYM008,\n    case when SYM009 >=1 then 1 else 0 end SYM009,\n    case when SYM010 >=1 then 1 else 0 end SYM010,\n    case when SYM011 >=1 then 1 else 0 end SYM011,\n    case when SYM012 >=1 then 1 else 0 end SYM012,\n    case when SYM013 >=1 then 1 else 0 end SYM013,\n    case when SYM014 >=1 then 1 else 0 end SYM014,\n    case when SYM015 >=1 then 1 else 0 end SYM015,\n    case when SYM016 >=1 then 1 else 0 end SYM016,\n    case when SYM017 >=1 then 1 else 0 end SYM017,\n    case when XXX000 >=1 then 1 else 0 end XXX000,\n    case when XXX111 >=1 then 1 else 0 end XXX111,\n    case when NoDX1 >=1 then 1 else 0 end NoDX1,\n    case when InvlDX >=1 then 1 else 0 end InvlDX\nfrom ccsr\npivot\n(\n    sum(condition_count)\n    for ccsr in\n    (\n        'BLD001',\n        'BLD002',\n        'BLD003',\n        'BLD004',\n        'BLD005',\n        'BLD006',\n        'BLD007',\n        'BLD008',\n        'BLD009',\n        'BLD010',\n        'CIR001',\n        'CIR002',\n        'CIR003',\n        'CIR004',\n        'CIR005',\n        'CIR006',\n        'CIR007',\n        'CIR008',\n        'CIR009',\n        'CIR010',\n        'CIR011',\n        'CIR012',\n        'CIR013',\n        'CIR014',\n        'CIR015',\n        'CIR016',\n        'CIR017',\n        'CIR018',\n        'CIR019',\n        'CIR020',\n        'CIR021',\n        'CIR022',\n        'CIR023',\n        'CIR024',\n        'CIR025',\n        'CIR026',\n        'CIR027',\n        'CIR028',\n        'CIR029',\n        'CIR030',\n        'CIR031',\n        'CIR032',\n        'CIR033',\n        'CIR034',\n        'CIR035',\n        'CIR036',\n        'CIR037',\n        'CIR038',\n        'CIR039',\n        'DIG001',\n        'DIG002',\n        'DIG003',\n        'DIG004',\n        'DIG005',\n        'DIG006',\n        'DIG007',\n        'DIG008',\n        'DIG009',\n        'DIG010',\n        'DIG011',\n        'DIG012',\n        'DIG013',\n        'DIG014',\n        'DIG015',\n        'DIG016',\n        'DIG017',\n        'DIG018',\n        'DIG019',\n        'DIG020',\n        'DIG021',\n        'DIG022',\n        'DIG023',\n        'DIG024',\n        'DIG025',\n        'EAR001',\n        'EAR002',\n        'EAR003',\n        'EAR004',\n        'EAR005',\n        'EAR006',\n        'END001',\n        'END002',\n        'END003',\n        'END004',\n        'END005',\n        'END006',\n        'END007',\n        'END008',\n        'END009',\n        'END010',\n        'END011',\n        'END012',\n        'END013',\n        'END014',\n        'END015',\n        'END016',\n        'END017',\n        'EXT001',\n        'EXT002',\n        'EXT003',\n        'EXT004',\n        'EXT005',\n        'EXT006',\n        'EXT007',\n        'EXT008',\n        'EXT009',\n        'EXT010',\n        'EXT011',\n        'EXT012',\n        'EXT013',\n        'EXT014',\n        'EXT015',\n        'EXT016',\n        'EXT017',\n        'EXT018',\n        'EXT019',\n        'EXT020',\n        'EXT021',\n        'EXT022',\n        'EXT023',\n        'EXT024',\n        'EXT025',\n        'EXT026',\n        'EXT027',\n        'EXT028',\n        'EXT029',\n        'EXT030',\n        'EYE001',\n        'EYE002',\n        'EYE003',\n        'EYE004',\n        'EYE005',\n        'EYE006',\n        'EYE007',\n        'EYE008',\n        'EYE009',\n        'EYE010',\n        'EYE011',\n        'EYE012',\n        'FAC001',\n        'FAC002',\n        'FAC003',\n        'FAC004',\n        'FAC005',\n        'FAC006',\n        'FAC007',\n        'FAC008',\n        'FAC009',\n        'FAC010',\n        'FAC011',\n        'FAC012',\n        'FAC013',\n        'FAC014',\n        'FAC015',\n        'FAC016',\n        'FAC017',\n        'FAC018',\n        'FAC019',\n        'FAC020',\n        'FAC021',\n        'FAC022',\n        'FAC023',\n        'FAC024',\n        'FAC025',\n        'GEN001',\n        'GEN002',\n        'GEN003',\n        'GEN004',\n        'GEN005',\n        'GEN006',\n        'GEN007',\n        'GEN008',\n        'GEN009',\n        'GEN010',\n        'GEN011',\n        'GEN012',\n        'GEN013',\n        'GEN014',\n        'GEN015',\n        'GEN016',\n        'GEN017',\n        'GEN018',\n        'GEN019',\n        'GEN020',\n        'GEN021',\n        'GEN022',\n        'GEN023',\n        'GEN024',\n        'GEN025',\n        'GEN026',\n        'INF001',\n        'INF002',\n        'INF003',\n        'INF004',\n        'INF005',\n        'INF006',\n        'INF007',\n        'INF008',\n        'INF009',\n        'INF010',\n        'INF011',\n        'INF012',\n        'INJ001',\n        'INJ002',\n        'INJ003',\n        'INJ004',\n        'INJ005',\n        'INJ006',\n        'INJ007',\n        'INJ008',\n        'INJ009',\n        'INJ010',\n        'INJ011',\n        'INJ012',\n        'INJ013',\n        'INJ014',\n        'INJ015',\n        'INJ016',\n        'INJ017',\n        'INJ018',\n        'INJ019',\n        'INJ020',\n        'INJ021',\n        'INJ022',\n        'INJ023',\n        'INJ024',\n        'INJ025',\n        'INJ026',\n        'INJ027',\n        'INJ028',\n        'INJ029',\n        'INJ030',\n        'INJ031',\n        'INJ032',\n        'INJ033',\n        'INJ034',\n        'INJ035',\n        'INJ036',\n        'INJ037',\n        'INJ038',\n        'INJ039',\n        'INJ040',\n        'INJ041',\n        'INJ042',\n        'INJ043',\n        'INJ044',\n        'INJ045',\n        'INJ046',\n        'INJ047',\n        'INJ048',\n        'INJ049',\n        'INJ050',\n        'INJ051',\n        'INJ052',\n        'INJ053',\n        'INJ054',\n        'INJ055',\n        'INJ056',\n        'INJ057',\n        'INJ058',\n        'INJ059',\n        'INJ060',\n        'INJ061',\n        'INJ062',\n        'INJ063',\n        'INJ064',\n        'INJ065',\n        'INJ066',\n        'INJ067',\n        'INJ068',\n        'INJ069',\n        'INJ070',\n        'INJ071',\n        'INJ072',\n        'INJ073',\n        'INJ074',\n        'INJ075',\n        'INJ076',\n        'MAL001',\n        'MAL002',\n        'MAL003',\n        'MAL004',\n        'MAL005',\n        'MAL006',\n        'MAL007',\n        'MAL008',\n        'MAL009',\n        'MAL010',\n        'MBD001',\n        'MBD002',\n        'MBD003',\n        'MBD004',\n        'MBD005',\n        'MBD006',\n        'MBD007',\n        'MBD008',\n        'MBD009',\n        'MBD010',\n        'MBD011',\n        'MBD012',\n        'MBD013',\n        'MBD014',\n        'MBD017',\n        'MBD018',\n        'MBD019',\n        'MBD020',\n        'MBD021',\n        'MBD022',\n        'MBD023',\n        'MBD024',\n        'MBD025',\n        'MBD026',\n        'MBD027',\n        'MBD028',\n        'MBD029',\n        'MBD030',\n        'MBD031',\n        'MBD032',\n        'MBD033',\n        'MBD034',\n        'MUS001',\n        'MUS002',\n        'MUS003',\n        'MUS004',\n        'MUS005',\n        'MUS006',\n        'MUS007',\n        'MUS008',\n        'MUS009',\n        'MUS010',\n        'MUS011',\n        'MUS012',\n        'MUS013',\n        'MUS014',\n        'MUS015',\n        'MUS016',\n        'MUS017',\n        'MUS018',\n        'MUS019',\n        'MUS020',\n        'MUS021',\n        'MUS022',\n        'MUS023',\n        'MUS024',\n        'MUS025',\n        'MUS026',\n        'MUS027',\n        'MUS028',\n        'MUS029',\n        'MUS030',\n        'MUS031',\n        'MUS032',\n        'MUS033',\n        'MUS034',\n        'MUS035',\n        'MUS036',\n        'MUS037',\n        'MUS038',\n        'NEO001',\n        'NEO002',\n        'NEO003',\n        'NEO004',\n        'NEO005',\n        'NEO006',\n        'NEO007',\n        'NEO008',\n        'NEO009',\n        'NEO010',\n        'NEO011',\n        'NEO012',\n        'NEO013',\n        'NEO014',\n        'NEO015',\n        'NEO016',\n        'NEO017',\n        'NEO018',\n        'NEO019',\n        'NEO020',\n        'NEO021',\n        'NEO022',\n        'NEO023',\n        'NEO024',\n        'NEO025',\n        'NEO026',\n        'NEO027',\n        'NEO028',\n        'NEO029',\n        'NEO030',\n        'NEO031',\n        'NEO032',\n        'NEO033',\n        'NEO034',\n        'NEO035',\n        'NEO036',\n        'NEO037',\n        'NEO038',\n        'NEO039',\n        'NEO040',\n        'NEO041',\n        'NEO042',\n        'NEO043',\n        'NEO044',\n        'NEO045',\n        'NEO046',\n        'NEO047',\n        'NEO048',\n        'NEO049',\n        'NEO050',\n        'NEO051',\n        'NEO052',\n        'NEO053',\n        'NEO054',\n        'NEO055',\n        'NEO056',\n        'NEO057',\n        'NEO058',\n        'NEO059',\n        'NEO060',\n        'NEO061',\n        'NEO062',\n        'NEO063',\n        'NEO064',\n        'NEO065',\n        'NEO066',\n        'NEO067',\n        'NEO068',\n        'NEO069',\n        'NEO070',\n        'NEO071',\n        'NEO072',\n        'NEO073',\n        'NEO074',\n        'NVS001',\n        'NVS002',\n        'NVS003',\n        'NVS004',\n        'NVS005',\n        'NVS006',\n        'NVS007',\n        'NVS008',\n        'NVS009',\n        'NVS010',\n        'NVS011',\n        'NVS012',\n        'NVS013',\n        'NVS014',\n        'NVS015',\n        'NVS016',\n        'NVS017',\n        'NVS018',\n        'NVS019',\n        'NVS020',\n        'NVS021',\n        'NVS022',\n        'PNL001',\n        'PNL002',\n        'PNL003',\n        'PNL004',\n        'PNL005',\n        'PNL006',\n        'PNL007',\n        'PNL008',\n        'PNL009',\n        'PNL010',\n        'PNL011',\n        'PNL012',\n        'PNL013',\n        'PNL014',\n        'PNL015',\n        'PRG001',\n        'PRG002',\n        'PRG003',\n        'PRG004',\n        'PRG005',\n        'PRG006',\n        'PRG007',\n        'PRG008',\n        'PRG009',\n        'PRG010',\n        'PRG011',\n        'PRG012',\n        'PRG013',\n        'PRG014',\n        'PRG015',\n        'PRG016',\n        'PRG017',\n        'PRG018',\n        'PRG019',\n        'PRG020',\n        'PRG021',\n        'PRG022',\n        'PRG023',\n        'PRG024',\n        'PRG025',\n        'PRG026',\n        'PRG027',\n        'PRG028',\n        'PRG029',\n        'PRG030',\n        'RSP001',\n        'RSP002',\n        'RSP003',\n        'RSP004',\n        'RSP005',\n        'RSP006',\n        'RSP007',\n        'RSP008',\n        'RSP009',\n        'RSP010',\n        'RSP011',\n        'RSP012',\n        'RSP013',\n        'RSP014',\n        'RSP015',\n        'RSP016',\n        'RSP017',\n        'SKN001',\n        'SKN002',\n        'SKN003',\n        'SKN004',\n        'SKN005',\n        'SKN006',\n        'SKN007',\n        'SYM001',\n        'SYM002',\n        'SYM003',\n        'SYM004',\n        'SYM005',\n        'SYM006',\n        'SYM007',\n        'SYM008',\n        'SYM009',\n        'SYM010',\n        'SYM011',\n        'SYM012',\n        'SYM013',\n        'SYM014',\n        'SYM015',\n        'SYM016',\n        'SYM017',\n        'XXX000',\n        'XXX111',\n        'NoDX1',\n        'InvlDX'\n    )) \nas pvt (\n    encounter_id,\n    BLD001,\n    BLD002,\n    BLD003,\n    BLD004,\n    BLD005,\n    BLD006,\n    BLD007,\n    BLD008,\n    BLD009,\n    BLD010,\n    CIR001,\n    CIR002,\n    CIR003,\n    CIR004,\n    CIR005,\n    CIR006,\n    CIR007,\n    CIR008,\n    CIR009,\n    CIR010,\n    CIR011,\n    CIR012,\n    CIR013,\n    CIR014,\n    CIR015,\n    CIR016,\n    CIR017,\n    CIR018,\n    CIR019,\n    CIR020,\n    CIR021,\n    CIR022,\n    CIR023,\n    CIR024,\n    CIR025,\n    CIR026,\n    CIR027,\n    CIR028,\n    CIR029,\n    CIR030,\n    CIR031,\n    CIR032,\n    CIR033,\n    CIR034,\n    CIR035,\n    CIR036,\n    CIR037,\n    CIR038,\n    CIR039,\n    DIG001,\n    DIG002,\n    DIG003,\n    DIG004,\n    DIG005,\n    DIG006,\n    DIG007,\n    DIG008,\n    DIG009,\n    DIG010,\n    DIG011,\n    DIG012,\n    DIG013,\n    DIG014,\n    DIG015,\n    DIG016,\n    DIG017,\n    DIG018,\n    DIG019,\n    DIG020,\n    DIG021,\n    DIG022,\n    DIG023,\n    DIG024,\n    DIG025,\n    EAR001,\n    EAR002,\n    EAR003,\n    EAR004,\n    EAR005,\n    EAR006,\n    END001,\n    END002,\n    END003,\n    END004,\n    END005,\n    END006,\n    END007,\n    END008,\n    END009,\n    END010,\n    END011,\n    END012,\n    END013,\n    END014,\n    END015,\n    END016,\n    END017,\n    EXT001,\n    EXT002,\n    EXT003,\n    EXT004,\n    EXT005,\n    EXT006,\n    EXT007,\n    EXT008,\n    EXT009,\n    EXT010,\n    EXT011,\n    EXT012,\n    EXT013,\n    EXT014,\n    EXT015,\n    EXT016,\n    EXT017,\n    EXT018,\n    EXT019,\n    EXT020,\n    EXT021,\n    EXT022,\n    EXT023,\n    EXT024,\n    EXT025,\n    EXT026,\n    EXT027,\n    EXT028,\n    EXT029,\n    EXT030,\n    EYE001,\n    EYE002,\n    EYE003,\n    EYE004,\n    EYE005,\n    EYE006,\n    EYE007,\n    EYE008,\n    EYE009,\n    EYE010,\n    EYE011,\n    EYE012,\n    FAC001,\n    FAC002,\n    FAC003,\n    FAC004,\n    FAC005,\n    FAC006,\n    FAC007,\n    FAC008,\n    FAC009,\n    FAC010,\n    FAC011,\n    FAC012,\n    FAC013,\n    FAC014,\n    FAC015,\n    FAC016,\n    FAC017,\n    FAC018,\n    FAC019,\n    FAC020,\n    FAC021,\n    FAC022,\n    FAC023,\n    FAC024,\n    FAC025,\n    GEN001,\n    GEN002,\n    GEN003,\n    GEN004,\n    GEN005,\n    GEN006,\n    GEN007,\n    GEN008,\n    GEN009,\n    GEN010,\n    GEN011,\n    GEN012,\n    GEN013,\n    GEN014,\n    GEN015,\n    GEN016,\n    GEN017,\n    GEN018,\n    GEN019,\n    GEN020,\n    GEN021,\n    GEN022,\n    GEN023,\n    GEN024,\n    GEN025,\n    GEN026,\n    INF001,\n    INF002,\n    INF003,\n    INF004,\n    INF005,\n    INF006,\n    INF007,\n    INF008,\n    INF009,\n    INF010,\n    INF011,\n    INF012,\n    INJ001,\n    INJ002,\n    INJ003,\n    INJ004,\n    INJ005,\n    INJ006,\n    INJ007,\n    INJ008,\n    INJ009,\n    INJ010,\n    INJ011,\n    INJ012,\n    INJ013,\n    INJ014,\n    INJ015,\n    INJ016,\n    INJ017,\n    INJ018,\n    INJ019,\n    INJ020,\n    INJ021,\n    INJ022,\n    INJ023,\n    INJ024,\n    INJ025,\n    INJ026,\n    INJ027,\n    INJ028,\n    INJ029,\n    INJ030,\n    INJ031,\n    INJ032,\n    INJ033,\n    INJ034,\n    INJ035,\n    INJ036,\n    INJ037,\n    INJ038,\n    INJ039,\n    INJ040,\n    INJ041,\n    INJ042,\n    INJ043,\n    INJ044,\n    INJ045,\n    INJ046,\n    INJ047,\n    INJ048,\n    INJ049,\n    INJ050,\n    INJ051,\n    INJ052,\n    INJ053,\n    INJ054,\n    INJ055,\n    INJ056,\n    INJ057,\n    INJ058,\n    INJ059,\n    INJ060,\n    INJ061,\n    INJ062,\n    INJ063,\n    INJ064,\n    INJ065,\n    INJ066,\n    INJ067,\n    INJ068,\n    INJ069,\n    INJ070,\n    INJ071,\n    INJ072,\n    INJ073,\n    INJ074,\n    INJ075,\n    INJ076,\n    MAL001,\n    MAL002,\n    MAL003,\n    MAL004,\n    MAL005,\n    MAL006,\n    MAL007,\n    MAL008,\n    MAL009,\n    MAL010,\n    MBD001,\n    MBD002,\n    MBD003,\n    MBD004,\n    MBD005,\n    MBD006,\n    MBD007,\n    MBD008,\n    MBD009,\n    MBD010,\n    MBD011,\n    MBD012,\n    MBD013,\n    MBD014,\n    MBD017,\n    MBD018,\n    MBD019,\n    MBD020,\n    MBD021,\n    MBD022,\n    MBD023,\n    MBD024,\n    MBD025,\n    MBD026,\n    MBD027,\n    MBD028,\n    MBD029,\n    MBD030,\n    MBD031,\n    MBD032,\n    MBD033,\n    MBD034,\n    MUS001,\n    MUS002,\n    MUS003,\n    MUS004,\n    MUS005,\n    MUS006,\n    MUS007,\n    MUS008,\n    MUS009,\n    MUS010,\n    MUS011,\n    MUS012,\n    MUS013,\n    MUS014,\n    MUS015,\n    MUS016,\n    MUS017,\n    MUS018,\n    MUS019,\n    MUS020,\n    MUS021,\n    MUS022,\n    MUS023,\n    MUS024,\n    MUS025,\n    MUS026,\n    MUS027,\n    MUS028,\n    MUS029,\n    MUS030,\n    MUS031,\n    MUS032,\n    MUS033,\n    MUS034,\n    MUS035,\n    MUS036,\n    MUS037,\n    MUS038,\n    NEO001,\n    NEO002,\n    NEO003,\n    NEO004,\n    NEO005,\n    NEO006,\n    NEO007,\n    NEO008,\n    NEO009,\n    NEO010,\n    NEO011,\n    NEO012,\n    NEO013,\n    NEO014,\n    NEO015,\n    NEO016,\n    NEO017,\n    NEO018,\n    NEO019,\n    NEO020,\n    NEO021,\n    NEO022,\n    NEO023,\n    NEO024,\n    NEO025,\n    NEO026,\n    NEO027,\n    NEO028,\n    NEO029,\n    NEO030,\n    NEO031,\n    NEO032,\n    NEO033,\n    NEO034,\n    NEO035,\n    NEO036,\n    NEO037,\n    NEO038,\n    NEO039,\n    NEO040,\n    NEO041,\n    NEO042,\n    NEO043,\n    NEO044,\n    NEO045,\n    NEO046,\n    NEO047,\n    NEO048,\n    NEO049,\n    NEO050,\n    NEO051,\n    NEO052,\n    NEO053,\n    NEO054,\n    NEO055,\n    NEO056,\n    NEO057,\n    NEO058,\n    NEO059,\n    NEO060,\n    NEO061,\n    NEO062,\n    NEO063,\n    NEO064,\n    NEO065,\n    NEO066,\n    NEO067,\n    NEO068,\n    NEO069,\n    NEO070,\n    NEO071,\n    NEO072,\n    NEO073,\n    NEO074,\n    NVS001,\n    NVS002,\n    NVS003,\n    NVS004,\n    NVS005,\n    NVS006,\n    NVS007,\n    NVS008,\n    NVS009,\n    NVS010,\n    NVS011,\n    NVS012,\n    NVS013,\n    NVS014,\n    NVS015,\n    NVS016,\n    NVS017,\n    NVS018,\n    NVS019,\n    NVS020,\n    NVS021,\n    NVS022,\n    PNL001,\n    PNL002,\n    PNL003,\n    PNL004,\n    PNL005,\n    PNL006,\n    PNL007,\n    PNL008,\n    PNL009,\n    PNL010,\n    PNL011,\n    PNL012,\n    PNL013,\n    PNL014,\n    PNL015,\n    PRG001,\n    PRG002,\n    PRG003,\n    PRG004,\n    PRG005,\n    PRG006,\n    PRG007,\n    PRG008,\n    PRG009,\n    PRG010,\n    PRG011,\n    PRG012,\n    PRG013,\n    PRG014,\n    PRG015,\n    PRG016,\n    PRG017,\n    PRG018,\n    PRG019,\n    PRG020,\n    PRG021,\n    PRG022,\n    PRG023,\n    PRG024,\n    PRG025,\n    PRG026,\n    PRG027,\n    PRG028,\n    PRG029,\n    PRG030,\n    RSP001,\n    RSP002,\n    RSP003,\n    RSP004,\n    RSP005,\n    RSP006,\n    RSP007,\n    RSP008,\n    RSP009,\n    RSP010,\n    RSP011,\n    RSP012,\n    RSP013,\n    RSP014,\n    RSP015,\n    RSP016,\n    RSP017,\n    SKN001,\n    SKN002,\n    SKN003,\n    SKN004,\n    SKN005,\n    SKN006,\n    SKN007,\n    SYM001,\n    SYM002,\n    SYM003,\n    SYM004,\n    SYM005,\n    SYM006,\n    SYM007,\n    SYM008,\n    SYM009,\n    SYM010,\n    SYM011,\n    SYM012,\n    SYM013,\n    SYM014,\n    SYM015,\n    SYM016,\n    SYM017,\n    XXX000,\n    XXX111,\n    NoDX1,\n    InvlDX\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.ccsr_dx_long"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["ccsr"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "ccsr_dx_wide"], "unique_id": "model.tuva.ccsr_dx_wide", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "ccsr_dx_wide.sql", "original_file_path": "models/ccsr_dx_wide.sql", "name": "ccsr_dx_wide", "alias": "ccsr_dx_wide", "checksum": {"name": "sha256", "checksum": "75eaffdd50f994ba935c1a640c58d6e4285f947cfd46c11076e99308a61dff21"}, "tags": ["ccsr"], "refs": [["ccsr_dx_long"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/ccsr_dx_wide.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["ccsr"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith ccsr as (\nselect\n    encounter_id\n,   ccsr\n,   1 as condition_count\nfrom tuva.core.ccsr_dx_long a\n)\n\nselect \n    encounter_id,\n    case when BLD001 >=1 then 1 else 0 end BLD001,\n    case when BLD002 >=1 then 1 else 0 end BLD002,\n    case when BLD003 >=1 then 1 else 0 end BLD003,\n    case when BLD004 >=1 then 1 else 0 end BLD004,\n    case when BLD005 >=1 then 1 else 0 end BLD005,\n    case when BLD006 >=1 then 1 else 0 end BLD006,\n    case when BLD007 >=1 then 1 else 0 end BLD007,\n    case when BLD008 >=1 then 1 else 0 end BLD008,\n    case when BLD009 >=1 then 1 else 0 end BLD009,\n    case when BLD010 >=1 then 1 else 0 end BLD010,\n    case when CIR001 >=1 then 1 else 0 end CIR001,\n    case when CIR002 >=1 then 1 else 0 end CIR002,\n    case when CIR003 >=1 then 1 else 0 end CIR003,\n    case when CIR004 >=1 then 1 else 0 end CIR004,\n    case when CIR005 >=1 then 1 else 0 end CIR005,\n    case when CIR006 >=1 then 1 else 0 end CIR006,\n    case when CIR007 >=1 then 1 else 0 end CIR007,\n    case when CIR008 >=1 then 1 else 0 end CIR008,\n    case when CIR009 >=1 then 1 else 0 end CIR009,\n    case when CIR010 >=1 then 1 else 0 end CIR010,\n    case when CIR011 >=1 then 1 else 0 end CIR011,\n    case when CIR012 >=1 then 1 else 0 end CIR012,\n    case when CIR013 >=1 then 1 else 0 end CIR013,\n    case when CIR014 >=1 then 1 else 0 end CIR014,\n    case when CIR015 >=1 then 1 else 0 end CIR015,\n    case when CIR016 >=1 then 1 else 0 end CIR016,\n    case when CIR017 >=1 then 1 else 0 end CIR017,\n    case when CIR018 >=1 then 1 else 0 end CIR018,\n    case when CIR019 >=1 then 1 else 0 end CIR019,\n    case when CIR020 >=1 then 1 else 0 end CIR020,\n    case when CIR021 >=1 then 1 else 0 end CIR021,\n    case when CIR022 >=1 then 1 else 0 end CIR022,\n    case when CIR023 >=1 then 1 else 0 end CIR023,\n    case when CIR024 >=1 then 1 else 0 end CIR024,\n    case when CIR025 >=1 then 1 else 0 end CIR025,\n    case when CIR026 >=1 then 1 else 0 end CIR026,\n    case when CIR027 >=1 then 1 else 0 end CIR027,\n    case when CIR028 >=1 then 1 else 0 end CIR028,\n    case when CIR029 >=1 then 1 else 0 end CIR029,\n    case when CIR030 >=1 then 1 else 0 end CIR030,\n    case when CIR031 >=1 then 1 else 0 end CIR031,\n    case when CIR032 >=1 then 1 else 0 end CIR032,\n    case when CIR033 >=1 then 1 else 0 end CIR033,\n    case when CIR034 >=1 then 1 else 0 end CIR034,\n    case when CIR035 >=1 then 1 else 0 end CIR035,\n    case when CIR036 >=1 then 1 else 0 end CIR036,\n    case when CIR037 >=1 then 1 else 0 end CIR037,\n    case when CIR038 >=1 then 1 else 0 end CIR038,\n    case when CIR039 >=1 then 1 else 0 end CIR039,\n    case when DIG001 >=1 then 1 else 0 end DIG001,\n    case when DIG002 >=1 then 1 else 0 end DIG002,\n    case when DIG003 >=1 then 1 else 0 end DIG003,\n    case when DIG004 >=1 then 1 else 0 end DIG004,\n    case when DIG005 >=1 then 1 else 0 end DIG005,\n    case when DIG006 >=1 then 1 else 0 end DIG006,\n    case when DIG007 >=1 then 1 else 0 end DIG007,\n    case when DIG008 >=1 then 1 else 0 end DIG008,\n    case when DIG009 >=1 then 1 else 0 end DIG009,\n    case when DIG010 >=1 then 1 else 0 end DIG010,\n    case when DIG011 >=1 then 1 else 0 end DIG011,\n    case when DIG012 >=1 then 1 else 0 end DIG012,\n    case when DIG013 >=1 then 1 else 0 end DIG013,\n    case when DIG014 >=1 then 1 else 0 end DIG014,\n    case when DIG015 >=1 then 1 else 0 end DIG015,\n    case when DIG016 >=1 then 1 else 0 end DIG016,\n    case when DIG017 >=1 then 1 else 0 end DIG017,\n    case when DIG018 >=1 then 1 else 0 end DIG018,\n    case when DIG019 >=1 then 1 else 0 end DIG019,\n    case when DIG020 >=1 then 1 else 0 end DIG020,\n    case when DIG021 >=1 then 1 else 0 end DIG021,\n    case when DIG022 >=1 then 1 else 0 end DIG022,\n    case when DIG023 >=1 then 1 else 0 end DIG023,\n    case when DIG024 >=1 then 1 else 0 end DIG024,\n    case when DIG025 >=1 then 1 else 0 end DIG025,\n    case when EAR001 >=1 then 1 else 0 end EAR001,\n    case when EAR002 >=1 then 1 else 0 end EAR002,\n    case when EAR003 >=1 then 1 else 0 end EAR003,\n    case when EAR004 >=1 then 1 else 0 end EAR004,\n    case when EAR005 >=1 then 1 else 0 end EAR005,\n    case when EAR006 >=1 then 1 else 0 end EAR006,\n    case when END001 >=1 then 1 else 0 end END001,\n    case when END002 >=1 then 1 else 0 end END002,\n    case when END003 >=1 then 1 else 0 end END003,\n    case when END004 >=1 then 1 else 0 end END004,\n    case when END005 >=1 then 1 else 0 end END005,\n    case when END006 >=1 then 1 else 0 end END006,\n    case when END007 >=1 then 1 else 0 end END007,\n    case when END008 >=1 then 1 else 0 end END008,\n    case when END009 >=1 then 1 else 0 end END009,\n    case when END010 >=1 then 1 else 0 end END010,\n    case when END011 >=1 then 1 else 0 end END011,\n    case when END012 >=1 then 1 else 0 end END012,\n    case when END013 >=1 then 1 else 0 end END013,\n    case when END014 >=1 then 1 else 0 end END014,\n    case when END015 >=1 then 1 else 0 end END015,\n    case when END016 >=1 then 1 else 0 end END016,\n    case when END017 >=1 then 1 else 0 end END017,\n    case when EXT001 >=1 then 1 else 0 end EXT001,\n    case when EXT002 >=1 then 1 else 0 end EXT002,\n    case when EXT003 >=1 then 1 else 0 end EXT003,\n    case when EXT004 >=1 then 1 else 0 end EXT004,\n    case when EXT005 >=1 then 1 else 0 end EXT005,\n    case when EXT006 >=1 then 1 else 0 end EXT006,\n    case when EXT007 >=1 then 1 else 0 end EXT007,\n    case when EXT008 >=1 then 1 else 0 end EXT008,\n    case when EXT009 >=1 then 1 else 0 end EXT009,\n    case when EXT010 >=1 then 1 else 0 end EXT010,\n    case when EXT011 >=1 then 1 else 0 end EXT011,\n    case when EXT012 >=1 then 1 else 0 end EXT012,\n    case when EXT013 >=1 then 1 else 0 end EXT013,\n    case when EXT014 >=1 then 1 else 0 end EXT014,\n    case when EXT015 >=1 then 1 else 0 end EXT015,\n    case when EXT016 >=1 then 1 else 0 end EXT016,\n    case when EXT017 >=1 then 1 else 0 end EXT017,\n    case when EXT018 >=1 then 1 else 0 end EXT018,\n    case when EXT019 >=1 then 1 else 0 end EXT019,\n    case when EXT020 >=1 then 1 else 0 end EXT020,\n    case when EXT021 >=1 then 1 else 0 end EXT021,\n    case when EXT022 >=1 then 1 else 0 end EXT022,\n    case when EXT023 >=1 then 1 else 0 end EXT023,\n    case when EXT024 >=1 then 1 else 0 end EXT024,\n    case when EXT025 >=1 then 1 else 0 end EXT025,\n    case when EXT026 >=1 then 1 else 0 end EXT026,\n    case when EXT027 >=1 then 1 else 0 end EXT027,\n    case when EXT028 >=1 then 1 else 0 end EXT028,\n    case when EXT029 >=1 then 1 else 0 end EXT029,\n    case when EXT030 >=1 then 1 else 0 end EXT030,\n    case when EYE001 >=1 then 1 else 0 end EYE001,\n    case when EYE002 >=1 then 1 else 0 end EYE002,\n    case when EYE003 >=1 then 1 else 0 end EYE003,\n    case when EYE004 >=1 then 1 else 0 end EYE004,\n    case when EYE005 >=1 then 1 else 0 end EYE005,\n    case when EYE006 >=1 then 1 else 0 end EYE006,\n    case when EYE007 >=1 then 1 else 0 end EYE007,\n    case when EYE008 >=1 then 1 else 0 end EYE008,\n    case when EYE009 >=1 then 1 else 0 end EYE009,\n    case when EYE010 >=1 then 1 else 0 end EYE010,\n    case when EYE011 >=1 then 1 else 0 end EYE011,\n    case when EYE012 >=1 then 1 else 0 end EYE012,\n    case when FAC001 >=1 then 1 else 0 end FAC001,\n    case when FAC002 >=1 then 1 else 0 end FAC002,\n    case when FAC003 >=1 then 1 else 0 end FAC003,\n    case when FAC004 >=1 then 1 else 0 end FAC004,\n    case when FAC005 >=1 then 1 else 0 end FAC005,\n    case when FAC006 >=1 then 1 else 0 end FAC006,\n    case when FAC007 >=1 then 1 else 0 end FAC007,\n    case when FAC008 >=1 then 1 else 0 end FAC008,\n    case when FAC009 >=1 then 1 else 0 end FAC009,\n    case when FAC010 >=1 then 1 else 0 end FAC010,\n    case when FAC011 >=1 then 1 else 0 end FAC011,\n    case when FAC012 >=1 then 1 else 0 end FAC012,\n    case when FAC013 >=1 then 1 else 0 end FAC013,\n    case when FAC014 >=1 then 1 else 0 end FAC014,\n    case when FAC015 >=1 then 1 else 0 end FAC015,\n    case when FAC016 >=1 then 1 else 0 end FAC016,\n    case when FAC017 >=1 then 1 else 0 end FAC017,\n    case when FAC018 >=1 then 1 else 0 end FAC018,\n    case when FAC019 >=1 then 1 else 0 end FAC019,\n    case when FAC020 >=1 then 1 else 0 end FAC020,\n    case when FAC021 >=1 then 1 else 0 end FAC021,\n    case when FAC022 >=1 then 1 else 0 end FAC022,\n    case when FAC023 >=1 then 1 else 0 end FAC023,\n    case when FAC024 >=1 then 1 else 0 end FAC024,\n    case when FAC025 >=1 then 1 else 0 end FAC025,\n    case when GEN001 >=1 then 1 else 0 end GEN001,\n    case when GEN002 >=1 then 1 else 0 end GEN002,\n    case when GEN003 >=1 then 1 else 0 end GEN003,\n    case when GEN004 >=1 then 1 else 0 end GEN004,\n    case when GEN005 >=1 then 1 else 0 end GEN005,\n    case when GEN006 >=1 then 1 else 0 end GEN006,\n    case when GEN007 >=1 then 1 else 0 end GEN007,\n    case when GEN008 >=1 then 1 else 0 end GEN008,\n    case when GEN009 >=1 then 1 else 0 end GEN009,\n    case when GEN010 >=1 then 1 else 0 end GEN010,\n    case when GEN011 >=1 then 1 else 0 end GEN011,\n    case when GEN012 >=1 then 1 else 0 end GEN012,\n    case when GEN013 >=1 then 1 else 0 end GEN013,\n    case when GEN014 >=1 then 1 else 0 end GEN014,\n    case when GEN015 >=1 then 1 else 0 end GEN015,\n    case when GEN016 >=1 then 1 else 0 end GEN016,\n    case when GEN017 >=1 then 1 else 0 end GEN017,\n    case when GEN018 >=1 then 1 else 0 end GEN018,\n    case when GEN019 >=1 then 1 else 0 end GEN019,\n    case when GEN020 >=1 then 1 else 0 end GEN020,\n    case when GEN021 >=1 then 1 else 0 end GEN021,\n    case when GEN022 >=1 then 1 else 0 end GEN022,\n    case when GEN023 >=1 then 1 else 0 end GEN023,\n    case when GEN024 >=1 then 1 else 0 end GEN024,\n    case when GEN025 >=1 then 1 else 0 end GEN025,\n    case when GEN026 >=1 then 1 else 0 end GEN026,\n    case when INF001 >=1 then 1 else 0 end INF001,\n    case when INF002 >=1 then 1 else 0 end INF002,\n    case when INF003 >=1 then 1 else 0 end INF003,\n    case when INF004 >=1 then 1 else 0 end INF004,\n    case when INF005 >=1 then 1 else 0 end INF005,\n    case when INF006 >=1 then 1 else 0 end INF006,\n    case when INF007 >=1 then 1 else 0 end INF007,\n    case when INF008 >=1 then 1 else 0 end INF008,\n    case when INF009 >=1 then 1 else 0 end INF009,\n    case when INF010 >=1 then 1 else 0 end INF010,\n    case when INF011 >=1 then 1 else 0 end INF011,\n    case when INF012 >=1 then 1 else 0 end INF012,\n    case when INJ001 >=1 then 1 else 0 end INJ001,\n    case when INJ002 >=1 then 1 else 0 end INJ002,\n    case when INJ003 >=1 then 1 else 0 end INJ003,\n    case when INJ004 >=1 then 1 else 0 end INJ004,\n    case when INJ005 >=1 then 1 else 0 end INJ005,\n    case when INJ006 >=1 then 1 else 0 end INJ006,\n    case when INJ007 >=1 then 1 else 0 end INJ007,\n    case when INJ008 >=1 then 1 else 0 end INJ008,\n    case when INJ009 >=1 then 1 else 0 end INJ009,\n    case when INJ010 >=1 then 1 else 0 end INJ010,\n    case when INJ011 >=1 then 1 else 0 end INJ011,\n    case when INJ012 >=1 then 1 else 0 end INJ012,\n    case when INJ013 >=1 then 1 else 0 end INJ013,\n    case when INJ014 >=1 then 1 else 0 end INJ014,\n    case when INJ015 >=1 then 1 else 0 end INJ015,\n    case when INJ016 >=1 then 1 else 0 end INJ016,\n    case when INJ017 >=1 then 1 else 0 end INJ017,\n    case when INJ018 >=1 then 1 else 0 end INJ018,\n    case when INJ019 >=1 then 1 else 0 end INJ019,\n    case when INJ020 >=1 then 1 else 0 end INJ020,\n    case when INJ021 >=1 then 1 else 0 end INJ021,\n    case when INJ022 >=1 then 1 else 0 end INJ022,\n    case when INJ023 >=1 then 1 else 0 end INJ023,\n    case when INJ024 >=1 then 1 else 0 end INJ024,\n    case when INJ025 >=1 then 1 else 0 end INJ025,\n    case when INJ026 >=1 then 1 else 0 end INJ026,\n    case when INJ027 >=1 then 1 else 0 end INJ027,\n    case when INJ028 >=1 then 1 else 0 end INJ028,\n    case when INJ029 >=1 then 1 else 0 end INJ029,\n    case when INJ030 >=1 then 1 else 0 end INJ030,\n    case when INJ031 >=1 then 1 else 0 end INJ031,\n    case when INJ032 >=1 then 1 else 0 end INJ032,\n    case when INJ033 >=1 then 1 else 0 end INJ033,\n    case when INJ034 >=1 then 1 else 0 end INJ034,\n    case when INJ035 >=1 then 1 else 0 end INJ035,\n    case when INJ036 >=1 then 1 else 0 end INJ036,\n    case when INJ037 >=1 then 1 else 0 end INJ037,\n    case when INJ038 >=1 then 1 else 0 end INJ038,\n    case when INJ039 >=1 then 1 else 0 end INJ039,\n    case when INJ040 >=1 then 1 else 0 end INJ040,\n    case when INJ041 >=1 then 1 else 0 end INJ041,\n    case when INJ042 >=1 then 1 else 0 end INJ042,\n    case when INJ043 >=1 then 1 else 0 end INJ043,\n    case when INJ044 >=1 then 1 else 0 end INJ044,\n    case when INJ045 >=1 then 1 else 0 end INJ045,\n    case when INJ046 >=1 then 1 else 0 end INJ046,\n    case when INJ047 >=1 then 1 else 0 end INJ047,\n    case when INJ048 >=1 then 1 else 0 end INJ048,\n    case when INJ049 >=1 then 1 else 0 end INJ049,\n    case when INJ050 >=1 then 1 else 0 end INJ050,\n    case when INJ051 >=1 then 1 else 0 end INJ051,\n    case when INJ052 >=1 then 1 else 0 end INJ052,\n    case when INJ053 >=1 then 1 else 0 end INJ053,\n    case when INJ054 >=1 then 1 else 0 end INJ054,\n    case when INJ055 >=1 then 1 else 0 end INJ055,\n    case when INJ056 >=1 then 1 else 0 end INJ056,\n    case when INJ057 >=1 then 1 else 0 end INJ057,\n    case when INJ058 >=1 then 1 else 0 end INJ058,\n    case when INJ059 >=1 then 1 else 0 end INJ059,\n    case when INJ060 >=1 then 1 else 0 end INJ060,\n    case when INJ061 >=1 then 1 else 0 end INJ061,\n    case when INJ062 >=1 then 1 else 0 end INJ062,\n    case when INJ063 >=1 then 1 else 0 end INJ063,\n    case when INJ064 >=1 then 1 else 0 end INJ064,\n    case when INJ065 >=1 then 1 else 0 end INJ065,\n    case when INJ066 >=1 then 1 else 0 end INJ066,\n    case when INJ067 >=1 then 1 else 0 end INJ067,\n    case when INJ068 >=1 then 1 else 0 end INJ068,\n    case when INJ069 >=1 then 1 else 0 end INJ069,\n    case when INJ070 >=1 then 1 else 0 end INJ070,\n    case when INJ071 >=1 then 1 else 0 end INJ071,\n    case when INJ072 >=1 then 1 else 0 end INJ072,\n    case when INJ073 >=1 then 1 else 0 end INJ073,\n    case when INJ074 >=1 then 1 else 0 end INJ074,\n    case when INJ075 >=1 then 1 else 0 end INJ075,\n    case when INJ076 >=1 then 1 else 0 end INJ076,\n    case when MAL001 >=1 then 1 else 0 end MAL001,\n    case when MAL002 >=1 then 1 else 0 end MAL002,\n    case when MAL003 >=1 then 1 else 0 end MAL003,\n    case when MAL004 >=1 then 1 else 0 end MAL004,\n    case when MAL005 >=1 then 1 else 0 end MAL005,\n    case when MAL006 >=1 then 1 else 0 end MAL006,\n    case when MAL007 >=1 then 1 else 0 end MAL007,\n    case when MAL008 >=1 then 1 else 0 end MAL008,\n    case when MAL009 >=1 then 1 else 0 end MAL009,\n    case when MAL010 >=1 then 1 else 0 end MAL010,\n    case when MBD001 >=1 then 1 else 0 end MBD001,\n    case when MBD002 >=1 then 1 else 0 end MBD002,\n    case when MBD003 >=1 then 1 else 0 end MBD003,\n    case when MBD004 >=1 then 1 else 0 end MBD004,\n    case when MBD005 >=1 then 1 else 0 end MBD005,\n    case when MBD006 >=1 then 1 else 0 end MBD006,\n    case when MBD007 >=1 then 1 else 0 end MBD007,\n    case when MBD008 >=1 then 1 else 0 end MBD008,\n    case when MBD009 >=1 then 1 else 0 end MBD009,\n    case when MBD010 >=1 then 1 else 0 end MBD010,\n    case when MBD011 >=1 then 1 else 0 end MBD011,\n    case when MBD012 >=1 then 1 else 0 end MBD012,\n    case when MBD013 >=1 then 1 else 0 end MBD013,\n    case when MBD014 >=1 then 1 else 0 end MBD014,\n    case when MBD017 >=1 then 1 else 0 end MBD017,\n    case when MBD018 >=1 then 1 else 0 end MBD018,\n    case when MBD019 >=1 then 1 else 0 end MBD019,\n    case when MBD020 >=1 then 1 else 0 end MBD020,\n    case when MBD021 >=1 then 1 else 0 end MBD021,\n    case when MBD022 >=1 then 1 else 0 end MBD022,\n    case when MBD023 >=1 then 1 else 0 end MBD023,\n    case when MBD024 >=1 then 1 else 0 end MBD024,\n    case when MBD025 >=1 then 1 else 0 end MBD025,\n    case when MBD026 >=1 then 1 else 0 end MBD026,\n    case when MBD027 >=1 then 1 else 0 end MBD027,\n    case when MBD028 >=1 then 1 else 0 end MBD028,\n    case when MBD029 >=1 then 1 else 0 end MBD029,\n    case when MBD030 >=1 then 1 else 0 end MBD030,\n    case when MBD031 >=1 then 1 else 0 end MBD031,\n    case when MBD032 >=1 then 1 else 0 end MBD032,\n    case when MBD033 >=1 then 1 else 0 end MBD033,\n    case when MBD034 >=1 then 1 else 0 end MBD034,\n    case when MUS001 >=1 then 1 else 0 end MUS001,\n    case when MUS002 >=1 then 1 else 0 end MUS002,\n    case when MUS003 >=1 then 1 else 0 end MUS003,\n    case when MUS004 >=1 then 1 else 0 end MUS004,\n    case when MUS005 >=1 then 1 else 0 end MUS005,\n    case when MUS006 >=1 then 1 else 0 end MUS006,\n    case when MUS007 >=1 then 1 else 0 end MUS007,\n    case when MUS008 >=1 then 1 else 0 end MUS008,\n    case when MUS009 >=1 then 1 else 0 end MUS009,\n    case when MUS010 >=1 then 1 else 0 end MUS010,\n    case when MUS011 >=1 then 1 else 0 end MUS011,\n    case when MUS012 >=1 then 1 else 0 end MUS012,\n    case when MUS013 >=1 then 1 else 0 end MUS013,\n    case when MUS014 >=1 then 1 else 0 end MUS014,\n    case when MUS015 >=1 then 1 else 0 end MUS015,\n    case when MUS016 >=1 then 1 else 0 end MUS016,\n    case when MUS017 >=1 then 1 else 0 end MUS017,\n    case when MUS018 >=1 then 1 else 0 end MUS018,\n    case when MUS019 >=1 then 1 else 0 end MUS019,\n    case when MUS020 >=1 then 1 else 0 end MUS020,\n    case when MUS021 >=1 then 1 else 0 end MUS021,\n    case when MUS022 >=1 then 1 else 0 end MUS022,\n    case when MUS023 >=1 then 1 else 0 end MUS023,\n    case when MUS024 >=1 then 1 else 0 end MUS024,\n    case when MUS025 >=1 then 1 else 0 end MUS025,\n    case when MUS026 >=1 then 1 else 0 end MUS026,\n    case when MUS027 >=1 then 1 else 0 end MUS027,\n    case when MUS028 >=1 then 1 else 0 end MUS028,\n    case when MUS029 >=1 then 1 else 0 end MUS029,\n    case when MUS030 >=1 then 1 else 0 end MUS030,\n    case when MUS031 >=1 then 1 else 0 end MUS031,\n    case when MUS032 >=1 then 1 else 0 end MUS032,\n    case when MUS033 >=1 then 1 else 0 end MUS033,\n    case when MUS034 >=1 then 1 else 0 end MUS034,\n    case when MUS035 >=1 then 1 else 0 end MUS035,\n    case when MUS036 >=1 then 1 else 0 end MUS036,\n    case when MUS037 >=1 then 1 else 0 end MUS037,\n    case when MUS038 >=1 then 1 else 0 end MUS038,\n    case when NEO001 >=1 then 1 else 0 end NEO001,\n    case when NEO002 >=1 then 1 else 0 end NEO002,\n    case when NEO003 >=1 then 1 else 0 end NEO003,\n    case when NEO004 >=1 then 1 else 0 end NEO004,\n    case when NEO005 >=1 then 1 else 0 end NEO005,\n    case when NEO006 >=1 then 1 else 0 end NEO006,\n    case when NEO007 >=1 then 1 else 0 end NEO007,\n    case when NEO008 >=1 then 1 else 0 end NEO008,\n    case when NEO009 >=1 then 1 else 0 end NEO009,\n    case when NEO010 >=1 then 1 else 0 end NEO010,\n    case when NEO011 >=1 then 1 else 0 end NEO011,\n    case when NEO012 >=1 then 1 else 0 end NEO012,\n    case when NEO013 >=1 then 1 else 0 end NEO013,\n    case when NEO014 >=1 then 1 else 0 end NEO014,\n    case when NEO015 >=1 then 1 else 0 end NEO015,\n    case when NEO016 >=1 then 1 else 0 end NEO016,\n    case when NEO017 >=1 then 1 else 0 end NEO017,\n    case when NEO018 >=1 then 1 else 0 end NEO018,\n    case when NEO019 >=1 then 1 else 0 end NEO019,\n    case when NEO020 >=1 then 1 else 0 end NEO020,\n    case when NEO021 >=1 then 1 else 0 end NEO021,\n    case when NEO022 >=1 then 1 else 0 end NEO022,\n    case when NEO023 >=1 then 1 else 0 end NEO023,\n    case when NEO024 >=1 then 1 else 0 end NEO024,\n    case when NEO025 >=1 then 1 else 0 end NEO025,\n    case when NEO026 >=1 then 1 else 0 end NEO026,\n    case when NEO027 >=1 then 1 else 0 end NEO027,\n    case when NEO028 >=1 then 1 else 0 end NEO028,\n    case when NEO029 >=1 then 1 else 0 end NEO029,\n    case when NEO030 >=1 then 1 else 0 end NEO030,\n    case when NEO031 >=1 then 1 else 0 end NEO031,\n    case when NEO032 >=1 then 1 else 0 end NEO032,\n    case when NEO033 >=1 then 1 else 0 end NEO033,\n    case when NEO034 >=1 then 1 else 0 end NEO034,\n    case when NEO035 >=1 then 1 else 0 end NEO035,\n    case when NEO036 >=1 then 1 else 0 end NEO036,\n    case when NEO037 >=1 then 1 else 0 end NEO037,\n    case when NEO038 >=1 then 1 else 0 end NEO038,\n    case when NEO039 >=1 then 1 else 0 end NEO039,\n    case when NEO040 >=1 then 1 else 0 end NEO040,\n    case when NEO041 >=1 then 1 else 0 end NEO041,\n    case when NEO042 >=1 then 1 else 0 end NEO042,\n    case when NEO043 >=1 then 1 else 0 end NEO043,\n    case when NEO044 >=1 then 1 else 0 end NEO044,\n    case when NEO045 >=1 then 1 else 0 end NEO045,\n    case when NEO046 >=1 then 1 else 0 end NEO046,\n    case when NEO047 >=1 then 1 else 0 end NEO047,\n    case when NEO048 >=1 then 1 else 0 end NEO048,\n    case when NEO049 >=1 then 1 else 0 end NEO049,\n    case when NEO050 >=1 then 1 else 0 end NEO050,\n    case when NEO051 >=1 then 1 else 0 end NEO051,\n    case when NEO052 >=1 then 1 else 0 end NEO052,\n    case when NEO053 >=1 then 1 else 0 end NEO053,\n    case when NEO054 >=1 then 1 else 0 end NEO054,\n    case when NEO055 >=1 then 1 else 0 end NEO055,\n    case when NEO056 >=1 then 1 else 0 end NEO056,\n    case when NEO057 >=1 then 1 else 0 end NEO057,\n    case when NEO058 >=1 then 1 else 0 end NEO058,\n    case when NEO059 >=1 then 1 else 0 end NEO059,\n    case when NEO060 >=1 then 1 else 0 end NEO060,\n    case when NEO061 >=1 then 1 else 0 end NEO061,\n    case when NEO062 >=1 then 1 else 0 end NEO062,\n    case when NEO063 >=1 then 1 else 0 end NEO063,\n    case when NEO064 >=1 then 1 else 0 end NEO064,\n    case when NEO065 >=1 then 1 else 0 end NEO065,\n    case when NEO066 >=1 then 1 else 0 end NEO066,\n    case when NEO067 >=1 then 1 else 0 end NEO067,\n    case when NEO068 >=1 then 1 else 0 end NEO068,\n    case when NEO069 >=1 then 1 else 0 end NEO069,\n    case when NEO070 >=1 then 1 else 0 end NEO070,\n    case when NEO071 >=1 then 1 else 0 end NEO071,\n    case when NEO072 >=1 then 1 else 0 end NEO072,\n    case when NEO073 >=1 then 1 else 0 end NEO073,\n    case when NEO074 >=1 then 1 else 0 end NEO074,\n    case when NVS001 >=1 then 1 else 0 end NVS001,\n    case when NVS002 >=1 then 1 else 0 end NVS002,\n    case when NVS003 >=1 then 1 else 0 end NVS003,\n    case when NVS004 >=1 then 1 else 0 end NVS004,\n    case when NVS005 >=1 then 1 else 0 end NVS005,\n    case when NVS006 >=1 then 1 else 0 end NVS006,\n    case when NVS007 >=1 then 1 else 0 end NVS007,\n    case when NVS008 >=1 then 1 else 0 end NVS008,\n    case when NVS009 >=1 then 1 else 0 end NVS009,\n    case when NVS010 >=1 then 1 else 0 end NVS010,\n    case when NVS011 >=1 then 1 else 0 end NVS011,\n    case when NVS012 >=1 then 1 else 0 end NVS012,\n    case when NVS013 >=1 then 1 else 0 end NVS013,\n    case when NVS014 >=1 then 1 else 0 end NVS014,\n    case when NVS015 >=1 then 1 else 0 end NVS015,\n    case when NVS016 >=1 then 1 else 0 end NVS016,\n    case when NVS017 >=1 then 1 else 0 end NVS017,\n    case when NVS018 >=1 then 1 else 0 end NVS018,\n    case when NVS019 >=1 then 1 else 0 end NVS019,\n    case when NVS020 >=1 then 1 else 0 end NVS020,\n    case when NVS021 >=1 then 1 else 0 end NVS021,\n    case when NVS022 >=1 then 1 else 0 end NVS022,\n    case when PNL001 >=1 then 1 else 0 end PNL001,\n    case when PNL002 >=1 then 1 else 0 end PNL002,\n    case when PNL003 >=1 then 1 else 0 end PNL003,\n    case when PNL004 >=1 then 1 else 0 end PNL004,\n    case when PNL005 >=1 then 1 else 0 end PNL005,\n    case when PNL006 >=1 then 1 else 0 end PNL006,\n    case when PNL007 >=1 then 1 else 0 end PNL007,\n    case when PNL008 >=1 then 1 else 0 end PNL008,\n    case when PNL009 >=1 then 1 else 0 end PNL009,\n    case when PNL010 >=1 then 1 else 0 end PNL010,\n    case when PNL011 >=1 then 1 else 0 end PNL011,\n    case when PNL012 >=1 then 1 else 0 end PNL012,\n    case when PNL013 >=1 then 1 else 0 end PNL013,\n    case when PNL014 >=1 then 1 else 0 end PNL014,\n    case when PNL015 >=1 then 1 else 0 end PNL015,\n    case when PRG001 >=1 then 1 else 0 end PRG001,\n    case when PRG002 >=1 then 1 else 0 end PRG002,\n    case when PRG003 >=1 then 1 else 0 end PRG003,\n    case when PRG004 >=1 then 1 else 0 end PRG004,\n    case when PRG005 >=1 then 1 else 0 end PRG005,\n    case when PRG006 >=1 then 1 else 0 end PRG006,\n    case when PRG007 >=1 then 1 else 0 end PRG007,\n    case when PRG008 >=1 then 1 else 0 end PRG008,\n    case when PRG009 >=1 then 1 else 0 end PRG009,\n    case when PRG010 >=1 then 1 else 0 end PRG010,\n    case when PRG011 >=1 then 1 else 0 end PRG011,\n    case when PRG012 >=1 then 1 else 0 end PRG012,\n    case when PRG013 >=1 then 1 else 0 end PRG013,\n    case when PRG014 >=1 then 1 else 0 end PRG014,\n    case when PRG015 >=1 then 1 else 0 end PRG015,\n    case when PRG016 >=1 then 1 else 0 end PRG016,\n    case when PRG017 >=1 then 1 else 0 end PRG017,\n    case when PRG018 >=1 then 1 else 0 end PRG018,\n    case when PRG019 >=1 then 1 else 0 end PRG019,\n    case when PRG020 >=1 then 1 else 0 end PRG020,\n    case when PRG021 >=1 then 1 else 0 end PRG021,\n    case when PRG022 >=1 then 1 else 0 end PRG022,\n    case when PRG023 >=1 then 1 else 0 end PRG023,\n    case when PRG024 >=1 then 1 else 0 end PRG024,\n    case when PRG025 >=1 then 1 else 0 end PRG025,\n    case when PRG026 >=1 then 1 else 0 end PRG026,\n    case when PRG027 >=1 then 1 else 0 end PRG027,\n    case when PRG028 >=1 then 1 else 0 end PRG028,\n    case when PRG029 >=1 then 1 else 0 end PRG029,\n    case when PRG030 >=1 then 1 else 0 end PRG030,\n    case when RSP001 >=1 then 1 else 0 end RSP001,\n    case when RSP002 >=1 then 1 else 0 end RSP002,\n    case when RSP003 >=1 then 1 else 0 end RSP003,\n    case when RSP004 >=1 then 1 else 0 end RSP004,\n    case when RSP005 >=1 then 1 else 0 end RSP005,\n    case when RSP006 >=1 then 1 else 0 end RSP006,\n    case when RSP007 >=1 then 1 else 0 end RSP007,\n    case when RSP008 >=1 then 1 else 0 end RSP008,\n    case when RSP009 >=1 then 1 else 0 end RSP009,\n    case when RSP010 >=1 then 1 else 0 end RSP010,\n    case when RSP011 >=1 then 1 else 0 end RSP011,\n    case when RSP012 >=1 then 1 else 0 end RSP012,\n    case when RSP013 >=1 then 1 else 0 end RSP013,\n    case when RSP014 >=1 then 1 else 0 end RSP014,\n    case when RSP015 >=1 then 1 else 0 end RSP015,\n    case when RSP016 >=1 then 1 else 0 end RSP016,\n    case when RSP017 >=1 then 1 else 0 end RSP017,\n    case when SKN001 >=1 then 1 else 0 end SKN001,\n    case when SKN002 >=1 then 1 else 0 end SKN002,\n    case when SKN003 >=1 then 1 else 0 end SKN003,\n    case when SKN004 >=1 then 1 else 0 end SKN004,\n    case when SKN005 >=1 then 1 else 0 end SKN005,\n    case when SKN006 >=1 then 1 else 0 end SKN006,\n    case when SKN007 >=1 then 1 else 0 end SKN007,\n    case when SYM001 >=1 then 1 else 0 end SYM001,\n    case when SYM002 >=1 then 1 else 0 end SYM002,\n    case when SYM003 >=1 then 1 else 0 end SYM003,\n    case when SYM004 >=1 then 1 else 0 end SYM004,\n    case when SYM005 >=1 then 1 else 0 end SYM005,\n    case when SYM006 >=1 then 1 else 0 end SYM006,\n    case when SYM007 >=1 then 1 else 0 end SYM007,\n    case when SYM008 >=1 then 1 else 0 end SYM008,\n    case when SYM009 >=1 then 1 else 0 end SYM009,\n    case when SYM010 >=1 then 1 else 0 end SYM010,\n    case when SYM011 >=1 then 1 else 0 end SYM011,\n    case when SYM012 >=1 then 1 else 0 end SYM012,\n    case when SYM013 >=1 then 1 else 0 end SYM013,\n    case when SYM014 >=1 then 1 else 0 end SYM014,\n    case when SYM015 >=1 then 1 else 0 end SYM015,\n    case when SYM016 >=1 then 1 else 0 end SYM016,\n    case when SYM017 >=1 then 1 else 0 end SYM017,\n    case when XXX000 >=1 then 1 else 0 end XXX000,\n    case when XXX111 >=1 then 1 else 0 end XXX111,\n    case when NoDX1 >=1 then 1 else 0 end NoDX1,\n    case when InvlDX >=1 then 1 else 0 end InvlDX\nfrom ccsr\npivot\n(\n    sum(condition_count)\n    for ccsr in\n    (\n        'BLD001',\n        'BLD002',\n        'BLD003',\n        'BLD004',\n        'BLD005',\n        'BLD006',\n        'BLD007',\n        'BLD008',\n        'BLD009',\n        'BLD010',\n        'CIR001',\n        'CIR002',\n        'CIR003',\n        'CIR004',\n        'CIR005',\n        'CIR006',\n        'CIR007',\n        'CIR008',\n        'CIR009',\n        'CIR010',\n        'CIR011',\n        'CIR012',\n        'CIR013',\n        'CIR014',\n        'CIR015',\n        'CIR016',\n        'CIR017',\n        'CIR018',\n        'CIR019',\n        'CIR020',\n        'CIR021',\n        'CIR022',\n        'CIR023',\n        'CIR024',\n        'CIR025',\n        'CIR026',\n        'CIR027',\n        'CIR028',\n        'CIR029',\n        'CIR030',\n        'CIR031',\n        'CIR032',\n        'CIR033',\n        'CIR034',\n        'CIR035',\n        'CIR036',\n        'CIR037',\n        'CIR038',\n        'CIR039',\n        'DIG001',\n        'DIG002',\n        'DIG003',\n        'DIG004',\n        'DIG005',\n        'DIG006',\n        'DIG007',\n        'DIG008',\n        'DIG009',\n        'DIG010',\n        'DIG011',\n        'DIG012',\n        'DIG013',\n        'DIG014',\n        'DIG015',\n        'DIG016',\n        'DIG017',\n        'DIG018',\n        'DIG019',\n        'DIG020',\n        'DIG021',\n        'DIG022',\n        'DIG023',\n        'DIG024',\n        'DIG025',\n        'EAR001',\n        'EAR002',\n        'EAR003',\n        'EAR004',\n        'EAR005',\n        'EAR006',\n        'END001',\n        'END002',\n        'END003',\n        'END004',\n        'END005',\n        'END006',\n        'END007',\n        'END008',\n        'END009',\n        'END010',\n        'END011',\n        'END012',\n        'END013',\n        'END014',\n        'END015',\n        'END016',\n        'END017',\n        'EXT001',\n        'EXT002',\n        'EXT003',\n        'EXT004',\n        'EXT005',\n        'EXT006',\n        'EXT007',\n        'EXT008',\n        'EXT009',\n        'EXT010',\n        'EXT011',\n        'EXT012',\n        'EXT013',\n        'EXT014',\n        'EXT015',\n        'EXT016',\n        'EXT017',\n        'EXT018',\n        'EXT019',\n        'EXT020',\n        'EXT021',\n        'EXT022',\n        'EXT023',\n        'EXT024',\n        'EXT025',\n        'EXT026',\n        'EXT027',\n        'EXT028',\n        'EXT029',\n        'EXT030',\n        'EYE001',\n        'EYE002',\n        'EYE003',\n        'EYE004',\n        'EYE005',\n        'EYE006',\n        'EYE007',\n        'EYE008',\n        'EYE009',\n        'EYE010',\n        'EYE011',\n        'EYE012',\n        'FAC001',\n        'FAC002',\n        'FAC003',\n        'FAC004',\n        'FAC005',\n        'FAC006',\n        'FAC007',\n        'FAC008',\n        'FAC009',\n        'FAC010',\n        'FAC011',\n        'FAC012',\n        'FAC013',\n        'FAC014',\n        'FAC015',\n        'FAC016',\n        'FAC017',\n        'FAC018',\n        'FAC019',\n        'FAC020',\n        'FAC021',\n        'FAC022',\n        'FAC023',\n        'FAC024',\n        'FAC025',\n        'GEN001',\n        'GEN002',\n        'GEN003',\n        'GEN004',\n        'GEN005',\n        'GEN006',\n        'GEN007',\n        'GEN008',\n        'GEN009',\n        'GEN010',\n        'GEN011',\n        'GEN012',\n        'GEN013',\n        'GEN014',\n        'GEN015',\n        'GEN016',\n        'GEN017',\n        'GEN018',\n        'GEN019',\n        'GEN020',\n        'GEN021',\n        'GEN022',\n        'GEN023',\n        'GEN024',\n        'GEN025',\n        'GEN026',\n        'INF001',\n        'INF002',\n        'INF003',\n        'INF004',\n        'INF005',\n        'INF006',\n        'INF007',\n        'INF008',\n        'INF009',\n        'INF010',\n        'INF011',\n        'INF012',\n        'INJ001',\n        'INJ002',\n        'INJ003',\n        'INJ004',\n        'INJ005',\n        'INJ006',\n        'INJ007',\n        'INJ008',\n        'INJ009',\n        'INJ010',\n        'INJ011',\n        'INJ012',\n        'INJ013',\n        'INJ014',\n        'INJ015',\n        'INJ016',\n        'INJ017',\n        'INJ018',\n        'INJ019',\n        'INJ020',\n        'INJ021',\n        'INJ022',\n        'INJ023',\n        'INJ024',\n        'INJ025',\n        'INJ026',\n        'INJ027',\n        'INJ028',\n        'INJ029',\n        'INJ030',\n        'INJ031',\n        'INJ032',\n        'INJ033',\n        'INJ034',\n        'INJ035',\n        'INJ036',\n        'INJ037',\n        'INJ038',\n        'INJ039',\n        'INJ040',\n        'INJ041',\n        'INJ042',\n        'INJ043',\n        'INJ044',\n        'INJ045',\n        'INJ046',\n        'INJ047',\n        'INJ048',\n        'INJ049',\n        'INJ050',\n        'INJ051',\n        'INJ052',\n        'INJ053',\n        'INJ054',\n        'INJ055',\n        'INJ056',\n        'INJ057',\n        'INJ058',\n        'INJ059',\n        'INJ060',\n        'INJ061',\n        'INJ062',\n        'INJ063',\n        'INJ064',\n        'INJ065',\n        'INJ066',\n        'INJ067',\n        'INJ068',\n        'INJ069',\n        'INJ070',\n        'INJ071',\n        'INJ072',\n        'INJ073',\n        'INJ074',\n        'INJ075',\n        'INJ076',\n        'MAL001',\n        'MAL002',\n        'MAL003',\n        'MAL004',\n        'MAL005',\n        'MAL006',\n        'MAL007',\n        'MAL008',\n        'MAL009',\n        'MAL010',\n        'MBD001',\n        'MBD002',\n        'MBD003',\n        'MBD004',\n        'MBD005',\n        'MBD006',\n        'MBD007',\n        'MBD008',\n        'MBD009',\n        'MBD010',\n        'MBD011',\n        'MBD012',\n        'MBD013',\n        'MBD014',\n        'MBD017',\n        'MBD018',\n        'MBD019',\n        'MBD020',\n        'MBD021',\n        'MBD022',\n        'MBD023',\n        'MBD024',\n        'MBD025',\n        'MBD026',\n        'MBD027',\n        'MBD028',\n        'MBD029',\n        'MBD030',\n        'MBD031',\n        'MBD032',\n        'MBD033',\n        'MBD034',\n        'MUS001',\n        'MUS002',\n        'MUS003',\n        'MUS004',\n        'MUS005',\n        'MUS006',\n        'MUS007',\n        'MUS008',\n        'MUS009',\n        'MUS010',\n        'MUS011',\n        'MUS012',\n        'MUS013',\n        'MUS014',\n        'MUS015',\n        'MUS016',\n        'MUS017',\n        'MUS018',\n        'MUS019',\n        'MUS020',\n        'MUS021',\n        'MUS022',\n        'MUS023',\n        'MUS024',\n        'MUS025',\n        'MUS026',\n        'MUS027',\n        'MUS028',\n        'MUS029',\n        'MUS030',\n        'MUS031',\n        'MUS032',\n        'MUS033',\n        'MUS034',\n        'MUS035',\n        'MUS036',\n        'MUS037',\n        'MUS038',\n        'NEO001',\n        'NEO002',\n        'NEO003',\n        'NEO004',\n        'NEO005',\n        'NEO006',\n        'NEO007',\n        'NEO008',\n        'NEO009',\n        'NEO010',\n        'NEO011',\n        'NEO012',\n        'NEO013',\n        'NEO014',\n        'NEO015',\n        'NEO016',\n        'NEO017',\n        'NEO018',\n        'NEO019',\n        'NEO020',\n        'NEO021',\n        'NEO022',\n        'NEO023',\n        'NEO024',\n        'NEO025',\n        'NEO026',\n        'NEO027',\n        'NEO028',\n        'NEO029',\n        'NEO030',\n        'NEO031',\n        'NEO032',\n        'NEO033',\n        'NEO034',\n        'NEO035',\n        'NEO036',\n        'NEO037',\n        'NEO038',\n        'NEO039',\n        'NEO040',\n        'NEO041',\n        'NEO042',\n        'NEO043',\n        'NEO044',\n        'NEO045',\n        'NEO046',\n        'NEO047',\n        'NEO048',\n        'NEO049',\n        'NEO050',\n        'NEO051',\n        'NEO052',\n        'NEO053',\n        'NEO054',\n        'NEO055',\n        'NEO056',\n        'NEO057',\n        'NEO058',\n        'NEO059',\n        'NEO060',\n        'NEO061',\n        'NEO062',\n        'NEO063',\n        'NEO064',\n        'NEO065',\n        'NEO066',\n        'NEO067',\n        'NEO068',\n        'NEO069',\n        'NEO070',\n        'NEO071',\n        'NEO072',\n        'NEO073',\n        'NEO074',\n        'NVS001',\n        'NVS002',\n        'NVS003',\n        'NVS004',\n        'NVS005',\n        'NVS006',\n        'NVS007',\n        'NVS008',\n        'NVS009',\n        'NVS010',\n        'NVS011',\n        'NVS012',\n        'NVS013',\n        'NVS014',\n        'NVS015',\n        'NVS016',\n        'NVS017',\n        'NVS018',\n        'NVS019',\n        'NVS020',\n        'NVS021',\n        'NVS022',\n        'PNL001',\n        'PNL002',\n        'PNL003',\n        'PNL004',\n        'PNL005',\n        'PNL006',\n        'PNL007',\n        'PNL008',\n        'PNL009',\n        'PNL010',\n        'PNL011',\n        'PNL012',\n        'PNL013',\n        'PNL014',\n        'PNL015',\n        'PRG001',\n        'PRG002',\n        'PRG003',\n        'PRG004',\n        'PRG005',\n        'PRG006',\n        'PRG007',\n        'PRG008',\n        'PRG009',\n        'PRG010',\n        'PRG011',\n        'PRG012',\n        'PRG013',\n        'PRG014',\n        'PRG015',\n        'PRG016',\n        'PRG017',\n        'PRG018',\n        'PRG019',\n        'PRG020',\n        'PRG021',\n        'PRG022',\n        'PRG023',\n        'PRG024',\n        'PRG025',\n        'PRG026',\n        'PRG027',\n        'PRG028',\n        'PRG029',\n        'PRG030',\n        'RSP001',\n        'RSP002',\n        'RSP003',\n        'RSP004',\n        'RSP005',\n        'RSP006',\n        'RSP007',\n        'RSP008',\n        'RSP009',\n        'RSP010',\n        'RSP011',\n        'RSP012',\n        'RSP013',\n        'RSP014',\n        'RSP015',\n        'RSP016',\n        'RSP017',\n        'SKN001',\n        'SKN002',\n        'SKN003',\n        'SKN004',\n        'SKN005',\n        'SKN006',\n        'SKN007',\n        'SYM001',\n        'SYM002',\n        'SYM003',\n        'SYM004',\n        'SYM005',\n        'SYM006',\n        'SYM007',\n        'SYM008',\n        'SYM009',\n        'SYM010',\n        'SYM011',\n        'SYM012',\n        'SYM013',\n        'SYM014',\n        'SYM015',\n        'SYM016',\n        'SYM017',\n        'XXX000',\n        'XXX111',\n        'NoDX1',\n        'InvlDX'\n    )) \nas pvt (\n    encounter_id,\n    BLD001,\n    BLD002,\n    BLD003,\n    BLD004,\n    BLD005,\n    BLD006,\n    BLD007,\n    BLD008,\n    BLD009,\n    BLD010,\n    CIR001,\n    CIR002,\n    CIR003,\n    CIR004,\n    CIR005,\n    CIR006,\n    CIR007,\n    CIR008,\n    CIR009,\n    CIR010,\n    CIR011,\n    CIR012,\n    CIR013,\n    CIR014,\n    CIR015,\n    CIR016,\n    CIR017,\n    CIR018,\n    CIR019,\n    CIR020,\n    CIR021,\n    CIR022,\n    CIR023,\n    CIR024,\n    CIR025,\n    CIR026,\n    CIR027,\n    CIR028,\n    CIR029,\n    CIR030,\n    CIR031,\n    CIR032,\n    CIR033,\n    CIR034,\n    CIR035,\n    CIR036,\n    CIR037,\n    CIR038,\n    CIR039,\n    DIG001,\n    DIG002,\n    DIG003,\n    DIG004,\n    DIG005,\n    DIG006,\n    DIG007,\n    DIG008,\n    DIG009,\n    DIG010,\n    DIG011,\n    DIG012,\n    DIG013,\n    DIG014,\n    DIG015,\n    DIG016,\n    DIG017,\n    DIG018,\n    DIG019,\n    DIG020,\n    DIG021,\n    DIG022,\n    DIG023,\n    DIG024,\n    DIG025,\n    EAR001,\n    EAR002,\n    EAR003,\n    EAR004,\n    EAR005,\n    EAR006,\n    END001,\n    END002,\n    END003,\n    END004,\n    END005,\n    END006,\n    END007,\n    END008,\n    END009,\n    END010,\n    END011,\n    END012,\n    END013,\n    END014,\n    END015,\n    END016,\n    END017,\n    EXT001,\n    EXT002,\n    EXT003,\n    EXT004,\n    EXT005,\n    EXT006,\n    EXT007,\n    EXT008,\n    EXT009,\n    EXT010,\n    EXT011,\n    EXT012,\n    EXT013,\n    EXT014,\n    EXT015,\n    EXT016,\n    EXT017,\n    EXT018,\n    EXT019,\n    EXT020,\n    EXT021,\n    EXT022,\n    EXT023,\n    EXT024,\n    EXT025,\n    EXT026,\n    EXT027,\n    EXT028,\n    EXT029,\n    EXT030,\n    EYE001,\n    EYE002,\n    EYE003,\n    EYE004,\n    EYE005,\n    EYE006,\n    EYE007,\n    EYE008,\n    EYE009,\n    EYE010,\n    EYE011,\n    EYE012,\n    FAC001,\n    FAC002,\n    FAC003,\n    FAC004,\n    FAC005,\n    FAC006,\n    FAC007,\n    FAC008,\n    FAC009,\n    FAC010,\n    FAC011,\n    FAC012,\n    FAC013,\n    FAC014,\n    FAC015,\n    FAC016,\n    FAC017,\n    FAC018,\n    FAC019,\n    FAC020,\n    FAC021,\n    FAC022,\n    FAC023,\n    FAC024,\n    FAC025,\n    GEN001,\n    GEN002,\n    GEN003,\n    GEN004,\n    GEN005,\n    GEN006,\n    GEN007,\n    GEN008,\n    GEN009,\n    GEN010,\n    GEN011,\n    GEN012,\n    GEN013,\n    GEN014,\n    GEN015,\n    GEN016,\n    GEN017,\n    GEN018,\n    GEN019,\n    GEN020,\n    GEN021,\n    GEN022,\n    GEN023,\n    GEN024,\n    GEN025,\n    GEN026,\n    INF001,\n    INF002,\n    INF003,\n    INF004,\n    INF005,\n    INF006,\n    INF007,\n    INF008,\n    INF009,\n    INF010,\n    INF011,\n    INF012,\n    INJ001,\n    INJ002,\n    INJ003,\n    INJ004,\n    INJ005,\n    INJ006,\n    INJ007,\n    INJ008,\n    INJ009,\n    INJ010,\n    INJ011,\n    INJ012,\n    INJ013,\n    INJ014,\n    INJ015,\n    INJ016,\n    INJ017,\n    INJ018,\n    INJ019,\n    INJ020,\n    INJ021,\n    INJ022,\n    INJ023,\n    INJ024,\n    INJ025,\n    INJ026,\n    INJ027,\n    INJ028,\n    INJ029,\n    INJ030,\n    INJ031,\n    INJ032,\n    INJ033,\n    INJ034,\n    INJ035,\n    INJ036,\n    INJ037,\n    INJ038,\n    INJ039,\n    INJ040,\n    INJ041,\n    INJ042,\n    INJ043,\n    INJ044,\n    INJ045,\n    INJ046,\n    INJ047,\n    INJ048,\n    INJ049,\n    INJ050,\n    INJ051,\n    INJ052,\n    INJ053,\n    INJ054,\n    INJ055,\n    INJ056,\n    INJ057,\n    INJ058,\n    INJ059,\n    INJ060,\n    INJ061,\n    INJ062,\n    INJ063,\n    INJ064,\n    INJ065,\n    INJ066,\n    INJ067,\n    INJ068,\n    INJ069,\n    INJ070,\n    INJ071,\n    INJ072,\n    INJ073,\n    INJ074,\n    INJ075,\n    INJ076,\n    MAL001,\n    MAL002,\n    MAL003,\n    MAL004,\n    MAL005,\n    MAL006,\n    MAL007,\n    MAL008,\n    MAL009,\n    MAL010,\n    MBD001,\n    MBD002,\n    MBD003,\n    MBD004,\n    MBD005,\n    MBD006,\n    MBD007,\n    MBD008,\n    MBD009,\n    MBD010,\n    MBD011,\n    MBD012,\n    MBD013,\n    MBD014,\n    MBD017,\n    MBD018,\n    MBD019,\n    MBD020,\n    MBD021,\n    MBD022,\n    MBD023,\n    MBD024,\n    MBD025,\n    MBD026,\n    MBD027,\n    MBD028,\n    MBD029,\n    MBD030,\n    MBD031,\n    MBD032,\n    MBD033,\n    MBD034,\n    MUS001,\n    MUS002,\n    MUS003,\n    MUS004,\n    MUS005,\n    MUS006,\n    MUS007,\n    MUS008,\n    MUS009,\n    MUS010,\n    MUS011,\n    MUS012,\n    MUS013,\n    MUS014,\n    MUS015,\n    MUS016,\n    MUS017,\n    MUS018,\n    MUS019,\n    MUS020,\n    MUS021,\n    MUS022,\n    MUS023,\n    MUS024,\n    MUS025,\n    MUS026,\n    MUS027,\n    MUS028,\n    MUS029,\n    MUS030,\n    MUS031,\n    MUS032,\n    MUS033,\n    MUS034,\n    MUS035,\n    MUS036,\n    MUS037,\n    MUS038,\n    NEO001,\n    NEO002,\n    NEO003,\n    NEO004,\n    NEO005,\n    NEO006,\n    NEO007,\n    NEO008,\n    NEO009,\n    NEO010,\n    NEO011,\n    NEO012,\n    NEO013,\n    NEO014,\n    NEO015,\n    NEO016,\n    NEO017,\n    NEO018,\n    NEO019,\n    NEO020,\n    NEO021,\n    NEO022,\n    NEO023,\n    NEO024,\n    NEO025,\n    NEO026,\n    NEO027,\n    NEO028,\n    NEO029,\n    NEO030,\n    NEO031,\n    NEO032,\n    NEO033,\n    NEO034,\n    NEO035,\n    NEO036,\n    NEO037,\n    NEO038,\n    NEO039,\n    NEO040,\n    NEO041,\n    NEO042,\n    NEO043,\n    NEO044,\n    NEO045,\n    NEO046,\n    NEO047,\n    NEO048,\n    NEO049,\n    NEO050,\n    NEO051,\n    NEO052,\n    NEO053,\n    NEO054,\n    NEO055,\n    NEO056,\n    NEO057,\n    NEO058,\n    NEO059,\n    NEO060,\n    NEO061,\n    NEO062,\n    NEO063,\n    NEO064,\n    NEO065,\n    NEO066,\n    NEO067,\n    NEO068,\n    NEO069,\n    NEO070,\n    NEO071,\n    NEO072,\n    NEO073,\n    NEO074,\n    NVS001,\n    NVS002,\n    NVS003,\n    NVS004,\n    NVS005,\n    NVS006,\n    NVS007,\n    NVS008,\n    NVS009,\n    NVS010,\n    NVS011,\n    NVS012,\n    NVS013,\n    NVS014,\n    NVS015,\n    NVS016,\n    NVS017,\n    NVS018,\n    NVS019,\n    NVS020,\n    NVS021,\n    NVS022,\n    PNL001,\n    PNL002,\n    PNL003,\n    PNL004,\n    PNL005,\n    PNL006,\n    PNL007,\n    PNL008,\n    PNL009,\n    PNL010,\n    PNL011,\n    PNL012,\n    PNL013,\n    PNL014,\n    PNL015,\n    PRG001,\n    PRG002,\n    PRG003,\n    PRG004,\n    PRG005,\n    PRG006,\n    PRG007,\n    PRG008,\n    PRG009,\n    PRG010,\n    PRG011,\n    PRG012,\n    PRG013,\n    PRG014,\n    PRG015,\n    PRG016,\n    PRG017,\n    PRG018,\n    PRG019,\n    PRG020,\n    PRG021,\n    PRG022,\n    PRG023,\n    PRG024,\n    PRG025,\n    PRG026,\n    PRG027,\n    PRG028,\n    PRG029,\n    PRG030,\n    RSP001,\n    RSP002,\n    RSP003,\n    RSP004,\n    RSP005,\n    RSP006,\n    RSP007,\n    RSP008,\n    RSP009,\n    RSP010,\n    RSP011,\n    RSP012,\n    RSP013,\n    RSP014,\n    RSP015,\n    RSP016,\n    RSP017,\n    SKN001,\n    SKN002,\n    SKN003,\n    SKN004,\n    SKN005,\n    SKN006,\n    SKN007,\n    SYM001,\n    SYM002,\n    SYM003,\n    SYM004,\n    SYM005,\n    SYM006,\n    SYM007,\n    SYM008,\n    SYM009,\n    SYM010,\n    SYM011,\n    SYM012,\n    SYM013,\n    SYM014,\n    SYM015,\n    SYM016,\n    SYM017,\n    XXX000,\n    XXX111,\n    NoDX1,\n    InvlDX\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.ccsr_dx_wide"}, "model.tuva.patients": {"raw_sql": "{{ config(materialized='view', tags='core') }}\n\nselect\n    patient_id\n,   gender\n,   birth_date\n,   death_date\nfrom {{ var('src_patients') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.source.stg_patients"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["core"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "patients"], "unique_id": "model.tuva.patients", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "patients.sql", "original_file_path": "models/patients.sql", "name": "patients", "alias": "patients", "checksum": {"name": "sha256", "checksum": "5c1facb17eef10be8381821d66b5428bdc3b1765b78aa35c577dda025207f392"}, "tags": ["core"], "refs": [], "sources": [["source", "stg_patients"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/patients.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["core"]}, "created_at": 1643133870, "compiled_sql": "\n\nselect\n    patient_id\n,   gender\n,   birth_date\n,   death_date\nfrom desynpuf.staging.stg_patients", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.patients"}, "model.tuva.diagnoses": {"raw_sql": "{{ config(materialized='view', tags='core') }}\n\nselect\n    encounter_id\n,   code_type\n,   diagnosis_code\n,   diagnosis_rank\n,   present_on_admission_code   \nfrom {{ var('src_diagnoses') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.source.stg_diagnoses"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["core"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "diagnoses"], "unique_id": "model.tuva.diagnoses", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "diagnoses.sql", "original_file_path": "models/diagnoses.sql", "name": "diagnoses", "alias": "diagnoses", "checksum": {"name": "sha256", "checksum": "342bf04cbca6798a9475afe65550e7a943b6c9358c394178ac93452830a68361"}, "tags": ["core"], "refs": [], "sources": [["source", "stg_diagnoses"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/diagnoses.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["core"]}, "created_at": 1643133870, "compiled_sql": "\n\nselect\n    encounter_id\n,   code_type\n,   diagnosis_code\n,   diagnosis_rank\n,   present_on_admission_code   \nfrom desynpuf.staging.stg_diagnoses", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.diagnoses"}, "model.tuva.condition_logic": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom {{ ref('patients') }}  a\nleft join {{ ref('encounters') }}  b\n    on a.patient_id = b.patient_id    \nleft join {{ ref('diagnoses') }} c\n    on b.encounter_id = c.encounter_id\n)\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank in (1,2)\n    and b.condition = 'Acute Myocardial Infarction'\n    and b.inclusion_type = 'Include'\n\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank in (1,2)\n    and b.condition = 'Atrial Fibrillation'\n    and b.inclusion_type = 'Include'\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank = 1\n    and b.condition = 'Cataract'\n    and b.inclusion_type = 'Include'\n\nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank = 1\n    and b.condition = 'Glaucoma'\n    and b.inclusion_type = 'Include'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.patients", "model.tuva.encounters", "model.tuva.diagnoses", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "condition_logic"], "unique_id": "model.tuva.condition_logic", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "condition_logic.sql", "original_file_path": "models/condition_logic.sql", "name": "condition_logic", "alias": "condition_logic", "checksum": {"name": "sha256", "checksum": "4cfc43f286fd3b5d9ebdff689a12921a16eb867a174c5503d58540075e7add0d"}, "tags": ["chronic conditions"], "refs": [["patients"], ["encounters"], ["diagnoses"], ["chronic_conditions"], ["chronic_conditions"], ["chronic_conditions"], ["chronic_conditions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/condition_logic.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.encounter_start_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom tuva.core.patients  a\nleft join tuva.core.encounters  b\n    on a.patient_id = b.patient_id    \nleft join tuva.core.diagnoses c\n    on b.encounter_id = c.encounter_id\n)\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank in (1,2)\n    and b.condition = 'Acute Myocardial Infarction'\n    and b.inclusion_type = 'Include'\n\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank in (1,2)\n    and b.condition = 'Atrial Fibrillation'\n    and b.inclusion_type = 'Include'\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank = 1\n    and b.condition = 'Cataract'\n    and b.inclusion_type = 'Include'\n\nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.encounter_start_date\n,   condition_category\n,   condition\nfrom patients a\ninner join tuva.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank = 1\n    and b.condition = 'Glaucoma'\n    and b.inclusion_type = 'Include'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.condition_logic"}, "model.tuva.ccsr_dx_long": {"raw_sql": "{{ config(materialized='view', tags='ccsr') }}\n\nwith ccsr_union as (\nselect\n    encounter_id\n,   ccsr_1 as ccsr\nfrom {{ ref('diagnosis_to_ccsr') }}\nwhere ccsr_1 is not null\n\nunion \n\nselect\n    encounter_id\n,   ccsr_2 as ccsr\nfrom {{ ref('diagnosis_to_ccsr') }}\nwhere ccsr_2 is not null\n\nunion\n\nselect\n    encounter_id\n,   ccsr_3 as ccsr\nfrom {{ ref('diagnosis_to_ccsr') }}\nwhere ccsr_3 is not null\n\nunion \n\nselect\n    encounter_id\n,   ccsr_4 as ccsr\nfrom {{ ref('diagnosis_to_ccsr') }}\nwhere ccsr_4 is not null\n\nunion\n\nselect\n    encounter_id\n,   ccsr_5 as ccsr\nfrom {{ ref('diagnosis_to_ccsr') }}\nwhere ccsr_5 is not null\n\nunion \n\nselect\n    encounter_id\n,   ccsr_6 as ccsr\nfrom {{ ref('diagnosis_to_ccsr') }}\nwhere ccsr_6 is not null\n)\n\nselect \n    a.encounter_id\n,   a.ccsr\n,   d.ccsr_description\n,   case\n        when b.default_ccsr_inpatient is not null then 'Y'\n        else 'N'\n    end default_ccsr_inpatient_flag\n,   case\n        when c.default_ccsr_outpatient is not null then 'Y'\n        else 'N'\n    end default_ccsr_outpatient_flag\nfrom ccsr_union a\nleft join {{ ref('diagnosis_to_ccsr') }} b\n    on a.encounter_id = b.encounter_id\n    and a.ccsr = b.default_ccsr_inpatient\nleft join {{ ref('diagnosis_to_ccsr') }} c\n    on a.encounter_id = c.encounter_id\n    and a.ccsr = c.default_ccsr_outpatient\nleft join {{ ref('ccsr_descriptions') }} d\n    on a.ccsr = d.ccsr", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "seed.tuva.ccsr_descriptions"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["ccsr"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "ccsr_dx_long"], "unique_id": "model.tuva.ccsr_dx_long", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "ccsr_dx_long.sql", "original_file_path": "models/ccsr_dx_long.sql", "name": "ccsr_dx_long", "alias": "ccsr_dx_long", "checksum": {"name": "sha256", "checksum": "30bd7ff254fdb4723a87a12ec8157c2567025689cda1bc6386d175afd32f5c46"}, "tags": ["ccsr"], "refs": [["diagnosis_to_ccsr"], ["diagnosis_to_ccsr"], ["diagnosis_to_ccsr"], ["diagnosis_to_ccsr"], ["diagnosis_to_ccsr"], ["diagnosis_to_ccsr"], ["diagnosis_to_ccsr"], ["diagnosis_to_ccsr"], ["ccsr_descriptions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/ccsr_dx_long.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["ccsr"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith ccsr_union as (\nselect\n    encounter_id\n,   ccsr_1 as ccsr\nfrom tuva.core.diagnosis_to_ccsr\nwhere ccsr_1 is not null\n\nunion \n\nselect\n    encounter_id\n,   ccsr_2 as ccsr\nfrom tuva.core.diagnosis_to_ccsr\nwhere ccsr_2 is not null\n\nunion\n\nselect\n    encounter_id\n,   ccsr_3 as ccsr\nfrom tuva.core.diagnosis_to_ccsr\nwhere ccsr_3 is not null\n\nunion \n\nselect\n    encounter_id\n,   ccsr_4 as ccsr\nfrom tuva.core.diagnosis_to_ccsr\nwhere ccsr_4 is not null\n\nunion\n\nselect\n    encounter_id\n,   ccsr_5 as ccsr\nfrom tuva.core.diagnosis_to_ccsr\nwhere ccsr_5 is not null\n\nunion \n\nselect\n    encounter_id\n,   ccsr_6 as ccsr\nfrom tuva.core.diagnosis_to_ccsr\nwhere ccsr_6 is not null\n)\n\nselect \n    a.encounter_id\n,   a.ccsr\n,   d.ccsr_description\n,   case\n        when b.default_ccsr_inpatient is not null then 'Y'\n        else 'N'\n    end default_ccsr_inpatient_flag\n,   case\n        when c.default_ccsr_outpatient is not null then 'Y'\n        else 'N'\n    end default_ccsr_outpatient_flag\nfrom ccsr_union a\nleft join tuva.core.diagnosis_to_ccsr b\n    on a.encounter_id = b.encounter_id\n    and a.ccsr = b.default_ccsr_inpatient\nleft join tuva.core.diagnosis_to_ccsr c\n    on a.encounter_id = c.encounter_id\n    and a.ccsr = c.default_ccsr_outpatient\nleft join tuva.vocabulary.ccsr_descriptions d\n    on a.ccsr = d.ccsr", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.ccsr_dx_long"}, "model.tuva.encounters": {"raw_sql": "{{ config(materialized='view', tags='core') }}\n\nselect\n    encounter_id\n,   patient_id\n,   encounter_start_date\n,   encounter_end_date\n,   encounter_type\n,   admit_type_code\n,   admit_source_code\n,   discharge_status_code\n,   attending_provider_npi\n,   facility_npi\n,   drg\n,   paid_amount\nfrom {{ var('src_encounters') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.source.stg_encounters"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["core"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "encounters"], "unique_id": "model.tuva.encounters", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "encounters.sql", "original_file_path": "models/encounters.sql", "name": "encounters", "alias": "encounters", "checksum": {"name": "sha256", "checksum": "acfa758b9791972a485fed4e8b2b509e44b8ef574ad969147f54c732f2114287"}, "tags": ["core"], "refs": [], "sources": [["source", "stg_encounters"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/encounters.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["core"]}, "created_at": 1643133870, "compiled_sql": "\n\nselect\n    encounter_id\n,   patient_id\n,   encounter_start_date\n,   encounter_end_date\n,   encounter_type\n,   admit_type_code\n,   admit_source_code\n,   discharge_status_code\n,   attending_provider_npi\n,   facility_npi\n,   drg\n,   paid_amount\nfrom desynpuf.staging.stg_encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounters"}, "model.tuva.chronic_conditions_wide": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith conditions as (\nselect\n    a.patient_id\n,   b.condition_column_name\n,   1 as condition_count\nfrom {{ ref('chronic_conditions_long') }} a\ninner join (select distinct condition, condition_column_name from {{ ref('chronic_conditions') }}) b\n    on a.condition = b.condition\n)\n\nselect \n    patient_id,\n    case when acquired_hypothyroidism >= 1 then 1 else 0 end acquired_hypothyroidism,\n    case when acute_myocardial_infarction >= 1 then 1 else 0 end acute_myocardial_infarction,\n    case when adhd_conduct_disorders_and_hyperkinetic_syndrome >= 1 then 1 else 0 end adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    case when alcohol_use_disorders >= 1 then 1 else 0 end alcohol_use_disorders,\n    case when alzheimers_disease >= 1 then 1 else 0 end alzheimers_disease,\n    case when alzheimers_disease_and_related_disorders_or_senile_dementia >= 1 then 1 else 0 end alzheimers_disease_and_related_disorders_or_senile_dementia,\n    case when anemia >= 1 then 1 else 0 end anemia,\n    case when anxiety_disorders >= 1 then 1 else 0 end anxiety_disorders,\n    case when asthma >= 1 then 1 else 0 end asthma,\n    case when atrial_fibrillation >= 1 then 1 else 0 end atrial_fibrillation,\n    case when autism_spectrum_disorders >= 1 then 1 else 0 end autism_spectrum_disorders,\n    case when benign_prostatic_hyperplasia >= 1 then 1 else 0 end benign_prostatic_hyperplasia,\n    case when bipolar_disorder >= 1 then 1 else 0 end bipolar_disorder,\n    case when cataract >= 1 then 1 else 0 end cataract,\n    case when cerebral_palsy >= 1 then 1 else 0 end cerebral_palsy,\n    case when chronic_kidney_disease >= 1 then 1 else 0 end chronic_kidney_disease,\n    case when chronic_obstructive_pulmonary_disease_and_bronchiectasis >= 1 then 1 else 0 end chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    case when colorectal_cancer >= 1 then 1 else 0 end colorectal_cancer,\n    case when cystic_fibrosis_and_other_metabolic_developmental_disorders >= 1 then 1 else 0 end cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    case when depression >= 1 then 1 else 0 end depression,\n    case when diabetes >= 1 then 1 else 0 end diabetes,\n    case when drug_use_disorders >= 1 then 1 else 0 end drug_use_disorders,\n    case when endometrial_cancer >= 1 then 1 else 0 end endometrial_cancer,\n    case when epilepsy >= 1 then 1 else 0 end epilepsy,\n    case when female_male_breast_cancer >= 1 then 1 else 0 end female_male_breast_cancer,\n    case when fibromyalgia_and_chronic_pain_and_fatigue >= 1 then 1 else 0 end fibromyalgia_and_chronic_pain_and_fatigue,\n    case when glaucoma >= 1 then 1 else 0 end glaucoma,\n    case when heart_failure >= 1 then 1 else 0 end heart_failure,\n    case when hepatitis_a >= 1 then 1 else 0 end hepatitis_a,\n    case when hepatitis_b >= 1 then 1 else 0 end hepatitis_b,\n    case when hepatitis_c_acute >= 1 then 1 else 0 end hepatitis_c_acute,\n    case when hepatitis_c_chronic >= 1 then 1 else 0 end hepatitis_c_chronic,\n    case when hepatitis_c_unspecified >= 1 then 1 else 0 end hepatitis_c_unspecified,\n    case when hepatitis_d >= 1 then 1 else 0 end hepatitis_d,\n    case when hepatitis_e >= 1 then 1 else 0 end hepatitis_e,\n    case when hip_pelvic_fracture >= 1 then 1 else 0 end hip_pelvic_fracture,\n    case when human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids >= 1 then 1 else 0 end human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    case when hyperlipidemia >= 1 then 1 else 0 end hyperlipidemia,\n    case when hypertension >= 1 then 1 else 0 end hypertension,\n    case when intellectual_disabilities_and_related_conditions >= 1 then 1 else 0 end intellectual_disabilities_and_related_conditions,\n    case when ischemic_heart_disease >= 1 then 1 else 0 end ischemic_heart_disease,\n    case when learning_disabilities >= 1 then 1 else 0 end learning_disabilities,\n    case when leukemias_and_lymphomas >= 1 then 1 else 0 end leukemias_and_lymphomas,\n    case when liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis >= 1 then 1 else 0 end liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    case when lung_cancer >= 1 then 1 else 0 end lung_cancer,\n    case when migraine_and_chronic_headache >= 1 then 1 else 0 end migraine_and_chronic_headache,\n    case when mobility_impairments >= 1 then 1 else 0 end mobility_impairments,\n    case when multiple_sclerosis_and_transverse_myelitis >= 1 then 1 else 0 end multiple_sclerosis_and_transverse_myelitis,\n    case when muscular_dystrophy >= 1 then 1 else 0 end muscular_dystrophy,\n    case when obesity >= 1 then 1 else 0 end obesity,\n    case when opioid_use_disorder >= 1 then 1 else 0 end opioid_use_disorder,\n    case when osteoporosis >= 1 then 1 else 0 end osteoporosis,\n    case when other_developmental_delays >= 1 then 1 else 0 end other_developmental_delays,\n    case when peripheral_vascular_disease_pvd >= 1 then 1 else 0 end peripheral_vascular_disease_pvd,\n    case when personality_disorders >= 1 then 1 else 0 end personality_disorders,\n    case when post_traumatic_stress_disorder_ptsd >= 1 then 1 else 0 end post_traumatic_stress_disorder_ptsd,\n    case when pressure_and_chronic_ulcers >= 1 then 1 else 0 end pressure_and_chronic_ulcers,\n    case when prostate_cancer >= 1 then 1 else 0 end prostate_cancer,\n    case when rheumatoid_arthritis__osteoarthritis_ra_oa >= 1 then 1 else 0 end rheumatoid_arthritis__osteoarthritis_ra_oa,\n    case when schizophrenia >= 1 then 1 else 0 end schizophrenia,\n    case when schizophrenia_and_other_psychotic_disorders >= 1 then 1 else 0 end schizophrenia_and_other_psychotic_disorders,\n    case when sensory_blindness_and_visual_impairment >= 1 then 1 else 0 end sensory_blindness_and_visual_impairment,\n    case when sensory_deafness_and_hearing_impairment >= 1 then 1 else 0 end sensory_deafness_and_hearing_impairment,\n    case when sickle_cell_disease >= 1 then 1 else 0 end sickle_cell_disease,\n    case when spina_bifida_and_other_congenital_anomalies_of_the_nervous_system >= 1 then 1 else 0 end spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    case when spinal_cord_injury >= 1 then 1 else 0 end spinal_cord_injury,\n    case when stroke_transient_ischemic_attack >= 1 then 1 else 0 end stroke_transient_ischemic_attack,\n    case when tobacco_use >= 1 then 1 else 0 end tobacco_use,\n    case when traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage >= 1 then 1 else 0 end traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\nfrom conditions\npivot\n(\n    sum(condition_count)\n    for condition_column_name in\n    (\n        'acquired_hypothyroidism',\n        'acute_myocardial_infarction',\n        'adhd_conduct_disorders_and_hyperkinetic_syndrome',\n        'alcohol_use_disorders',\n        'alzheimers_disease',\n        'alzheimers_disease_and_related_disorders_or_senile_dementia',\n        'anemia',\n        'anxiety_disorders',\n        'asthma',\n        'atrial_fibrillation',\n        'autism_spectrum_disorders',\n        'benign_prostatic_hyperplasia',\n        'bipolar_disorder',\n        'cataract',\n        'cerebral_palsy',\n        'chronic_kidney_disease',\n        'chronic_obstructive_pulmonary_disease_and_bronchiectasis',\n        'colorectal_cancer',\n        'cystic_fibrosis_and_other_metabolic_developmental_disorders',\n        'depression',\n        'diabetes',\n        'drug_use_disorders',\n        'endometrial_cancer',\n        'epilepsy',\n        'female_male_breast_cancer',\n        'fibromyalgia_and_chronic_pain_and_fatigue',\n        'glaucoma',\n        'heart_failure',\n        'hepatitis_a',\n        'hepatitis_b',\n        'hepatitis_c_acute',\n        'hepatitis_c_chronic',\n        'hepatitis_c_unspecified',\n        'hepatitis_d',\n        'hepatitis_e',\n        'hip_pelvic_fracture',\n        'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids',\n        'hyperlipidemia',\n        'hypertension',\n        'intellectual_disabilities_and_related_conditions',\n        'ischemic_heart_disease',\n        'learning_disabilities',\n        'leukemias_and_lymphomas',\n        'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis',\n        'lung_cancer',\n        'migraine_and_chronic_headache',\n        'mobility_impairments',\n        'multiple_sclerosis_and_transverse_myelitis',\n        'muscular_dystrophy',\n        'obesity',\n        'opioid_use_disorder',\n        'osteoporosis',\n        'other_developmental_delays',\n        'peripheral_vascular_disease_pvd',\n        'personality_disorders',\n        'post_traumatic_stress_disorder_ptsd',\n        'pressure_and_chronic_ulcers',\n        'prostate_cancer',\n        'rheumatoid_arthritis__osteoarthritis_ra_oa',\n        'schizophrenia',\n        'schizophrenia_and_other_psychotic_disorders',\n        'sensory_blindness_and_visual_impairment',\n        'sensory_deafness_and_hearing_impairment',\n        'sickle_cell_disease',\n        'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system',\n        'spinal_cord_injury',\n        'stroke_transient_ischemic_attack',\n        'tobacco_use',\n        'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n    )) \nas pvt (\n    patient_id,\n    acquired_hypothyroidism,\n    acute_myocardial_infarction,\n    adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    alcohol_use_disorders,\n    alzheimers_disease,\n    alzheimers_disease_and_related_disorders_or_senile_dementia,\n    anemia,\n    anxiety_disorders,\n    asthma,\n    atrial_fibrillation,\n    autism_spectrum_disorders,\n    benign_prostatic_hyperplasia,\n    bipolar_disorder,\n    cataract,\n    cerebral_palsy,\n    chronic_kidney_disease,\n    chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    colorectal_cancer,\n    cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    depression,\n    diabetes,\n    drug_use_disorders,\n    endometrial_cancer,\n    epilepsy,\n    female_male_breast_cancer,\n    fibromyalgia_and_chronic_pain_and_fatigue,\n    glaucoma,\n    heart_failure,\n    hepatitis_a,\n    hepatitis_b,\n    hepatitis_c_acute,\n    hepatitis_c_chronic,\n    hepatitis_c_unspecified,\n    hepatitis_d,\n    hepatitis_e,\n    hip_pelvic_fracture,\n    human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    hyperlipidemia,\n    hypertension,\n    intellectual_disabilities_and_related_conditions,\n    ischemic_heart_disease,\n    learning_disabilities,\n    leukemias_and_lymphomas,\n    liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    lung_cancer,\n    migraine_and_chronic_headache,\n    mobility_impairments,\n    multiple_sclerosis_and_transverse_myelitis,\n    muscular_dystrophy,\n    obesity,\n    opioid_use_disorder,\n    osteoporosis,\n    other_developmental_delays,\n    peripheral_vascular_disease_pvd,\n    personality_disorders,\n    post_traumatic_stress_disorder_ptsd,\n    pressure_and_chronic_ulcers,\n    prostate_cancer,\n    rheumatoid_arthritis__osteoarthritis_ra_oa,\n    schizophrenia,\n    schizophrenia_and_other_psychotic_disorders,\n    sensory_blindness_and_visual_impairment,\n    sensory_deafness_and_hearing_impairment,\n    sickle_cell_disease,\n    spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    spinal_cord_injury,\n    stroke_transient_ischemic_attack,\n    tobacco_use,\n    traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.chronic_conditions_long", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "chronic_conditions_wide"], "unique_id": "model.tuva.chronic_conditions_wide", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions_wide.sql", "original_file_path": "models/chronic_conditions_wide.sql", "name": "chronic_conditions_wide", "alias": "chronic_conditions_wide", "checksum": {"name": "sha256", "checksum": "0fb6d16544efd3ef3bb72a60ed6b5ae4b63cd3f09d2ccdc6bfc16e3ad05e4151"}, "tags": ["chronic conditions"], "refs": [["chronic_conditions_long"], ["chronic_conditions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/chronic_conditions_wide.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1643133870, "compiled_sql": "\n\nwith conditions as (\nselect\n    a.patient_id\n,   b.condition_column_name\n,   1 as condition_count\nfrom tuva.core.chronic_conditions_long a\ninner join (select distinct condition, condition_column_name from tuva.vocabulary.chronic_conditions) b\n    on a.condition = b.condition\n)\n\nselect \n    patient_id,\n    case when acquired_hypothyroidism >= 1 then 1 else 0 end acquired_hypothyroidism,\n    case when acute_myocardial_infarction >= 1 then 1 else 0 end acute_myocardial_infarction,\n    case when adhd_conduct_disorders_and_hyperkinetic_syndrome >= 1 then 1 else 0 end adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    case when alcohol_use_disorders >= 1 then 1 else 0 end alcohol_use_disorders,\n    case when alzheimers_disease >= 1 then 1 else 0 end alzheimers_disease,\n    case when alzheimers_disease_and_related_disorders_or_senile_dementia >= 1 then 1 else 0 end alzheimers_disease_and_related_disorders_or_senile_dementia,\n    case when anemia >= 1 then 1 else 0 end anemia,\n    case when anxiety_disorders >= 1 then 1 else 0 end anxiety_disorders,\n    case when asthma >= 1 then 1 else 0 end asthma,\n    case when atrial_fibrillation >= 1 then 1 else 0 end atrial_fibrillation,\n    case when autism_spectrum_disorders >= 1 then 1 else 0 end autism_spectrum_disorders,\n    case when benign_prostatic_hyperplasia >= 1 then 1 else 0 end benign_prostatic_hyperplasia,\n    case when bipolar_disorder >= 1 then 1 else 0 end bipolar_disorder,\n    case when cataract >= 1 then 1 else 0 end cataract,\n    case when cerebral_palsy >= 1 then 1 else 0 end cerebral_palsy,\n    case when chronic_kidney_disease >= 1 then 1 else 0 end chronic_kidney_disease,\n    case when chronic_obstructive_pulmonary_disease_and_bronchiectasis >= 1 then 1 else 0 end chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    case when colorectal_cancer >= 1 then 1 else 0 end colorectal_cancer,\n    case when cystic_fibrosis_and_other_metabolic_developmental_disorders >= 1 then 1 else 0 end cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    case when depression >= 1 then 1 else 0 end depression,\n    case when diabetes >= 1 then 1 else 0 end diabetes,\n    case when drug_use_disorders >= 1 then 1 else 0 end drug_use_disorders,\n    case when endometrial_cancer >= 1 then 1 else 0 end endometrial_cancer,\n    case when epilepsy >= 1 then 1 else 0 end epilepsy,\n    case when female_male_breast_cancer >= 1 then 1 else 0 end female_male_breast_cancer,\n    case when fibromyalgia_and_chronic_pain_and_fatigue >= 1 then 1 else 0 end fibromyalgia_and_chronic_pain_and_fatigue,\n    case when glaucoma >= 1 then 1 else 0 end glaucoma,\n    case when heart_failure >= 1 then 1 else 0 end heart_failure,\n    case when hepatitis_a >= 1 then 1 else 0 end hepatitis_a,\n    case when hepatitis_b >= 1 then 1 else 0 end hepatitis_b,\n    case when hepatitis_c_acute >= 1 then 1 else 0 end hepatitis_c_acute,\n    case when hepatitis_c_chronic >= 1 then 1 else 0 end hepatitis_c_chronic,\n    case when hepatitis_c_unspecified >= 1 then 1 else 0 end hepatitis_c_unspecified,\n    case when hepatitis_d >= 1 then 1 else 0 end hepatitis_d,\n    case when hepatitis_e >= 1 then 1 else 0 end hepatitis_e,\n    case when hip_pelvic_fracture >= 1 then 1 else 0 end hip_pelvic_fracture,\n    case when human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids >= 1 then 1 else 0 end human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    case when hyperlipidemia >= 1 then 1 else 0 end hyperlipidemia,\n    case when hypertension >= 1 then 1 else 0 end hypertension,\n    case when intellectual_disabilities_and_related_conditions >= 1 then 1 else 0 end intellectual_disabilities_and_related_conditions,\n    case when ischemic_heart_disease >= 1 then 1 else 0 end ischemic_heart_disease,\n    case when learning_disabilities >= 1 then 1 else 0 end learning_disabilities,\n    case when leukemias_and_lymphomas >= 1 then 1 else 0 end leukemias_and_lymphomas,\n    case when liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis >= 1 then 1 else 0 end liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    case when lung_cancer >= 1 then 1 else 0 end lung_cancer,\n    case when migraine_and_chronic_headache >= 1 then 1 else 0 end migraine_and_chronic_headache,\n    case when mobility_impairments >= 1 then 1 else 0 end mobility_impairments,\n    case when multiple_sclerosis_and_transverse_myelitis >= 1 then 1 else 0 end multiple_sclerosis_and_transverse_myelitis,\n    case when muscular_dystrophy >= 1 then 1 else 0 end muscular_dystrophy,\n    case when obesity >= 1 then 1 else 0 end obesity,\n    case when opioid_use_disorder >= 1 then 1 else 0 end opioid_use_disorder,\n    case when osteoporosis >= 1 then 1 else 0 end osteoporosis,\n    case when other_developmental_delays >= 1 then 1 else 0 end other_developmental_delays,\n    case when peripheral_vascular_disease_pvd >= 1 then 1 else 0 end peripheral_vascular_disease_pvd,\n    case when personality_disorders >= 1 then 1 else 0 end personality_disorders,\n    case when post_traumatic_stress_disorder_ptsd >= 1 then 1 else 0 end post_traumatic_stress_disorder_ptsd,\n    case when pressure_and_chronic_ulcers >= 1 then 1 else 0 end pressure_and_chronic_ulcers,\n    case when prostate_cancer >= 1 then 1 else 0 end prostate_cancer,\n    case when rheumatoid_arthritis__osteoarthritis_ra_oa >= 1 then 1 else 0 end rheumatoid_arthritis__osteoarthritis_ra_oa,\n    case when schizophrenia >= 1 then 1 else 0 end schizophrenia,\n    case when schizophrenia_and_other_psychotic_disorders >= 1 then 1 else 0 end schizophrenia_and_other_psychotic_disorders,\n    case when sensory_blindness_and_visual_impairment >= 1 then 1 else 0 end sensory_blindness_and_visual_impairment,\n    case when sensory_deafness_and_hearing_impairment >= 1 then 1 else 0 end sensory_deafness_and_hearing_impairment,\n    case when sickle_cell_disease >= 1 then 1 else 0 end sickle_cell_disease,\n    case when spina_bifida_and_other_congenital_anomalies_of_the_nervous_system >= 1 then 1 else 0 end spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    case when spinal_cord_injury >= 1 then 1 else 0 end spinal_cord_injury,\n    case when stroke_transient_ischemic_attack >= 1 then 1 else 0 end stroke_transient_ischemic_attack,\n    case when tobacco_use >= 1 then 1 else 0 end tobacco_use,\n    case when traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage >= 1 then 1 else 0 end traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\nfrom conditions\npivot\n(\n    sum(condition_count)\n    for condition_column_name in\n    (\n        'acquired_hypothyroidism',\n        'acute_myocardial_infarction',\n        'adhd_conduct_disorders_and_hyperkinetic_syndrome',\n        'alcohol_use_disorders',\n        'alzheimers_disease',\n        'alzheimers_disease_and_related_disorders_or_senile_dementia',\n        'anemia',\n        'anxiety_disorders',\n        'asthma',\n        'atrial_fibrillation',\n        'autism_spectrum_disorders',\n        'benign_prostatic_hyperplasia',\n        'bipolar_disorder',\n        'cataract',\n        'cerebral_palsy',\n        'chronic_kidney_disease',\n        'chronic_obstructive_pulmonary_disease_and_bronchiectasis',\n        'colorectal_cancer',\n        'cystic_fibrosis_and_other_metabolic_developmental_disorders',\n        'depression',\n        'diabetes',\n        'drug_use_disorders',\n        'endometrial_cancer',\n        'epilepsy',\n        'female_male_breast_cancer',\n        'fibromyalgia_and_chronic_pain_and_fatigue',\n        'glaucoma',\n        'heart_failure',\n        'hepatitis_a',\n        'hepatitis_b',\n        'hepatitis_c_acute',\n        'hepatitis_c_chronic',\n        'hepatitis_c_unspecified',\n        'hepatitis_d',\n        'hepatitis_e',\n        'hip_pelvic_fracture',\n        'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids',\n        'hyperlipidemia',\n        'hypertension',\n        'intellectual_disabilities_and_related_conditions',\n        'ischemic_heart_disease',\n        'learning_disabilities',\n        'leukemias_and_lymphomas',\n        'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis',\n        'lung_cancer',\n        'migraine_and_chronic_headache',\n        'mobility_impairments',\n        'multiple_sclerosis_and_transverse_myelitis',\n        'muscular_dystrophy',\n        'obesity',\n        'opioid_use_disorder',\n        'osteoporosis',\n        'other_developmental_delays',\n        'peripheral_vascular_disease_pvd',\n        'personality_disorders',\n        'post_traumatic_stress_disorder_ptsd',\n        'pressure_and_chronic_ulcers',\n        'prostate_cancer',\n        'rheumatoid_arthritis__osteoarthritis_ra_oa',\n        'schizophrenia',\n        'schizophrenia_and_other_psychotic_disorders',\n        'sensory_blindness_and_visual_impairment',\n        'sensory_deafness_and_hearing_impairment',\n        'sickle_cell_disease',\n        'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system',\n        'spinal_cord_injury',\n        'stroke_transient_ischemic_attack',\n        'tobacco_use',\n        'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n    )) \nas pvt (\n    patient_id,\n    acquired_hypothyroidism,\n    acute_myocardial_infarction,\n    adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    alcohol_use_disorders,\n    alzheimers_disease,\n    alzheimers_disease_and_related_disorders_or_senile_dementia,\n    anemia,\n    anxiety_disorders,\n    asthma,\n    atrial_fibrillation,\n    autism_spectrum_disorders,\n    benign_prostatic_hyperplasia,\n    bipolar_disorder,\n    cataract,\n    cerebral_palsy,\n    chronic_kidney_disease,\n    chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    colorectal_cancer,\n    cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    depression,\n    diabetes,\n    drug_use_disorders,\n    endometrial_cancer,\n    epilepsy,\n    female_male_breast_cancer,\n    fibromyalgia_and_chronic_pain_and_fatigue,\n    glaucoma,\n    heart_failure,\n    hepatitis_a,\n    hepatitis_b,\n    hepatitis_c_acute,\n    hepatitis_c_chronic,\n    hepatitis_c_unspecified,\n    hepatitis_d,\n    hepatitis_e,\n    hip_pelvic_fracture,\n    human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    hyperlipidemia,\n    hypertension,\n    intellectual_disabilities_and_related_conditions,\n    ischemic_heart_disease,\n    learning_disabilities,\n    leukemias_and_lymphomas,\n    liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    lung_cancer,\n    migraine_and_chronic_headache,\n    mobility_impairments,\n    multiple_sclerosis_and_transverse_myelitis,\n    muscular_dystrophy,\n    obesity,\n    opioid_use_disorder,\n    osteoporosis,\n    other_developmental_delays,\n    peripheral_vascular_disease_pvd,\n    personality_disorders,\n    post_traumatic_stress_disorder_ptsd,\n    pressure_and_chronic_ulcers,\n    prostate_cancer,\n    rheumatoid_arthritis__osteoarthritis_ra_oa,\n    schizophrenia,\n    schizophrenia_and_other_psychotic_disorders,\n    sensory_blindness_and_visual_impairment,\n    sensory_deafness_and_hearing_impairment,\n    sickle_cell_disease,\n    spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    spinal_cord_injury,\n    stroke_transient_ischemic_attack,\n    tobacco_use,\n    traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.chronic_conditions_wide"}, "model.tuva.diagnosis_to_ccsr": {"raw_sql": "{{ config(materialized='view', tags='ccsr') }}\n\nselect \n    a.encounter_id\n,   case\n        when a.encounter_type = 'inpatient' then c.default_ccsr_inpatient\n        else null\n    end default_ccsr_inpatient\n,   case\n        when a.encounter_type = 'outpatient' then c.default_ccsr_outpatient\n        else null\n    end default_ccsr_outpatient\n,   c.ccsr_1\n,   c.ccsr_2\n,   c.ccsr_3\n,   c.ccsr_4\n,   c.ccsr_5\n,   c.ccsr_6\nfrom {{ ref('encounters') }} a\nleft join {{ ref('diagnoses') }} b\n    on a.encounter_id = b.encounter_id\nleft join {{ ref('ccsr_dx_mapping') }} c\n    on b.diagnosis_code = c.diagnosis_code", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.encounters", "model.tuva.diagnoses", "seed.tuva.ccsr_dx_mapping"]}, "config": {"enabled": true, "alias": null, "schema": "core", "database": "tuva", "tags": ["ccsr"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["tuva", "diagnosis_to_ccsr"], "unique_id": "model.tuva.diagnosis_to_ccsr", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "diagnosis_to_ccsr.sql", "original_file_path": "models/diagnosis_to_ccsr.sql", "name": "diagnosis_to_ccsr", "alias": "diagnosis_to_ccsr", "checksum": {"name": "sha256", "checksum": "9bcd7812fc61a82b599adb9a9f32c48a8c60732a2662e8bd276d2799e0ff380a"}, "tags": ["ccsr"], "refs": [["encounters"], ["diagnoses"], ["ccsr_dx_mapping"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/diagnosis_to_ccsr.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "core", "materialized": "view", "tags": ["ccsr"]}, "created_at": 1643133870, "compiled_sql": "\n\nselect \n    a.encounter_id\n,   case\n        when a.encounter_type = 'inpatient' then c.default_ccsr_inpatient\n        else null\n    end default_ccsr_inpatient\n,   case\n        when a.encounter_type = 'outpatient' then c.default_ccsr_outpatient\n        else null\n    end default_ccsr_outpatient\n,   c.ccsr_1\n,   c.ccsr_2\n,   c.ccsr_3\n,   c.ccsr_4\n,   c.ccsr_5\n,   c.ccsr_6\nfrom tuva.core.encounters a\nleft join tuva.core.diagnoses b\n    on a.encounter_id = b.encounter_id\nleft join tuva.vocabulary.ccsr_dx_mapping c\n    on b.diagnosis_code = c.diagnosis_code", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.diagnosis_to_ccsr"}, "seed.tuva.mdc": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "mdc"], "unique_id": "seed.tuva.mdc", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "mdc.csv", "original_file_path": "data/mdc.csv", "name": "mdc", "alias": "mdc", "checksum": {"name": "sha256", "checksum": "f2894760a9e657905196696810ecda22adbbefeac482ab15c35ce525b171be95"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.mdc"}, "seed.tuva.admit_type_codes": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "admit_type_codes"], "unique_id": "seed.tuva.admit_type_codes", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "admit_type_codes.csv", "original_file_path": "data/admit_type_codes.csv", "name": "admit_type_codes", "alias": "admit_type_codes", "checksum": {"name": "sha256", "checksum": "0663c477fd0080cc7cde3e26af2241d108e2e58453593425efb5fc2d69700471"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.admit_type_codes"}, "seed.tuva.member_months_lookup": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "member_months_lookup"], "unique_id": "seed.tuva.member_months_lookup", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "member_months_lookup.csv", "original_file_path": "data/member_months_lookup.csv", "name": "member_months_lookup", "alias": "member_months_lookup", "checksum": {"name": "sha256", "checksum": "a7bd657eeb124684b2fc9ec8ca4a5e6234402cdcaf40ddc872fdbbcaab744514"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.member_months_lookup"}, "seed.tuva.gender_codes": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "gender_codes"], "unique_id": "seed.tuva.gender_codes", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "gender_codes.csv", "original_file_path": "data/gender_codes.csv", "name": "gender_codes", "alias": "gender_codes", "checksum": {"name": "sha256", "checksum": "fc3c2ff7ddfe9c43a4d52c3205fc67e8a6e77737fc076727d4f9c56c550e6a08"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.gender_codes"}, "seed.tuva.ms_drg": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "ms_drg"], "unique_id": "seed.tuva.ms_drg", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "ms_drg.csv", "original_file_path": "data/ms_drg.csv", "name": "ms_drg", "alias": "ms_drg", "checksum": {"name": "sha256", "checksum": "76ed9d54b1bcbc62563308326928bb9a38ab312da6002cb9b1d73d6639200fa6"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.ms_drg"}, "seed.tuva.ccsr_dx_mapping": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "ccsr_dx_mapping"], "unique_id": "seed.tuva.ccsr_dx_mapping", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "ccsr_dx_mapping.csv", "original_file_path": "data/ccsr_dx_mapping.csv", "name": "ccsr_dx_mapping", "alias": "ccsr_dx_mapping", "checksum": {"name": "path", "checksum": "data/ccsr_dx_mapping.csv"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.ccsr_dx_mapping"}, "seed.tuva.admit_source_codes": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "admit_source_codes"], "unique_id": "seed.tuva.admit_source_codes", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "admit_source_codes.csv", "original_file_path": "data/admit_source_codes.csv", "name": "admit_source_codes", "alias": "admit_source_codes", "checksum": {"name": "sha256", "checksum": "451e63b69d41fe6dc9dac664196bd3eb1552a06d94d3496791ad804a077a9dc7"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.admit_source_codes"}, "seed.tuva.chronic_conditions": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "chronic_conditions"], "unique_id": "seed.tuva.chronic_conditions", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "chronic_conditions.csv", "original_file_path": "data/chronic_conditions.csv", "name": "chronic_conditions", "alias": "chronic_conditions", "checksum": {"name": "sha256", "checksum": "745da9257b114671d9b1a495f5122daa81daccec89b414a687c5fff79959e142"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.chronic_conditions"}, "seed.tuva.ccsr_descriptions": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "ccsr_descriptions"], "unique_id": "seed.tuva.ccsr_descriptions", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "ccsr_descriptions.csv", "original_file_path": "data/ccsr_descriptions.csv", "name": "ccsr_descriptions", "alias": "ccsr_descriptions", "checksum": {"name": "sha256", "checksum": "b06a1ff5199ae29085cd1911ea0fd1ae03a4424980de1e4af881285faca04c6c"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.ccsr_descriptions"}, "seed.tuva.place_of_service_codes": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "place_of_service_codes"], "unique_id": "seed.tuva.place_of_service_codes", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "place_of_service_codes.csv", "original_file_path": "data/place_of_service_codes.csv", "name": "place_of_service_codes", "alias": "place_of_service_codes", "checksum": {"name": "sha256", "checksum": "21266edcf6c3cb8ed4f96ad58bdbe4e5fdbf0d5e87f4093c93a240ad027a70eb"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.place_of_service_codes"}, "seed.tuva.discharge_status_codes": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "discharge_status_codes"], "unique_id": "seed.tuva.discharge_status_codes", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "discharge_status_codes.csv", "original_file_path": "data/discharge_status_codes.csv", "name": "discharge_status_codes", "alias": "discharge_status_codes", "checksum": {"name": "sha256", "checksum": "6a1b7eb047dc0b609b2dd895d39c04f20f1214be17064e07acebcca84b07ca97"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.discharge_status_codes"}, "seed.tuva.revenue_codes": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "revenue_codes"], "unique_id": "seed.tuva.revenue_codes", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "revenue_codes.csv", "original_file_path": "data/revenue_codes.csv", "name": "revenue_codes", "alias": "revenue_codes", "checksum": {"name": "sha256", "checksum": "f808e624564dd19c7c03093a976474e54d00fbd7f1d9ef45c142a74aa15fba15"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.revenue_codes"}, "seed.tuva.icd_10_cm": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "tuva", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "vocabulary", "fqn": ["tuva", "icd_10_cm"], "unique_id": "seed.tuva.icd_10_cm", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "icd_10_cm.csv", "original_file_path": "data/icd_10_cm.csv", "name": "icd_10_cm", "alias": "icd_10_cm", "checksum": {"name": "path", "checksum": "data/icd_10_cm.csv"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1643133870, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.vocabulary.icd_10_cm"}}, "sources": {"source.tuva.source.stg_patients": {"fqn": ["tuva", "source", "stg_patients"], "database": "desynpuf", "schema": "staging", "unique_id": "source.tuva.source.stg_patients", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "stg_patients", "source_name": "source", "source_description": "", "loader": "", "identifier": "stg_patients", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Staging table to prepare data to feed core.patient.", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Indicates whether the patient's gender is male, female, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Patient's date of birth (YYYY-MM-DD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "Patient's date of death, if applicable (YYYY-MM-DD).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "desynpuf.staging.stg_patients", "created_at": 1643133870}, "source.tuva.source.stg_coverage": {"fqn": ["tuva", "source", "stg_coverage"], "database": "desynpuf", "schema": "staging", "unique_id": "source.tuva.source.stg_coverage", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "stg_coverage", "source_name": "source", "source_description": "", "loader": "", "identifier": "stg_coverage", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Staging table to prepare data to feed core.coverage.", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coverage_start_date": {"name": "coverage_start_date", "description": "The date when the patient's health insurance coverage began (YYYY-MM-DD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coverage_end_date": {"name": "coverage_end_date", "description": "The date when the patient's health insurance coverage ended (YYYY-MM-DD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_payer": {"name": "primary_payer", "description": "The patient's primary insurance provider corresponding to coverage start and end dates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer_type": {"name": "payer_type", "description": "Indicates the type of payer (Medicare, Medicaid, or Commercial).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "desynpuf.staging.stg_coverage", "created_at": 1643133870}, "source.tuva.source.stg_encounters": {"fqn": ["tuva", "source", "stg_encounters"], "database": "desynpuf", "schema": "staging", "unique_id": "source.tuva.source.stg_encounters", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "stg_encounters", "source_name": "source", "source_description": "", "loader": "", "identifier": "stg_encounters", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Staging table to prepare data to feed core.encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique ID for each healthcare visit (i.e. encounter) in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique ID for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The date when the encounter began (YYYY-MM-DD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_end_date": {"name": "encounter_end_date", "description": "The date when the encounter ended (YYYY-MM-DD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_type": {"name": "encounter_type", "description": "The type of visit (e.g. acute inpatient, outpatient, ED, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "Indicates the type of admission for acute inpatient visits (e.g. emergency, urgent, elective, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "Indicates the source of admission for acute inpatient visits (e.g. ED, clinic referral, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "Indicates where the patient was discharged to for acute inpatient visits (e.g. home, SNF, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attending_provider_npi": {"name": "attending_provider_npi", "description": "NPI for the attending provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "NPI for the facility.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drg": {"name": "drg", "description": "The MS-DRG code for acute inpatient visits.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "Total amount paid by insurance for the visit.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "desynpuf.staging.stg_encounters", "created_at": 1643133870}, "source.tuva.source.stg_diagnoses": {"fqn": ["tuva", "source", "stg_diagnoses"], "database": "desynpuf", "schema": "staging", "unique_id": "source.tuva.source.stg_diagnoses", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "stg_diagnoses", "source_name": "source", "source_description": "", "loader": "", "identifier": "stg_diagnoses", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Staging table to prepare data to feed core.diagnoses.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique ID for each healthcare visit (i.e. encounter) in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code_type": {"name": "code_type", "description": "Indicates the type of diagnosis code (e.g. ICD-10-CM, SNOMED-CT).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code": {"name": "diagnosis_code", "description": "The actual diagnosis code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_rank": {"name": "diagnosis_rank", "description": "The rank of the diagnosis code on the encounter (primary=1).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "present_on_admission_code": {"name": "present_on_admission_code", "description": "Indicates whether the diagnosis was present on admission or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "desynpuf.staging.stg_diagnoses", "created_at": 1643133870}, "source.tuva.source.stg_procedures": {"fqn": ["tuva", "source", "stg_procedures"], "database": "desynpuf", "schema": "staging", "unique_id": "source.tuva.source.stg_procedures", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "stg_procedures", "source_name": "source", "source_description": "", "loader": "", "identifier": "stg_procedures", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Staging table to prepare data to feed core.procedures.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique ID for each healthcare visit (i.e. encounter) in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code_type": {"name": "code_type", "description": "Indicates the type of procedure code (e.g. ICD-10-CM, SNOMED-CT, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code": {"name": "procedure_code", "description": "The actual procedure code.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "desynpuf.staging.stg_procedures", "created_at": 1643133870}}, "macros": {"macro.tuva.generate_schema_name": {"unique_id": "macro.tuva.generate_schema_name", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/tuva", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1643133870}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.tuva.benign_prostatic_hyperplasia": ["model.tuva.diagnoses", "model.tuva.encounters", "model.tuva.patients", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"], "model.tuva.chronic_conditions_long": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack"], "model.tuva.stroke_transient_ischemic_attack": ["model.tuva.diagnoses", "model.tuva.encounters", "model.tuva.patients", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"], "model.tuva.procedures": ["source.tuva.source.stg_procedures"], "model.tuva.coverage": ["source.tuva.source.stg_coverage"], "model.tuva.hospital_wide_readmission": ["model.tuva.encounters", "model.tuva.encounters"], "model.tuva.condition_logic_simple": ["model.tuva.diagnoses", "model.tuva.encounters", "model.tuva.patients", "model.tuva.procedures", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"], "model.tuva.member_months": ["model.tuva.coverage", "seed.tuva.member_months_lookup"], "model.tuva.ccsr_dx_wide": ["model.tuva.ccsr_dx_long"], "model.tuva.patients": ["source.tuva.source.stg_patients"], "model.tuva.diagnoses": ["source.tuva.source.stg_diagnoses"], "model.tuva.condition_logic": ["model.tuva.diagnoses", "model.tuva.encounters", "model.tuva.patients", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"], "model.tuva.ccsr_dx_long": ["model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "model.tuva.diagnosis_to_ccsr", "seed.tuva.ccsr_descriptions"], "model.tuva.encounters": ["source.tuva.source.stg_encounters"], "model.tuva.chronic_conditions_wide": ["model.tuva.chronic_conditions_long", "seed.tuva.chronic_conditions"], "model.tuva.diagnosis_to_ccsr": ["model.tuva.diagnoses", "model.tuva.encounters", "seed.tuva.ccsr_dx_mapping"], "seed.tuva.mdc": [], "seed.tuva.admit_type_codes": [], "seed.tuva.member_months_lookup": [], "seed.tuva.gender_codes": [], "seed.tuva.ms_drg": [], "seed.tuva.ccsr_dx_mapping": [], "seed.tuva.admit_source_codes": [], "seed.tuva.chronic_conditions": [], "seed.tuva.ccsr_descriptions": [], "seed.tuva.place_of_service_codes": [], "seed.tuva.discharge_status_codes": [], "seed.tuva.revenue_codes": [], "seed.tuva.icd_10_cm": [], "source.tuva.source.stg_patients": [], "source.tuva.source.stg_coverage": [], "source.tuva.source.stg_encounters": [], "source.tuva.source.stg_diagnoses": [], "source.tuva.source.stg_procedures": []}, "child_map": {"model.tuva.benign_prostatic_hyperplasia": ["model.tuva.chronic_conditions_long"], "model.tuva.chronic_conditions_long": ["model.tuva.chronic_conditions_wide"], "model.tuva.stroke_transient_ischemic_attack": ["model.tuva.chronic_conditions_long"], "model.tuva.procedures": ["model.tuva.condition_logic_simple"], "model.tuva.coverage": ["model.tuva.member_months"], "model.tuva.hospital_wide_readmission": [], "model.tuva.condition_logic_simple": ["model.tuva.chronic_conditions_long"], "model.tuva.member_months": [], "model.tuva.ccsr_dx_wide": [], "model.tuva.patients": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack"], "model.tuva.diagnoses": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.diagnosis_to_ccsr", "model.tuva.stroke_transient_ischemic_attack"], "model.tuva.condition_logic": ["model.tuva.chronic_conditions_long"], "model.tuva.ccsr_dx_long": ["model.tuva.ccsr_dx_wide"], "model.tuva.encounters": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.diagnosis_to_ccsr", "model.tuva.hospital_wide_readmission", "model.tuva.hospital_wide_readmission", "model.tuva.stroke_transient_ischemic_attack"], "model.tuva.chronic_conditions_wide": [], "model.tuva.diagnosis_to_ccsr": ["model.tuva.ccsr_dx_long", "model.tuva.ccsr_dx_long", "model.tuva.ccsr_dx_long", "model.tuva.ccsr_dx_long", "model.tuva.ccsr_dx_long", "model.tuva.ccsr_dx_long", "model.tuva.ccsr_dx_long", "model.tuva.ccsr_dx_long"], "seed.tuva.mdc": [], "seed.tuva.admit_type_codes": [], "seed.tuva.member_months_lookup": ["model.tuva.member_months"], "seed.tuva.gender_codes": [], "seed.tuva.ms_drg": [], "seed.tuva.ccsr_dx_mapping": ["model.tuva.diagnosis_to_ccsr"], "seed.tuva.admit_source_codes": [], "seed.tuva.chronic_conditions": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.benign_prostatic_hyperplasia", "model.tuva.chronic_conditions_wide", "model.tuva.condition_logic", "model.tuva.condition_logic", "model.tuva.condition_logic", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack", "model.tuva.stroke_transient_ischemic_attack"], "seed.tuva.ccsr_descriptions": ["model.tuva.ccsr_dx_long"], "seed.tuva.place_of_service_codes": [], "seed.tuva.discharge_status_codes": [], "seed.tuva.revenue_codes": [], "seed.tuva.icd_10_cm": [], "source.tuva.source.stg_patients": ["model.tuva.patients"], "source.tuva.source.stg_coverage": ["model.tuva.coverage"], "source.tuva.source.stg_encounters": ["model.tuva.encounters"], "source.tuva.source.stg_diagnoses": ["model.tuva.diagnoses"], "source.tuva.source.stg_procedures": ["model.tuva.procedures"]}}