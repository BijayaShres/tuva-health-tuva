{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json", "dbt_version": "0.21.1", "generated_at": "2022-02-23T22:46:03.575690Z", "invocation_id": "617e2371-ead8-49a4-b6a0-9bcf21242f54", "env": {}, "project_id": "85619522d85846bb28197090548d8185", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.tuva.benign_prostatic_hyperplasia": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.admit_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom {{ var('src_patient') }}  a\nleft join {{ var('src_encounter') }}  b\n    on a.patient_id = b.patient_id    \nleft join {{ var('src_diagnosis') }} c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_patient", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_diagnosis", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "benign_prostatic_hyperplasia"], "unique_id": "model.tuva.benign_prostatic_hyperplasia", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "benign_prostatic_hyperplasia.sql", "original_file_path": "models/benign_prostatic_hyperplasia.sql", "name": "benign_prostatic_hyperplasia", "alias": "benign_prostatic_hyperplasia", "checksum": {"name": "sha256", "checksum": "37371f3e7ccdc41984e4a2d0600408ead32bc938a6cfc4890ec91733543f9f6b"}, "tags": ["chronic conditions"], "refs": [["chronic_conditions"], ["chronic_conditions"]], "sources": [["hcup", "stg_patient"], ["hcup", "stg_encounter"], ["hcup", "stg_diagnosis"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/benign_prostatic_hyperplasia.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1645656363, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.admit_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom hcup.staging.stg_patient  a\nleft join hcup.staging.stg_encounter  b\n    on a.patient_id = b.patient_id    \nleft join hcup.staging.stg_diagnosis c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join hcup.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join hcup.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Benign Prostatic Hyperplasia'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.benign_prostatic_hyperplasia"}, "model.tuva.chronic_conditions_long": {"raw_sql": "{{ config(materialized='table', tags='chronic conditions') }}\n\nwith condition_union as (\nselect *\nfrom {{ ref('condition_logic_simple') }}\n\nunion\n\nselect *\nfrom {{ ref('condition_logic') }}\n\nunion\n\nselect *\nfrom {{ ref('benign_prostatic_hyperplasia') }}\n\nunion\n\nselect *\nfrom {{ ref('stroke_transient_ischemic_attack') }}\n)\n\nselect\n    patient_id\n,   condition_category\n,   condition\n,   min(admit_date) as condition_onset_date\n,   max(admit_date) as condition_recent_date\n,   count(encounter_id) as condition_count\nfrom condition_union\ngroup by 1,2,3", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.condition_logic_simple", "model.tuva.condition_logic", "model.tuva.benign_prostatic_hyperplasia", "model.tuva.stroke_transient_ischemic_attack"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": ["chronic conditions"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "chronic_conditions_long"], "unique_id": "model.tuva.chronic_conditions_long", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "chronic_conditions_long.sql", "original_file_path": "models/chronic_conditions_long.sql", "name": "chronic_conditions_long", "alias": "chronic_conditions_long", "checksum": {"name": "sha256", "checksum": "e129bb73054b1af1f8ed5efb5305c2f839060c6a0267e9f3842c1fcced808c83"}, "tags": ["chronic conditions"], "refs": [["condition_logic_simple"], ["condition_logic"], ["benign_prostatic_hyperplasia"], ["stroke_transient_ischemic_attack"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/chronic_conditions_long.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "table", "tags": ["chronic conditions"]}, "created_at": 1645656364, "compiled_sql": "\n\nwith condition_union as (\nselect *\nfrom hcup.tuva.condition_logic_simple\n\nunion\n\nselect *\nfrom hcup.tuva.condition_logic\n\nunion\n\nselect *\nfrom hcup.tuva.benign_prostatic_hyperplasia\n\nunion\n\nselect *\nfrom hcup.tuva.stroke_transient_ischemic_attack\n)\n\nselect\n    patient_id\n,   condition_category\n,   condition\n,   min(admit_date) as condition_onset_date\n,   max(admit_date) as condition_recent_date\n,   count(encounter_id) as condition_count\nfrom condition_union\ngroup by 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.chronic_conditions_long"}, "model.tuva.encounter_specialty_cohorts": {"raw_sql": "-- Here we list the specialty cohort for each encounter that has\n-- an associated specialty cohort.\n-- There are 5 possible specialty cohorts:\n--      [1] Medicine\n--      [2] Surgery/Gynecology\n--      [3] Cardiology\n--      [4] Cardiovascular\n--      [5] Neurology\n-- An encounter that has an ICD-10-PCS procedure code or a\n-- CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\n-- we then check to see if they are in one of the other 4 cohorts.\n\n\n{{ config(materialized='view') }}\n\n\n\n-- All encounter_ids that have an ICD-10-PCS procedure code\n-- or a CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort\nwith surgery_gynecology as (\nselect distinct encounter_id\nfrom {{ ref('procedure_ccs') }}\nwhere\n    procedure_code in (select distinct icd_10_pcs\n                       from {{ ref('surgery_gynecology_cohort') }} )\n    or\n    ccs in (select distinct ccs\n            from {{ ref('specialty_cohorts') }}\n\t    where specialty_cohort = 'Surgery/Gynecology' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Medicine' cohort\nmedicine as (\nselect distinct encounter_id\nfrom {{ ref('diagnosis_ccs') }}\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs in (select distinct ccs\n            from {{ ref('specialty_cohorts') }}\n\t    where specialty_cohort = 'Medicine' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiorespiratory' cohort\ncardiorespiratory as (\nselect distinct encounter_id\nfrom {{ ref('diagnosis_ccs') }}\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs in (select distinct ccs\n            from {{ ref('specialty_cohorts') }}\n\t    where specialty_cohort = 'Cardiorespiratory' )    \n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiovascular' cohort\ncardiovascular as (\nselect distinct encounter_id\nfrom {{ ref('diagnosis_ccs') }}\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs in (select distinct ccs\n            from {{ ref('specialty_cohorts') }}\n\t    where specialty_cohort = 'Cardiovascular' )    \n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Neurology' cohort\nneurology as (\nselect distinct encounter_id\nfrom {{ ref('diagnosis_ccs') }}\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs in (select distinct ccs\n            from {{ ref('specialty_cohorts') }}\n\t    where specialty_cohort = 'Neurology' )    \n),\n\n\n-- All encounter_ids that have an associated cohort listed\n-- with their corresponding cohort\nall_cohorts as (\nselect encounter_id, 'Surgery/Gynecology' as specialty_cohort\nfrom surgery_gynecology\nunion\nselect encounter_id, 'Medicine' as specialty_cohort\nfrom medicine\nunion\nselect encounter_id, 'Cardiorespiratory' as specialty_cohort\nfrom cardiorespiratory\nunion\nselect encounter_id, 'Cardiovascular' as specialty_cohort\nfrom cardiovascular\nunion\nselect encounter_id, 'Neurology' as specialty_cohort\nfrom neurology\n),\n\n\n-- Assign a specialty cohort to ALL encounters. If an encounter\n-- does not belong to any specialty cohort according to the\n-- rules above, then it is assigned to the 'Medicine' cohort\n-- by default\ncohorts_for_all_encounters as (\nselect\n    aa.encounter_id,\n    case\n        when bb.specialty_cohort is not null then bb.specialty_cohort\n\telse 'Medicine'\n    end as specialty_cohort\nfrom {{ var('src_encounter') }} aa\n     left join all_cohorts bb on aa.encounter_id = bb.encounter_id\n)\n\n\n\nselect *\nfrom cohorts_for_all_encounters", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_encounter", "model.tuva.procedure_ccs", "seed.tuva.surgery_gynecology_cohort", "seed.tuva.specialty_cohorts", "model.tuva.diagnosis_ccs", "seed.tuva.specialty_cohorts", "model.tuva.diagnosis_ccs", "seed.tuva.specialty_cohorts", "model.tuva.diagnosis_ccs", "seed.tuva.specialty_cohorts", "model.tuva.diagnosis_ccs", "seed.tuva.specialty_cohorts"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "encounter_specialty_cohorts"], "unique_id": "model.tuva.encounter_specialty_cohorts", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "encounter_specialty_cohorts.sql", "original_file_path": "models/encounter_specialty_cohorts.sql", "name": "encounter_specialty_cohorts", "alias": "encounter_specialty_cohorts", "checksum": {"name": "sha256", "checksum": "4e9ffc1b9993ead13b14c0376b7fb5dccb813d5cb1e07dbef682bf3bd2415008"}, "tags": [], "refs": [["procedure_ccs"], ["surgery_gynecology_cohort"], ["specialty_cohorts"], ["diagnosis_ccs"], ["specialty_cohorts"], ["diagnosis_ccs"], ["specialty_cohorts"], ["diagnosis_ccs"], ["specialty_cohorts"], ["diagnosis_ccs"], ["specialty_cohorts"]], "sources": [["hcup", "stg_encounter"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/encounter_specialty_cohorts.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we list the specialty cohort for each encounter that has\n-- an associated specialty cohort.\n-- There are 5 possible specialty cohorts:\n--      [1] Medicine\n--      [2] Surgery/Gynecology\n--      [3] Cardiology\n--      [4] Cardiovascular\n--      [5] Neurology\n-- An encounter that has an ICD-10-PCS procedure code or a\n-- CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\n-- we then check to see if they are in one of the other 4 cohorts.\n\n\n\n\n\n\n-- All encounter_ids that have an ICD-10-PCS procedure code\n-- or a CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort\nwith surgery_gynecology as (\nselect distinct encounter_id\nfrom hcup.tuva.procedure_ccs\nwhere\n    procedure_code in (select distinct icd_10_pcs\n                       from hcup.vocabulary.surgery_gynecology_cohort )\n    or\n    ccs in (select distinct ccs\n            from hcup.vocabulary.specialty_cohorts\n\t    where specialty_cohort = 'Surgery/Gynecology' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Medicine' cohort\nmedicine as (\nselect distinct encounter_id\nfrom hcup.tuva.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs in (select distinct ccs\n            from hcup.vocabulary.specialty_cohorts\n\t    where specialty_cohort = 'Medicine' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiorespiratory' cohort\ncardiorespiratory as (\nselect distinct encounter_id\nfrom hcup.tuva.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs in (select distinct ccs\n            from hcup.vocabulary.specialty_cohorts\n\t    where specialty_cohort = 'Cardiorespiratory' )    \n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiovascular' cohort\ncardiovascular as (\nselect distinct encounter_id\nfrom hcup.tuva.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs in (select distinct ccs\n            from hcup.vocabulary.specialty_cohorts\n\t    where specialty_cohort = 'Cardiovascular' )    \n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Neurology' cohort\nneurology as (\nselect distinct encounter_id\nfrom hcup.tuva.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs in (select distinct ccs\n            from hcup.vocabulary.specialty_cohorts\n\t    where specialty_cohort = 'Neurology' )    \n),\n\n\n-- All encounter_ids that have an associated cohort listed\n-- with their corresponding cohort\nall_cohorts as (\nselect encounter_id, 'Surgery/Gynecology' as specialty_cohort\nfrom surgery_gynecology\nunion\nselect encounter_id, 'Medicine' as specialty_cohort\nfrom medicine\nunion\nselect encounter_id, 'Cardiorespiratory' as specialty_cohort\nfrom cardiorespiratory\nunion\nselect encounter_id, 'Cardiovascular' as specialty_cohort\nfrom cardiovascular\nunion\nselect encounter_id, 'Neurology' as specialty_cohort\nfrom neurology\n),\n\n\n-- Assign a specialty cohort to ALL encounters. If an encounter\n-- does not belong to any specialty cohort according to the\n-- rules above, then it is assigned to the 'Medicine' cohort\n-- by default\ncohorts_for_all_encounters as (\nselect\n    aa.encounter_id,\n    case\n        when bb.specialty_cohort is not null then bb.specialty_cohort\n\telse 'Medicine'\n    end as specialty_cohort\nfrom hcup.staging.stg_encounter aa\n     left join all_cohorts bb on aa.encounter_id = bb.encounter_id\n)\n\n\n\nselect *\nfrom cohorts_for_all_encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.encounter_specialty_cohorts"}, "model.tuva.stroke_transient_ischemic_attack": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.admit_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom {{ var('src_patient') }} a\nleft join {{ var('src_encounter') }}  b\n    on a.patient_id = b.patient_id    \nleft join {{ var('src_diagnosis') }} c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_patient", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_diagnosis", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "stroke_transient_ischemic_attack"], "unique_id": "model.tuva.stroke_transient_ischemic_attack", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "stroke_transient_ischemic_attack.sql", "original_file_path": "models/stroke_transient_ischemic_attack.sql", "name": "stroke_transient_ischemic_attack", "alias": "stroke_transient_ischemic_attack", "checksum": {"name": "sha256", "checksum": "f82c26166c25025385b77700d82aee1891eab3b7d1109025b508607eb859442a"}, "tags": ["chronic conditions"], "refs": [["chronic_conditions"], ["chronic_conditions"]], "sources": [["hcup", "stg_patient"], ["hcup", "stg_encounter"], ["hcup", "stg_diagnosis"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/stroke_transient_ischemic_attack.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1645656364, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.admit_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom hcup.staging.stg_patient a\nleft join hcup.staging.stg_encounter  b\n    on a.patient_id = b.patient_id    \nleft join hcup.staging.stg_diagnosis c\n    on b.encounter_id = c.encounter_id\n)\n\n, inclusion_diagnoses as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join hcup.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Include'\n)\n\n, exclusion_encounters as (\nselect distinct\n   a.encounter_id\nfrom patients a\ninner join hcup.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and b.condition = 'Stroke/Transient Ischemic Attack'\n    and b.inclusion_type = 'Exclude'\n)\n\nselect distinct\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   a.condition_category\n,   a.condition\nfrom inclusion_diagnoses a\nleft join exclusion_encounters b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.stroke_transient_ischemic_attack"}, "model.tuva.readmissions_summary": {"raw_sql": "{{ config(materialized='table') }}\n\n\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_status_code,\n    aa.facility,\n    aa.ms_drg,\n    aa.index_admission_flag,\n    aa.planned_flag,\n    aa.specialty_cohort,\n    aa.died_flag,\n    aa.diagnosis_ccs,\n    aa.disqualified_encounter,\n    aa.missing_admit_date,\n    aa.missing_discharge_date,\n    aa.admit_after_discharge,\n    aa.missing_discharge_status_code,\n    aa.invalid_discharge_status_code,\n    aa.missing_primary_diagnosis,\n    aa.invalid_primary_diagnosis_code,\n    aa.no_diagnosis_ccs,\n    aa.multiple_primary_diagnoses,\n    bb.days_to_readmit,\n    bb.readmit_30_flag,\n    bb.unplanned_readmit_30_flag\n    \nfrom {{ ref('encounters_augmented') }} aa\n     left join {{ ref('readmission_calculation') }} bb\n     on aa.encounter_id = bb.encounter_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.encounters_augmented", "model.tuva.readmission_calculation"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "readmissions_summary"], "unique_id": "model.tuva.readmissions_summary", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "readmissions_summary.sql", "original_file_path": "models/readmissions_summary.sql", "name": "readmissions_summary", "alias": "readmissions_summary", "checksum": {"name": "sha256", "checksum": "787bd90703771735ac026623d20d6008b193c8c7a1a5fc6d66b9eb844ce1c36c"}, "tags": [], "refs": [["encounters_augmented"], ["readmission_calculation"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/readmissions_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "table"}, "created_at": 1645656364, "compiled_sql": "\n\n\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_status_code,\n    aa.facility,\n    aa.ms_drg,\n    aa.index_admission_flag,\n    aa.planned_flag,\n    aa.specialty_cohort,\n    aa.died_flag,\n    aa.diagnosis_ccs,\n    aa.disqualified_encounter,\n    aa.missing_admit_date,\n    aa.missing_discharge_date,\n    aa.admit_after_discharge,\n    aa.missing_discharge_status_code,\n    aa.invalid_discharge_status_code,\n    aa.missing_primary_diagnosis,\n    aa.invalid_primary_diagnosis_code,\n    aa.no_diagnosis_ccs,\n    aa.multiple_primary_diagnoses,\n    bb.days_to_readmit,\n    bb.readmit_30_flag,\n    bb.unplanned_readmit_30_flag\n    \nfrom hcup.tuva.encounters_augmented aa\n     left join hcup.tuva.readmission_calculation bb\n     on aa.encounter_id = bb.encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.readmissions_summary"}, "model.tuva.died": {"raw_sql": "-- Here we list encounter_ids where the patient died\n-- (discharge_status_code = 20)\n\n\n{{ config(materialized='view') }}\n\n\n\n\n-- Encounters where patient died\nwith died as (\nselect encounter_id\nfrom {{ var('src_encounter') }}\nwhere discharge_status_code = '20'   \n)\n\n\nselect *\nfrom died", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_encounter"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "died"], "unique_id": "model.tuva.died", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "died.sql", "original_file_path": "models/died.sql", "name": "died", "alias": "died", "checksum": {"name": "sha256", "checksum": "eea79524e25ad5d119c0b29bea80c46c704554119bd489ea98fe49e2892ea4fa"}, "tags": [], "refs": [], "sources": [["hcup", "stg_encounter"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/died.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we list encounter_ids where the patient died\n-- (discharge_status_code = 20)\n\n\n\n\n\n\n\n-- Encounters where patient died\nwith died as (\nselect encounter_id\nfrom hcup.staging.stg_encounter\nwhere discharge_status_code = '20'   \n)\n\n\nselect *\nfrom died", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.died"}, "model.tuva.readmission_calculation": {"raw_sql": "-- Here calculate days to readmission for encounters\n-- that had a readmission and create readmission flags\n\n\n{{ config(materialized='view') }}\n\n\n\n\n-- We create the encounter_sequence integer count\n-- which keeps track of what number of encounter each\n-- encounter is for a given patient\nwith encounter_sequence as (\nselect\n    patient_id,\n    encounter_id,\n    admit_date,\n    discharge_date,\n    case\n        when encounter_id in (select * from {{ ref('planned_encounters') }} )\n\t    then 1\n\telse 0\n    end as planned_flag,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_sequence\nfrom {{ ref('encounters_augmented') }}\nwhere disqualified_encounter = 0\n),\n\n\nreadmission_calc as (\nselect\n    aa.patient_id,\n    aa.encounter_id,\n    bb.planned_flag as planned_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit\nfrom\n    encounter_sequence aa\n    left join encounter_sequence bb\n    on aa.patient_id = bb.patient_id\n    and aa.encounter_sequence + 1 = bb.encounter_sequence\n),\n\n\nreadmit_flags as (\nselect\n    encounter_id,\n    days_to_readmit,\n    case\n        when days_to_readmit <= 30 then 1\n\telse 0\n    end as readmit_30_flag,\n    case\n        when (days_to_readmit <= 30) and (planned_readmission_flag = 0) then 1\n\telse 0\n    end as unplanned_readmit_30_flag    \nfrom readmission_calc    \n)\n\n\n\n\nselect *\nfrom readmit_flags", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.planned_encounters", "model.tuva.encounters_augmented"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "readmission_calculation"], "unique_id": "model.tuva.readmission_calculation", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "readmission_calculation.sql", "original_file_path": "models/readmission_calculation.sql", "name": "readmission_calculation", "alias": "readmission_calculation", "checksum": {"name": "sha256", "checksum": "8688e1815aad2a79c83141caee156cfdd6d0060bf5f56c03883b724eef964d6a"}, "tags": [], "refs": [["planned_encounters"], ["encounters_augmented"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/readmission_calculation.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here calculate days to readmission for encounters\n-- that had a readmission and create readmission flags\n\n\n\n\n\n\n\n-- We create the encounter_sequence integer count\n-- which keeps track of what number of encounter each\n-- encounter is for a given patient\nwith encounter_sequence as (\nselect\n    patient_id,\n    encounter_id,\n    admit_date,\n    discharge_date,\n    case\n        when encounter_id in (select * from hcup.tuva.planned_encounters )\n\t    then 1\n\telse 0\n    end as planned_flag,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_sequence\nfrom hcup.tuva.encounters_augmented\nwhere disqualified_encounter = 0\n),\n\n\nreadmission_calc as (\nselect\n    aa.patient_id,\n    aa.encounter_id,\n    bb.planned_flag as planned_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit\nfrom\n    encounter_sequence aa\n    left join encounter_sequence bb\n    on aa.patient_id = bb.patient_id\n    and aa.encounter_sequence + 1 = bb.encounter_sequence\n),\n\n\nreadmit_flags as (\nselect\n    encounter_id,\n    days_to_readmit,\n    case\n        when days_to_readmit <= 30 then 1\n\telse 0\n    end as readmit_30_flag,\n    case\n        when (days_to_readmit <= 30) and (planned_readmission_flag = 0) then 1\n\telse 0\n    end as unplanned_readmit_30_flag    \nfrom readmission_calc    \n)\n\n\n\n\nselect *\nfrom readmit_flags", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.readmission_calculation"}, "model.tuva.planned_encounters": {"raw_sql": "-- Here we list encounter_ids for all encounters\n-- that are planned.\n\n\n{{ config(materialized='view') }}\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a procedure category\n-- that is only present for planned encounters \nwith always_planned_px as (\nselect distinct encounter_id\nfrom {{ ref('procedure_ccs') }}\nwhere ccs in (select distinct ccs_procedure_category\n              from {{ ref('always_planned_px') }} )\n),\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a diagnosis category\n-- that is only present for planned encounters\nalways_planned_dx as (\nselect distinct encounter_id\nfrom {{ ref('diagnosis_ccs') }}\nwhere ccs in (select distinct ccs_diagnosis_category\n              from {{ ref('always_planned_dx') }} )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on one of their CCS procedure categories.\n-- For these encounters to actually be planned, we must further\n-- require that they are not acute encounters\npotentially_planned_px_ccs as (\nselect distinct encounter_id\nfrom {{ ref('procedure_ccs') }}\nwhere ccs in (select distinct ccs_procedure_category\n              from {{ ref('potentially_planned_px_ccs') }} )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on their ICD-10-PCS procedure codes.\n-- For these encounters to actually be planned, we must further\n-- require that they are not acute encounters\npotentially_planned_px_icd10pcs as (\nselect distinct encounter_id\nfrom {{ ref('procedure_ccs') }}\nwhere procedure_code in (select distinct icd10pcs\n                         from {{ ref('potentially_planned_px_icd10pcs') }} )\n),\n\n\n-- encounter_ids for encounters that are acute based\n-- on their primary diagnosis code or their CCS diagnosis category\nacute_encounters as (\nselect distinct encounter_id\nfrom {{ ref('diagnosis_ccs') }}\nwhere diagnosis_code in (select distinct icd10cm\n                         from {{ ref('acute_diagnoses_icd10cm') }})\n      or\n      ccs in (select distinct ccs_diagnosis_category\n              from {{ ref('acute_diagnoses_ccs') }})\n),\n\n\n-- encounter_ids for encounters that are:\n--           [1] potentially planned, based on one of\n--               their CCS procedure categories or\n--           [2] acute, based on their primary diagnosis code\n--               or their CCS diagnosis category\n-- These encounters are therefore confirmed to be planned\npotentially_planned_that_are_actually_planned as (\nselect *\nfrom potentially_planned_px_ccs\nwhere encounter_id not in (select * from acute_encounters)\nunion\nselect *\nfrom potentially_planned_px_icd10pcs\nwhere encounter_id not in (select * from acute_encounters)\n),\n\n\n-- Aggregate of all encounter_ids for planned encounters\nall_planned_encounters as (\nselect * from always_planned_px\nunion\nselect * from always_planned_dx\nunion\nselect * from potentially_planned_that_are_actually_planned\n)\n\n\n\n\nselect *\nfrom all_planned_encounters", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.procedure_ccs", "seed.tuva.always_planned_px", "model.tuva.diagnosis_ccs", "seed.tuva.always_planned_dx", "model.tuva.procedure_ccs", "seed.tuva.potentially_planned_px_ccs", "model.tuva.procedure_ccs", "seed.tuva.potentially_planned_px_icd10pcs", "model.tuva.diagnosis_ccs", "seed.tuva.acute_diagnoses_icd10cm", "seed.tuva.acute_diagnoses_ccs"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "planned_encounters"], "unique_id": "model.tuva.planned_encounters", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "planned_encounters.sql", "original_file_path": "models/planned_encounters.sql", "name": "planned_encounters", "alias": "planned_encounters", "checksum": {"name": "sha256", "checksum": "5d0f1cf78f54bc7ce7d92016d9b530e0458a8743a7e0e5ca033536cdcd50d9c9"}, "tags": [], "refs": [["procedure_ccs"], ["always_planned_px"], ["diagnosis_ccs"], ["always_planned_dx"], ["procedure_ccs"], ["potentially_planned_px_ccs"], ["procedure_ccs"], ["potentially_planned_px_icd10pcs"], ["diagnosis_ccs"], ["acute_diagnoses_icd10cm"], ["acute_diagnoses_ccs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/planned_encounters.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we list encounter_ids for all encounters\n-- that are planned.\n\n\n\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a procedure category\n-- that is only present for planned encounters \nwith always_planned_px as (\nselect distinct encounter_id\nfrom hcup.tuva.procedure_ccs\nwhere ccs in (select distinct ccs_procedure_category\n              from hcup.vocabulary.always_planned_px )\n),\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a diagnosis category\n-- that is only present for planned encounters\nalways_planned_dx as (\nselect distinct encounter_id\nfrom hcup.tuva.diagnosis_ccs\nwhere ccs in (select distinct ccs_diagnosis_category\n              from hcup.vocabulary.always_planned_dx )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on one of their CCS procedure categories.\n-- For these encounters to actually be planned, we must further\n-- require that they are not acute encounters\npotentially_planned_px_ccs as (\nselect distinct encounter_id\nfrom hcup.tuva.procedure_ccs\nwhere ccs in (select distinct ccs_procedure_category\n              from hcup.vocabulary.potentially_planned_px_ccs )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on their ICD-10-PCS procedure codes.\n-- For these encounters to actually be planned, we must further\n-- require that they are not acute encounters\npotentially_planned_px_icd10pcs as (\nselect distinct encounter_id\nfrom hcup.tuva.procedure_ccs\nwhere procedure_code in (select distinct icd10pcs\n                         from hcup.vocabulary.potentially_planned_px_icd10pcs )\n),\n\n\n-- encounter_ids for encounters that are acute based\n-- on their primary diagnosis code or their CCS diagnosis category\nacute_encounters as (\nselect distinct encounter_id\nfrom hcup.tuva.diagnosis_ccs\nwhere diagnosis_code in (select distinct icd10cm\n                         from hcup.vocabulary.acute_diagnoses_icd10cm)\n      or\n      ccs in (select distinct ccs_diagnosis_category\n              from hcup.vocabulary.acute_diagnoses_ccs)\n),\n\n\n-- encounter_ids for encounters that are:\n--           [1] potentially planned, based on one of\n--               their CCS procedure categories or\n--           [2] acute, based on their primary diagnosis code\n--               or their CCS diagnosis category\n-- These encounters are therefore confirmed to be planned\npotentially_planned_that_are_actually_planned as (\nselect *\nfrom potentially_planned_px_ccs\nwhere encounter_id not in (select * from acute_encounters)\nunion\nselect *\nfrom potentially_planned_px_icd10pcs\nwhere encounter_id not in (select * from acute_encounters)\n),\n\n\n-- Aggregate of all encounter_ids for planned encounters\nall_planned_encounters as (\nselect * from always_planned_px\nunion\nselect * from always_planned_dx\nunion\nselect * from potentially_planned_that_are_actually_planned\n)\n\n\n\n\nselect *\nfrom all_planned_encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.planned_encounters"}, "model.tuva.condition_logic_simple": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.admit_date\nfrom {{ var('src_patient') }} a\nleft join {{ var('src_encounter') }}  b\n    on a.patient_id = b.patient_id    \n)\n\n, diagnosis_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join {{ var('src_diagnosis') }}  b\n    on a.encounter_id = b.encounter_id\ninner join {{ ref('chronic_conditions') }}  c\n    on b.diagnosis_code = c.code\n    and c.code_type = 'ICD-10-CM'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n    \n, procedure_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join {{ var('src_procedure') }} b\n    on a.encounter_id = b.encounter_id\ninner join {{ ref('chronic_conditions') }}  c\n    on b.procedure_code = c.code\n    and c.code_type = 'ICD-10-PCS'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n\nselect *\nfrom diagnosis_conditions\n\nunion\n\nselect *\nfrom procedure_conditions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_patient", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_diagnosis", "source.tuva.hcup.stg_procedure", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "condition_logic_simple"], "unique_id": "model.tuva.condition_logic_simple", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "condition_logic_simple.sql", "original_file_path": "models/condition_logic_simple.sql", "name": "condition_logic_simple", "alias": "condition_logic_simple", "checksum": {"name": "sha256", "checksum": "5c860ba18629b79fdee68732db82bee9bfdb883aea6d2f5de9feaed5e64feb43"}, "tags": ["chronic conditions"], "refs": [["chronic_conditions"], ["chronic_conditions"]], "sources": [["hcup", "stg_patient"], ["hcup", "stg_encounter"], ["hcup", "stg_diagnosis"], ["hcup", "stg_procedure"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/condition_logic_simple.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1645656364, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.admit_date\nfrom hcup.staging.stg_patient a\nleft join hcup.staging.stg_encounter  b\n    on a.patient_id = b.patient_id    \n)\n\n, diagnosis_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join hcup.staging.stg_diagnosis  b\n    on a.encounter_id = b.encounter_id\ninner join hcup.vocabulary.chronic_conditions  c\n    on b.diagnosis_code = c.code\n    and c.code_type = 'ICD-10-CM'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n    \n, procedure_conditions as (\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   c.condition_category\n,   c.condition\nfrom patients a\ninner join hcup.staging.stg_procedure b\n    on a.encounter_id = b.encounter_id\ninner join hcup.vocabulary.chronic_conditions  c\n    on b.procedure_code = c.code\n    and c.code_type = 'ICD-10-PCS'\n    and c.inclusion_type = 'Include'\n    and c.additional_logic = 'None'\n)\n\nselect *\nfrom diagnosis_conditions\n\nunion\n\nselect *\nfrom procedure_conditions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.condition_logic_simple"}, "model.tuva.index_time_requirements": {"raw_sql": "-- Here we list encounter_ids that meet\n-- the time requirement to be an index admission:\n-- The discharge date must be at least 30 days\n-- earlier than the last discharge date available\n-- in the dataset.\n\n\n{{ config(materialized='view') }}\n\n\n\n\nselect encounter_id\nfrom {{ var('src_encounter') }}\nwhere discharge_date <= (select max(discharge_date)\n                         from {{ var('src_encounter') }} ) - 30", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_encounter"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "index_time_requirements"], "unique_id": "model.tuva.index_time_requirements", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "index_time_requirements.sql", "original_file_path": "models/index_time_requirements.sql", "name": "index_time_requirements", "alias": "index_time_requirements", "checksum": {"name": "sha256", "checksum": "5ef011bf01d99cffa72c18d8a626a58662e5d4aef3cb6fb96d6724bf56f40bb4"}, "tags": [], "refs": [], "sources": [["hcup", "stg_encounter"], ["hcup", "stg_encounter"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/index_time_requirements.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we list encounter_ids that meet\n-- the time requirement to be an index admission:\n-- The discharge date must be at least 30 days\n-- earlier than the last discharge date available\n-- in the dataset.\n\n\n\n\n\n\n\nselect encounter_id\nfrom hcup.staging.stg_encounter\nwhere discharge_date <= (select max(discharge_date)\n                         from hcup.staging.stg_encounter ) - 30", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.index_time_requirements"}, "model.tuva.encounters_augmented": {"raw_sql": "-- Here we list all encounters from the input stg_encounter\n-- table and we augment them with a few extra fields\n-- that give information relevant for index admissions\n\n\n{{ config(materialized='table') }}\n\n\n\nwith encounters_augmented as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_status_code,\n    aa.facility,\n    aa.ms_drg,\n    case\n        when\n\t    aa.encounter_id in (select *\n\t                        from {{ ref('index_admissions') }} )\n\tthen 1\n\telse 0\n    end as index_admission_flag,\n    case\n        when\n\t    aa.encounter_id in (select *\n\t                        from {{ ref('planned_encounters') }} )\n\tthen 1\n\telse 0\n    end as planned_flag,\n    bb.specialty_cohort,\n    case\n        when aa.encounter_id in (select * from {{ ref('died') }} ) then 1\n\telse 0\n    end as died_flag,\n    cc.diagnosis_ccs,\n    cc.disqualified_encounter,\n    cc.missing_admit_date,\n    cc.missing_discharge_date,\n    cc.admit_after_discharge,\n    cc.missing_discharge_status_code,\n    cc.invalid_discharge_status_code,\n    cc.missing_primary_diagnosis,\n    cc.invalid_primary_diagnosis_code,\n    cc.no_diagnosis_ccs,\n    cc.multiple_primary_diagnoses\n    \nfrom {{ var('src_encounter') }} aa\n     left join {{ ref('encounter_specialty_cohorts') }} bb\n     on aa.encounter_id = bb.encounter_id\n     left join {{ ref('disqualified_encounters') }} cc\n     on aa.encounter_id = cc.encounter_id\n)\n\n\n\nselect *\nfrom encounters_augmented", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_encounter", "model.tuva.index_admissions", "model.tuva.planned_encounters", "model.tuva.died", "model.tuva.encounter_specialty_cohorts", "model.tuva.disqualified_encounters"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "encounters_augmented"], "unique_id": "model.tuva.encounters_augmented", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "encounters_augmented.sql", "original_file_path": "models/encounters_augmented.sql", "name": "encounters_augmented", "alias": "encounters_augmented", "checksum": {"name": "sha256", "checksum": "5f43fe2ef7f9f5b020371a1e6d601de7ff211df91c9447bac4811fc8ac33f37b"}, "tags": [], "refs": [["index_admissions"], ["planned_encounters"], ["died"], ["encounter_specialty_cohorts"], ["disqualified_encounters"]], "sources": [["hcup", "stg_encounter"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/encounters_augmented.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "table"}, "created_at": 1645656364, "compiled_sql": "-- Here we list all encounters from the input stg_encounter\n-- table and we augment them with a few extra fields\n-- that give information relevant for index admissions\n\n\n\n\n\n\nwith encounters_augmented as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_status_code,\n    aa.facility,\n    aa.ms_drg,\n    case\n        when\n\t    aa.encounter_id in (select *\n\t                        from hcup.tuva.index_admissions )\n\tthen 1\n\telse 0\n    end as index_admission_flag,\n    case\n        when\n\t    aa.encounter_id in (select *\n\t                        from hcup.tuva.planned_encounters )\n\tthen 1\n\telse 0\n    end as planned_flag,\n    bb.specialty_cohort,\n    case\n        when aa.encounter_id in (select * from hcup.tuva.died ) then 1\n\telse 0\n    end as died_flag,\n    cc.diagnosis_ccs,\n    cc.disqualified_encounter,\n    cc.missing_admit_date,\n    cc.missing_discharge_date,\n    cc.admit_after_discharge,\n    cc.missing_discharge_status_code,\n    cc.invalid_discharge_status_code,\n    cc.missing_primary_diagnosis,\n    cc.invalid_primary_diagnosis_code,\n    cc.no_diagnosis_ccs,\n    cc.multiple_primary_diagnoses\n    \nfrom hcup.staging.stg_encounter aa\n     left join hcup.tuva.encounter_specialty_cohorts bb\n     on aa.encounter_id = bb.encounter_id\n     left join hcup.tuva.disqualified_encounters cc\n     on aa.encounter_id = cc.encounter_id\n)\n\n\n\nselect *\nfrom encounters_augmented", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.encounters_augmented"}, "model.tuva.diagnosis_ccs": {"raw_sql": "-- Here we take all diagnosis codes from the stg_diagnosis model\n-- and append:\n--\n--      - a 'valid_icd_10_cm' flag to verify if it is a\n--        valid ICD-10-CM code\n--\n--      - a 'ccs' column to indicate the associated\n--        diagnosis category\n\n\n{{ config(materialized='view') }}\n\n\n\nselect\n    aa.encounter_id,\n    aa.diagnosis_code,\n    aa.diagnosis_rank,\n    case\n        when bb.icd_10_cm is null then 0\n\telse 1\n    end as valid_icd_10_cm,\n    cc.ccs\nfrom\n    {{ var('src_diagnosis') }} aa\n    left join {{ ref('icd_10_cm') }} bb\n    on aa.diagnosis_code = bb.icd_10_cm\n    left join {{ ref('ccs_icd_10_cm') }} cc\n    on aa.diagnosis_code = cc.icd_10_cm", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_diagnosis", "seed.tuva.icd_10_cm", "seed.tuva.ccs_icd_10_cm"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "diagnosis_ccs"], "unique_id": "model.tuva.diagnosis_ccs", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "diagnosis_ccs.sql", "original_file_path": "models/diagnosis_ccs.sql", "name": "diagnosis_ccs", "alias": "diagnosis_ccs", "checksum": {"name": "sha256", "checksum": "652530de885163f5a00d480453b6ca738a530bc1456de1abf7b60acda9fa8ebf"}, "tags": [], "refs": [["icd_10_cm"], ["ccs_icd_10_cm"]], "sources": [["hcup", "stg_diagnosis"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/diagnosis_ccs.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we take all diagnosis codes from the stg_diagnosis model\n-- and append:\n--\n--      - a 'valid_icd_10_cm' flag to verify if it is a\n--        valid ICD-10-CM code\n--\n--      - a 'ccs' column to indicate the associated\n--        diagnosis category\n\n\n\n\n\n\nselect\n    aa.encounter_id,\n    aa.diagnosis_code,\n    aa.diagnosis_rank,\n    case\n        when bb.icd_10_cm is null then 0\n\telse 1\n    end as valid_icd_10_cm,\n    cc.ccs\nfrom\n    hcup.staging.stg_diagnosis aa\n    left join hcup.vocabulary.icd_10_cm bb\n    on aa.diagnosis_code = bb.icd_10_cm\n    left join hcup.vocabulary.ccs_icd_10_cm cc\n    on aa.diagnosis_code = cc.icd_10_cm", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.diagnosis_ccs"}, "model.tuva.index_admissions": {"raw_sql": "-- Here we list all index admissions for the hospital wide readmissions\n-- measure.\n-- These represent encounter_ids that meet the requirements to be an\n-- index admission for the HWR measure.\n-- These are the requirements for a hospitalization to be an index admission\n-- for the HWR measure:\n--\n--     Time Requirement: The discharge data must be at least 30 days\n--                       earlier than the last dischareg date available\n--                       in the dataset.\n-- \n--     Discharge Requirements: The patient must not be discharged to another\n--                             acute care hospital; the patient must not have\n--                             left against medical advice; and the patient\n--                             must be alive at discharge.\n--\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\n--     (exclusions)            diagnosis category we know the encounter was\n--                             for medical treatment of cancer, rehabilitation,\n--                             or psychiatric reasons.\n\n\n{{ config(materialized='view') }}\n\n\n\n\nselect distinct encounter_id\nfrom {{ var('src_encounter') }}\nwhere \n    encounter_id in (select *\n\t             from {{ ref('index_time_requirements') }} )\n    and\n    encounter_id in (select *\n\t             from {{ ref('index_discharge_requirements') }} )\n    and\n    encounter_id not in (select *\n\t                 from {{ ref('exclusions') }} )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_encounter", "model.tuva.index_time_requirements", "model.tuva.index_discharge_requirements", "model.tuva.exclusions"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "index_admissions"], "unique_id": "model.tuva.index_admissions", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "index_admissions.sql", "original_file_path": "models/index_admissions.sql", "name": "index_admissions", "alias": "index_admissions", "checksum": {"name": "sha256", "checksum": "8b2073d764beda63e35d2fc3fd6a5b5730a52906561cb84d48f0aba1b361c470"}, "tags": [], "refs": [["index_time_requirements"], ["index_discharge_requirements"], ["exclusions"]], "sources": [["hcup", "stg_encounter"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/index_admissions.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we list all index admissions for the hospital wide readmissions\n-- measure.\n-- These represent encounter_ids that meet the requirements to be an\n-- index admission for the HWR measure.\n-- These are the requirements for a hospitalization to be an index admission\n-- for the HWR measure:\n--\n--     Time Requirement: The discharge data must be at least 30 days\n--                       earlier than the last dischareg date available\n--                       in the dataset.\n-- \n--     Discharge Requirements: The patient must not be discharged to another\n--                             acute care hospital; the patient must not have\n--                             left against medical advice; and the patient\n--                             must be alive at discharge.\n--\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\n--     (exclusions)            diagnosis category we know the encounter was\n--                             for medical treatment of cancer, rehabilitation,\n--                             or psychiatric reasons.\n\n\n\n\n\n\n\nselect distinct encounter_id\nfrom hcup.staging.stg_encounter\nwhere \n    encounter_id in (select *\n\t             from hcup.tuva.index_time_requirements )\n    and\n    encounter_id in (select *\n\t             from hcup.tuva.index_discharge_requirements )\n    and\n    encounter_id not in (select *\n\t                 from hcup.tuva.exclusions )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.index_admissions"}, "model.tuva.exclusions": {"raw_sql": "-- Here we list encounter_ids that are excluded\n-- from being index admissions because they\n-- belong to one of these categories:\n--       [1] Medical Treatment of Cancer\n--       [2] Rehabilitation\n--       [3] Psychiatric\n\n\n{{ config(materialized='view') }}\n\n\n-- encounter_ids for encounters that should be\n-- excluded because they belong to one of the\n-- exclusion categories\nwith exclusions as (\nselect distinct encounter_id\nfrom {{ ref('diagnosis_ccs') }}\nwhere ccs in (select distinct ccs_diagnosis_category\n              from {{ ref('exclusion_categories') }} )\n)\n\n\nselect *\nfrom exclusions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.diagnosis_ccs", "seed.tuva.exclusion_categories"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "exclusions"], "unique_id": "model.tuva.exclusions", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "exclusions.sql", "original_file_path": "models/exclusions.sql", "name": "exclusions", "alias": "exclusions", "checksum": {"name": "sha256", "checksum": "935e3f7561de24ccfbada96c0cfbebfe17c771fffa34181d56c4bf8afe7a2fcb"}, "tags": [], "refs": [["diagnosis_ccs"], ["exclusion_categories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/exclusions.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we list encounter_ids that are excluded\n-- from being index admissions because they\n-- belong to one of these categories:\n--       [1] Medical Treatment of Cancer\n--       [2] Rehabilitation\n--       [3] Psychiatric\n\n\n\n\n\n-- encounter_ids for encounters that should be\n-- excluded because they belong to one of the\n-- exclusion categories\nwith exclusions as (\nselect distinct encounter_id\nfrom hcup.tuva.diagnosis_ccs\nwhere ccs in (select distinct ccs_diagnosis_category\n              from hcup.vocabulary.exclusion_categories )\n)\n\n\nselect *\nfrom exclusions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.exclusions"}, "model.tuva.condition_logic": {"raw_sql": "{{ config(materialized='view', tags='chronic conditions') }}\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.admit_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom {{ var('src_patient') }}  a\nleft join {{ var('src_encounter') }}  b\n    on a.patient_id = b.patient_id    \nleft join {{ var('src_diagnosis') }} c\n    on b.encounter_id = c.encounter_id\n)\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank in (1,2)\n    and b.condition = 'Acute Myocardial Infarction'\n    and b.inclusion_type = 'Include'\n\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank in (1,2)\n    and b.condition = 'Atrial Fibrillation'\n    and b.inclusion_type = 'Include'\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank = 1\n    and b.condition = 'Cataract'\n    and b.inclusion_type = 'Include'\n\nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join {{ ref('chronic_conditions') }} b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank = 1\n    and b.condition = 'Glaucoma'\n    and b.inclusion_type = 'Include'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_patient", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_diagnosis", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": ["chronic conditions"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "condition_logic"], "unique_id": "model.tuva.condition_logic", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "condition_logic.sql", "original_file_path": "models/condition_logic.sql", "name": "condition_logic", "alias": "condition_logic", "checksum": {"name": "sha256", "checksum": "a6a30f34256a7f272bbcc6d5c6c57ab7620dcf5e3d527f4e9a56ef6bdf147a8b"}, "tags": ["chronic conditions"], "refs": [["chronic_conditions"], ["chronic_conditions"], ["chronic_conditions"], ["chronic_conditions"]], "sources": [["hcup", "stg_patient"], ["hcup", "stg_encounter"], ["hcup", "stg_diagnosis"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/condition_logic.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view", "tags": ["chronic conditions"]}, "created_at": 1645656364, "compiled_sql": "\n\nwith patients as (\nselect\n    a.patient_id\n,   b.encounter_id\n,   b.admit_date\n,   c.diagnosis_code\n,   c.diagnosis_rank\nfrom hcup.staging.stg_patient  a\nleft join hcup.staging.stg_encounter  b\n    on a.patient_id = b.patient_id    \nleft join hcup.staging.stg_diagnosis c\n    on b.encounter_id = c.encounter_id\n)\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join hcup.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank in (1,2)\n    and b.condition = 'Acute Myocardial Infarction'\n    and b.inclusion_type = 'Include'\n\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join hcup.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank in (1,2)\n    and b.condition = 'Atrial Fibrillation'\n    and b.inclusion_type = 'Include'\n    \nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join hcup.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank = 1\n    and b.condition = 'Cataract'\n    and b.inclusion_type = 'Include'\n\nunion\n\nselect\n    a.patient_id\n,   a.encounter_id\n,   a.admit_date\n,   condition_category\n,   condition\nfrom patients a\ninner join hcup.vocabulary.chronic_conditions b\n    on a.diagnosis_code = b.code\n    and a.diagnosis_rank = 1\n    and b.condition = 'Glaucoma'\n    and b.inclusion_type = 'Include'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.condition_logic"}, "model.tuva.disqualified_encounters": {"raw_sql": "-- Here we list all encounters from the stg_encounter table\n-- with data quality flags that may disqualify them from\n-- being used for readmission measures \n\n\n{{ config(materialized='view') }}\n\n\n-- Flag some potential data quality issues\n-- with all encounters.\n-- Note that in this CTE, encounters that have\n-- multiple primary diagnoses codes (which shouldn't happen,\n-- but it is a potential data quality problem in a dataset)\n-- will appear as separate rows, one row per distinct\n-- primary diagnosis code associated with the encounter.\nwith encounter_data_quality_issues as (\nselect\n    aa.encounter_id,\n    case\n        when aa.admit_date is null then 1\n\telse 0\n    end as missing_admit_date,\n    case\n        when aa.discharge_date is null then 1\n\telse 0\n    end as missing_discharge_date,\n    case\n        when aa.admit_date > aa.discharge_date then 1\n\telse 0\n    end as admit_after_discharge,\n    case\n        when aa.discharge_status_code is null then 1\n\telse 0\n    end as missing_discharge_status_code,\n    case\n        when cc.code is null then 1\n\telse 0\n    end as invalid_discharge_status_code,\n    case\n        when bb.diagnosis_code is null then 1\n\telse 0\n    end as missing_primary_diagnosis,\n    case\n        when bb.valid_icd_10_cm = 0 then 1\n\telse 0\n    end as invalid_primary_diagnosis_code,\n    case\n        when bb.ccs is null then 1\n\telse 0\n    end as no_diagnosis_ccs,\n    bb.ccs as diagnosis_ccs\n\nfrom {{ var('src_encounter') }} aa\n     left join (select *\n                from {{ ref('diagnosis_ccs') }}\n\t\twhere diagnosis_rank = 1 ) bb\n     on aa.encounter_id = bb.encounter_id\n     left join {{ ref('discharge_status_codes') }} cc\n     on aa.discharge_status_code = cc.code\n),\n\n\n-- This lists all encounters with multiple primary\n-- diagnosis codes together with the count\n-- of distinct diagnosis codes associated with the\n-- encounter.\nencounters_with_multiple_primary_diagnoses as (\nselect\n    encounter_id,\n    count(*) as primary_diagnosis_count\nfrom {{ ref('diagnosis_ccs') }}\nwhere diagnosis_rank = 1\ngroup by encounter_id\nhaving primary_diagnosis_count > 1\n),\n\n\n-- Here we add new data quality flags to all\n-- rows from the encounter_data_quality_issues CTE\n-- above.\n-- Note that in this CTE, again, encounters that have\n-- multiple primary diagnoses codes will appear as\n-- separate rows, one row per distinct primary diagnosis\n-- code associated with the encounter.\nall_data_quality_flags as (\nselect\n    encounter_id,\n    diagnosis_ccs,\n    case\n        when\n\t    (missing_admit_date = 1)\n\t    or\n\t    (missing_discharge_date = 1)\n\t    or\n\t    (admit_after_discharge = 1)\n\t    or\n\t    (missing_discharge_status_code = 1)\n\t    or\n\t    (invalid_discharge_status_code = 1)\n\t    or\n\t    (missing_primary_diagnosis = 1)\n\t    or\n\t    (invalid_primary_diagnosis_code = 1)\n\t    or\n\t    (no_diagnosis_ccs = 1)\n\t    then 1\n\telse 0\n    end as disqualified_encounter,\n    missing_admit_date,\n    missing_discharge_date,\n    admit_after_discharge,\n    missing_discharge_status_code,\n    invalid_discharge_status_code,\n    missing_primary_diagnosis,\n    invalid_primary_diagnosis_code,\n    no_diagnosis_ccs,\n    case\n        when encounter_id in\n\t( select encounter_id\n\t  from encounters_with_multiple_primary_diagnoses )\n\t    then 1\n\telse 0\n    end as multiple_primary_diagnoses\nfrom encounter_data_quality_issues\n)    \n\n\n-- We group by encounter_id so that encounters with multiple\n-- diagnosis codes (and therefore appearing on more than one\n-- row in the all_data_quality_flags CTE above) appear\n-- on only one row.\n-- The output of this has one row per encounter_id in the\n-- stg_encounter model.\nselect\n    encounter_id,\n    max(diagnosis_ccs) as diagnosis_ccs,\n    max(disqualified_encounter) as disqualified_encounter,\n    max(missing_admit_date) as missing_admit_date,\n    max(missing_discharge_date) as missing_discharge_date,\n    max(admit_after_discharge) as admit_after_discharge,\n    max(missing_discharge_status_code) as missing_discharge_status_code,\n    max(invalid_discharge_status_code) as invalid_discharge_status_code,\n    max(missing_primary_diagnosis) as missing_primary_diagnosis,\n    max(invalid_primary_diagnosis_code) as invalid_primary_diagnosis_code,\n    max(no_diagnosis_ccs) as no_diagnosis_ccs,\n    max(multiple_primary_diagnoses) as multiple_primary_diagnoses\nfrom all_data_quality_flags\ngroup by encounter_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_encounter", "model.tuva.diagnosis_ccs", "seed.tuva.discharge_status_codes", "model.tuva.diagnosis_ccs"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "disqualified_encounters"], "unique_id": "model.tuva.disqualified_encounters", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "disqualified_encounters.sql", "original_file_path": "models/disqualified_encounters.sql", "name": "disqualified_encounters", "alias": "disqualified_encounters", "checksum": {"name": "sha256", "checksum": "fdceeb8b76c65a06c84c47978bc52175d3fcfa88e69105712c129220d02d96c1"}, "tags": [], "refs": [["diagnosis_ccs"], ["discharge_status_codes"], ["diagnosis_ccs"]], "sources": [["hcup", "stg_encounter"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/disqualified_encounters.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we list all encounters from the stg_encounter table\n-- with data quality flags that may disqualify them from\n-- being used for readmission measures \n\n\n\n\n\n-- Flag some potential data quality issues\n-- with all encounters.\n-- Note that in this CTE, encounters that have\n-- multiple primary diagnoses codes (which shouldn't happen,\n-- but it is a potential data quality problem in a dataset)\n-- will appear as separate rows, one row per distinct\n-- primary diagnosis code associated with the encounter.\nwith encounter_data_quality_issues as (\nselect\n    aa.encounter_id,\n    case\n        when aa.admit_date is null then 1\n\telse 0\n    end as missing_admit_date,\n    case\n        when aa.discharge_date is null then 1\n\telse 0\n    end as missing_discharge_date,\n    case\n        when aa.admit_date > aa.discharge_date then 1\n\telse 0\n    end as admit_after_discharge,\n    case\n        when aa.discharge_status_code is null then 1\n\telse 0\n    end as missing_discharge_status_code,\n    case\n        when cc.code is null then 1\n\telse 0\n    end as invalid_discharge_status_code,\n    case\n        when bb.diagnosis_code is null then 1\n\telse 0\n    end as missing_primary_diagnosis,\n    case\n        when bb.valid_icd_10_cm = 0 then 1\n\telse 0\n    end as invalid_primary_diagnosis_code,\n    case\n        when bb.ccs is null then 1\n\telse 0\n    end as no_diagnosis_ccs,\n    bb.ccs as diagnosis_ccs\n\nfrom hcup.staging.stg_encounter aa\n     left join (select *\n                from hcup.tuva.diagnosis_ccs\n\t\twhere diagnosis_rank = 1 ) bb\n     on aa.encounter_id = bb.encounter_id\n     left join hcup.vocabulary.discharge_status_codes cc\n     on aa.discharge_status_code = cc.code\n),\n\n\n-- This lists all encounters with multiple primary\n-- diagnosis codes together with the count\n-- of distinct diagnosis codes associated with the\n-- encounter.\nencounters_with_multiple_primary_diagnoses as (\nselect\n    encounter_id,\n    count(*) as primary_diagnosis_count\nfrom hcup.tuva.diagnosis_ccs\nwhere diagnosis_rank = 1\ngroup by encounter_id\nhaving primary_diagnosis_count > 1\n),\n\n\n-- Here we add new data quality flags to all\n-- rows from the encounter_data_quality_issues CTE\n-- above.\n-- Note that in this CTE, again, encounters that have\n-- multiple primary diagnoses codes will appear as\n-- separate rows, one row per distinct primary diagnosis\n-- code associated with the encounter.\nall_data_quality_flags as (\nselect\n    encounter_id,\n    diagnosis_ccs,\n    case\n        when\n\t    (missing_admit_date = 1)\n\t    or\n\t    (missing_discharge_date = 1)\n\t    or\n\t    (admit_after_discharge = 1)\n\t    or\n\t    (missing_discharge_status_code = 1)\n\t    or\n\t    (invalid_discharge_status_code = 1)\n\t    or\n\t    (missing_primary_diagnosis = 1)\n\t    or\n\t    (invalid_primary_diagnosis_code = 1)\n\t    or\n\t    (no_diagnosis_ccs = 1)\n\t    then 1\n\telse 0\n    end as disqualified_encounter,\n    missing_admit_date,\n    missing_discharge_date,\n    admit_after_discharge,\n    missing_discharge_status_code,\n    invalid_discharge_status_code,\n    missing_primary_diagnosis,\n    invalid_primary_diagnosis_code,\n    no_diagnosis_ccs,\n    case\n        when encounter_id in\n\t( select encounter_id\n\t  from encounters_with_multiple_primary_diagnoses )\n\t    then 1\n\telse 0\n    end as multiple_primary_diagnoses\nfrom encounter_data_quality_issues\n)    \n\n\n-- We group by encounter_id so that encounters with multiple\n-- diagnosis codes (and therefore appearing on more than one\n-- row in the all_data_quality_flags CTE above) appear\n-- on only one row.\n-- The output of this has one row per encounter_id in the\n-- stg_encounter model.\nselect\n    encounter_id,\n    max(diagnosis_ccs) as diagnosis_ccs,\n    max(disqualified_encounter) as disqualified_encounter,\n    max(missing_admit_date) as missing_admit_date,\n    max(missing_discharge_date) as missing_discharge_date,\n    max(admit_after_discharge) as admit_after_discharge,\n    max(missing_discharge_status_code) as missing_discharge_status_code,\n    max(invalid_discharge_status_code) as invalid_discharge_status_code,\n    max(missing_primary_diagnosis) as missing_primary_diagnosis,\n    max(invalid_primary_diagnosis_code) as invalid_primary_diagnosis_code,\n    max(no_diagnosis_ccs) as no_diagnosis_ccs,\n    max(multiple_primary_diagnoses) as multiple_primary_diagnoses\nfrom all_data_quality_flags\ngroup by encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.disqualified_encounters"}, "model.tuva.procedure_ccs": {"raw_sql": "-- Here we map every procedure code to its corresponding\n-- CCS procedure category.\n-- This model may list more than one CCS procedure category\n-- per encounter_id. Different procedures associated with the\n-- encounter may have different associated CCS procedure categories.\n\n\n{{ config(materialized='view') }}\n\n\n\n\nselect\n    aa.encounter_id,\n    aa.procedure_code,\n    case\n        when bb.icd_10_pcs is null then 0\n\telse 1\n    end as valid_icd_10_pcs,\n    cc.ccs\nfrom\n    {{ var('src_procedure') }} aa\n    left join {{ ref('icd_10_pcs') }} bb\n    on aa.procedure_code = bb.icd_10_pcs\n    left join {{ ref('ccs_icd_10_pcs') }} cc\n    on aa.procedure_code = cc.icd_10_pcs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_procedure", "seed.tuva.icd_10_pcs", "seed.tuva.ccs_icd_10_pcs"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "procedure_ccs"], "unique_id": "model.tuva.procedure_ccs", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "procedure_ccs.sql", "original_file_path": "models/procedure_ccs.sql", "name": "procedure_ccs", "alias": "procedure_ccs", "checksum": {"name": "sha256", "checksum": "1a490049aa16abc9c192058460910fc5ee9665d54b40bfc3a96c0f752fa76bcc"}, "tags": [], "refs": [["icd_10_pcs"], ["ccs_icd_10_pcs"]], "sources": [["hcup", "stg_procedure"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/procedure_ccs.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we map every procedure code to its corresponding\n-- CCS procedure category.\n-- This model may list more than one CCS procedure category\n-- per encounter_id. Different procedures associated with the\n-- encounter may have different associated CCS procedure categories.\n\n\n\n\n\n\n\nselect\n    aa.encounter_id,\n    aa.procedure_code,\n    case\n        when bb.icd_10_pcs is null then 0\n\telse 1\n    end as valid_icd_10_pcs,\n    cc.ccs\nfrom\n    hcup.staging.stg_procedure aa\n    left join hcup.vocabulary.icd_10_pcs bb\n    on aa.procedure_code = bb.icd_10_pcs\n    left join hcup.vocabulary.ccs_icd_10_pcs cc\n    on aa.procedure_code = cc.icd_10_pcs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.procedure_ccs"}, "model.tuva.chronic_conditions_wide": {"raw_sql": "{{ config(materialized='table', tags='chronic conditions') }}\n\nwith conditions as (\nselect\n    a.patient_id\n,   b.condition_column_name\n,   1 as condition_count\nfrom {{ ref('chronic_conditions_long') }} a\ninner join (select distinct condition, condition_column_name from {{ ref('chronic_conditions') }}) b\n    on a.condition = b.condition\n)\n\nselect \n    patient_id,\n    case when acquired_hypothyroidism >= 1 then 1 else 0 end acquired_hypothyroidism,\n    case when acute_myocardial_infarction >= 1 then 1 else 0 end acute_myocardial_infarction,\n    case when adhd_conduct_disorders_and_hyperkinetic_syndrome >= 1 then 1 else 0 end adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    case when alcohol_use_disorders >= 1 then 1 else 0 end alcohol_use_disorders,\n    case when alzheimers_disease >= 1 then 1 else 0 end alzheimers_disease,\n    case when alzheimers_disease_and_related_disorders_or_senile_dementia >= 1 then 1 else 0 end alzheimers_disease_and_related_disorders_or_senile_dementia,\n    case when anemia >= 1 then 1 else 0 end anemia,\n    case when anxiety_disorders >= 1 then 1 else 0 end anxiety_disorders,\n    case when asthma >= 1 then 1 else 0 end asthma,\n    case when atrial_fibrillation >= 1 then 1 else 0 end atrial_fibrillation,\n    case when autism_spectrum_disorders >= 1 then 1 else 0 end autism_spectrum_disorders,\n    case when benign_prostatic_hyperplasia >= 1 then 1 else 0 end benign_prostatic_hyperplasia,\n    case when bipolar_disorder >= 1 then 1 else 0 end bipolar_disorder,\n    case when cataract >= 1 then 1 else 0 end cataract,\n    case when cerebral_palsy >= 1 then 1 else 0 end cerebral_palsy,\n    case when chronic_kidney_disease >= 1 then 1 else 0 end chronic_kidney_disease,\n    case when chronic_obstructive_pulmonary_disease_and_bronchiectasis >= 1 then 1 else 0 end chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    case when colorectal_cancer >= 1 then 1 else 0 end colorectal_cancer,\n    case when cystic_fibrosis_and_other_metabolic_developmental_disorders >= 1 then 1 else 0 end cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    case when depression >= 1 then 1 else 0 end depression,\n    case when diabetes >= 1 then 1 else 0 end diabetes,\n    case when drug_use_disorders >= 1 then 1 else 0 end drug_use_disorders,\n    case when endometrial_cancer >= 1 then 1 else 0 end endometrial_cancer,\n    case when epilepsy >= 1 then 1 else 0 end epilepsy,\n    case when female_male_breast_cancer >= 1 then 1 else 0 end female_male_breast_cancer,\n    case when fibromyalgia_and_chronic_pain_and_fatigue >= 1 then 1 else 0 end fibromyalgia_and_chronic_pain_and_fatigue,\n    case when glaucoma >= 1 then 1 else 0 end glaucoma,\n    case when heart_failure >= 1 then 1 else 0 end heart_failure,\n    case when hepatitis_a >= 1 then 1 else 0 end hepatitis_a,\n    case when hepatitis_b >= 1 then 1 else 0 end hepatitis_b,\n    case when hepatitis_c_acute >= 1 then 1 else 0 end hepatitis_c_acute,\n    case when hepatitis_c_chronic >= 1 then 1 else 0 end hepatitis_c_chronic,\n    case when hepatitis_c_unspecified >= 1 then 1 else 0 end hepatitis_c_unspecified,\n    case when hepatitis_d >= 1 then 1 else 0 end hepatitis_d,\n    case when hepatitis_e >= 1 then 1 else 0 end hepatitis_e,\n    case when hip_pelvic_fracture >= 1 then 1 else 0 end hip_pelvic_fracture,\n    case when human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids >= 1 then 1 else 0 end human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    case when hyperlipidemia >= 1 then 1 else 0 end hyperlipidemia,\n    case when hypertension >= 1 then 1 else 0 end hypertension,\n    case when intellectual_disabilities_and_related_conditions >= 1 then 1 else 0 end intellectual_disabilities_and_related_conditions,\n    case when ischemic_heart_disease >= 1 then 1 else 0 end ischemic_heart_disease,\n    case when learning_disabilities >= 1 then 1 else 0 end learning_disabilities,\n    case when leukemias_and_lymphomas >= 1 then 1 else 0 end leukemias_and_lymphomas,\n    case when liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis >= 1 then 1 else 0 end liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    case when lung_cancer >= 1 then 1 else 0 end lung_cancer,\n    case when migraine_and_chronic_headache >= 1 then 1 else 0 end migraine_and_chronic_headache,\n    case when mobility_impairments >= 1 then 1 else 0 end mobility_impairments,\n    case when multiple_sclerosis_and_transverse_myelitis >= 1 then 1 else 0 end multiple_sclerosis_and_transverse_myelitis,\n    case when muscular_dystrophy >= 1 then 1 else 0 end muscular_dystrophy,\n    case when obesity >= 1 then 1 else 0 end obesity,\n    case when opioid_use_disorder >= 1 then 1 else 0 end opioid_use_disorder,\n    case when osteoporosis >= 1 then 1 else 0 end osteoporosis,\n    case when other_developmental_delays >= 1 then 1 else 0 end other_developmental_delays,\n    case when peripheral_vascular_disease_pvd >= 1 then 1 else 0 end peripheral_vascular_disease_pvd,\n    case when personality_disorders >= 1 then 1 else 0 end personality_disorders,\n    case when post_traumatic_stress_disorder_ptsd >= 1 then 1 else 0 end post_traumatic_stress_disorder_ptsd,\n    case when pressure_and_chronic_ulcers >= 1 then 1 else 0 end pressure_and_chronic_ulcers,\n    case when prostate_cancer >= 1 then 1 else 0 end prostate_cancer,\n    case when rheumatoid_arthritis__osteoarthritis_ra_oa >= 1 then 1 else 0 end rheumatoid_arthritis__osteoarthritis_ra_oa,\n    case when schizophrenia >= 1 then 1 else 0 end schizophrenia,\n    case when schizophrenia_and_other_psychotic_disorders >= 1 then 1 else 0 end schizophrenia_and_other_psychotic_disorders,\n    case when sensory_blindness_and_visual_impairment >= 1 then 1 else 0 end sensory_blindness_and_visual_impairment,\n    case when sensory_deafness_and_hearing_impairment >= 1 then 1 else 0 end sensory_deafness_and_hearing_impairment,\n    case when sickle_cell_disease >= 1 then 1 else 0 end sickle_cell_disease,\n    case when spina_bifida_and_other_congenital_anomalies_of_the_nervous_system >= 1 then 1 else 0 end spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    case when spinal_cord_injury >= 1 then 1 else 0 end spinal_cord_injury,\n    case when stroke_transient_ischemic_attack >= 1 then 1 else 0 end stroke_transient_ischemic_attack,\n    case when tobacco_use >= 1 then 1 else 0 end tobacco_use,\n    case when traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage >= 1 then 1 else 0 end traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\nfrom conditions\npivot\n(\n    sum(condition_count)\n    for condition_column_name in\n    (\n        'acquired_hypothyroidism',\n        'acute_myocardial_infarction',\n        'adhd_conduct_disorders_and_hyperkinetic_syndrome',\n        'alcohol_use_disorders',\n        'alzheimers_disease',\n        'alzheimers_disease_and_related_disorders_or_senile_dementia',\n        'anemia',\n        'anxiety_disorders',\n        'asthma',\n        'atrial_fibrillation',\n        'autism_spectrum_disorders',\n        'benign_prostatic_hyperplasia',\n        'bipolar_disorder',\n        'cataract',\n        'cerebral_palsy',\n        'chronic_kidney_disease',\n        'chronic_obstructive_pulmonary_disease_and_bronchiectasis',\n        'colorectal_cancer',\n        'cystic_fibrosis_and_other_metabolic_developmental_disorders',\n        'depression',\n        'diabetes',\n        'drug_use_disorders',\n        'endometrial_cancer',\n        'epilepsy',\n        'female_male_breast_cancer',\n        'fibromyalgia_and_chronic_pain_and_fatigue',\n        'glaucoma',\n        'heart_failure',\n        'hepatitis_a',\n        'hepatitis_b',\n        'hepatitis_c_acute',\n        'hepatitis_c_chronic',\n        'hepatitis_c_unspecified',\n        'hepatitis_d',\n        'hepatitis_e',\n        'hip_pelvic_fracture',\n        'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids',\n        'hyperlipidemia',\n        'hypertension',\n        'intellectual_disabilities_and_related_conditions',\n        'ischemic_heart_disease',\n        'learning_disabilities',\n        'leukemias_and_lymphomas',\n        'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis',\n        'lung_cancer',\n        'migraine_and_chronic_headache',\n        'mobility_impairments',\n        'multiple_sclerosis_and_transverse_myelitis',\n        'muscular_dystrophy',\n        'obesity',\n        'opioid_use_disorder',\n        'osteoporosis',\n        'other_developmental_delays',\n        'peripheral_vascular_disease_pvd',\n        'personality_disorders',\n        'post_traumatic_stress_disorder_ptsd',\n        'pressure_and_chronic_ulcers',\n        'prostate_cancer',\n        'rheumatoid_arthritis__osteoarthritis_ra_oa',\n        'schizophrenia',\n        'schizophrenia_and_other_psychotic_disorders',\n        'sensory_blindness_and_visual_impairment',\n        'sensory_deafness_and_hearing_impairment',\n        'sickle_cell_disease',\n        'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system',\n        'spinal_cord_injury',\n        'stroke_transient_ischemic_attack',\n        'tobacco_use',\n        'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n    )) \nas pvt (\n    patient_id,\n    acquired_hypothyroidism,\n    acute_myocardial_infarction,\n    adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    alcohol_use_disorders,\n    alzheimers_disease,\n    alzheimers_disease_and_related_disorders_or_senile_dementia,\n    anemia,\n    anxiety_disorders,\n    asthma,\n    atrial_fibrillation,\n    autism_spectrum_disorders,\n    benign_prostatic_hyperplasia,\n    bipolar_disorder,\n    cataract,\n    cerebral_palsy,\n    chronic_kidney_disease,\n    chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    colorectal_cancer,\n    cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    depression,\n    diabetes,\n    drug_use_disorders,\n    endometrial_cancer,\n    epilepsy,\n    female_male_breast_cancer,\n    fibromyalgia_and_chronic_pain_and_fatigue,\n    glaucoma,\n    heart_failure,\n    hepatitis_a,\n    hepatitis_b,\n    hepatitis_c_acute,\n    hepatitis_c_chronic,\n    hepatitis_c_unspecified,\n    hepatitis_d,\n    hepatitis_e,\n    hip_pelvic_fracture,\n    human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    hyperlipidemia,\n    hypertension,\n    intellectual_disabilities_and_related_conditions,\n    ischemic_heart_disease,\n    learning_disabilities,\n    leukemias_and_lymphomas,\n    liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    lung_cancer,\n    migraine_and_chronic_headache,\n    mobility_impairments,\n    multiple_sclerosis_and_transverse_myelitis,\n    muscular_dystrophy,\n    obesity,\n    opioid_use_disorder,\n    osteoporosis,\n    other_developmental_delays,\n    peripheral_vascular_disease_pvd,\n    personality_disorders,\n    post_traumatic_stress_disorder_ptsd,\n    pressure_and_chronic_ulcers,\n    prostate_cancer,\n    rheumatoid_arthritis__osteoarthritis_ra_oa,\n    schizophrenia,\n    schizophrenia_and_other_psychotic_disorders,\n    sensory_blindness_and_visual_impairment,\n    sensory_deafness_and_hearing_impairment,\n    sickle_cell_disease,\n    spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    spinal_cord_injury,\n    stroke_transient_ischemic_attack,\n    tobacco_use,\n    traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.tuva.chronic_conditions_long", "seed.tuva.chronic_conditions"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": ["chronic conditions"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "chronic_conditions_wide"], "unique_id": "model.tuva.chronic_conditions_wide", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "chronic_conditions_wide.sql", "original_file_path": "models/chronic_conditions_wide.sql", "name": "chronic_conditions_wide", "alias": "chronic_conditions_wide", "checksum": {"name": "sha256", "checksum": "390bc4220f4b59d8f9fc77b87b34fb5d8d2c0f3d80b9aef341b26b4a8c66a4cd"}, "tags": ["chronic conditions"], "refs": [["chronic_conditions_long"], ["chronic_conditions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/chronic_conditions_wide.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "table", "tags": ["chronic conditions"]}, "created_at": 1645656364, "compiled_sql": "\n\nwith conditions as (\nselect\n    a.patient_id\n,   b.condition_column_name\n,   1 as condition_count\nfrom hcup.tuva.chronic_conditions_long a\ninner join (select distinct condition, condition_column_name from hcup.vocabulary.chronic_conditions) b\n    on a.condition = b.condition\n)\n\nselect \n    patient_id,\n    case when acquired_hypothyroidism >= 1 then 1 else 0 end acquired_hypothyroidism,\n    case when acute_myocardial_infarction >= 1 then 1 else 0 end acute_myocardial_infarction,\n    case when adhd_conduct_disorders_and_hyperkinetic_syndrome >= 1 then 1 else 0 end adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    case when alcohol_use_disorders >= 1 then 1 else 0 end alcohol_use_disorders,\n    case when alzheimers_disease >= 1 then 1 else 0 end alzheimers_disease,\n    case when alzheimers_disease_and_related_disorders_or_senile_dementia >= 1 then 1 else 0 end alzheimers_disease_and_related_disorders_or_senile_dementia,\n    case when anemia >= 1 then 1 else 0 end anemia,\n    case when anxiety_disorders >= 1 then 1 else 0 end anxiety_disorders,\n    case when asthma >= 1 then 1 else 0 end asthma,\n    case when atrial_fibrillation >= 1 then 1 else 0 end atrial_fibrillation,\n    case when autism_spectrum_disorders >= 1 then 1 else 0 end autism_spectrum_disorders,\n    case when benign_prostatic_hyperplasia >= 1 then 1 else 0 end benign_prostatic_hyperplasia,\n    case when bipolar_disorder >= 1 then 1 else 0 end bipolar_disorder,\n    case when cataract >= 1 then 1 else 0 end cataract,\n    case when cerebral_palsy >= 1 then 1 else 0 end cerebral_palsy,\n    case when chronic_kidney_disease >= 1 then 1 else 0 end chronic_kidney_disease,\n    case when chronic_obstructive_pulmonary_disease_and_bronchiectasis >= 1 then 1 else 0 end chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    case when colorectal_cancer >= 1 then 1 else 0 end colorectal_cancer,\n    case when cystic_fibrosis_and_other_metabolic_developmental_disorders >= 1 then 1 else 0 end cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    case when depression >= 1 then 1 else 0 end depression,\n    case when diabetes >= 1 then 1 else 0 end diabetes,\n    case when drug_use_disorders >= 1 then 1 else 0 end drug_use_disorders,\n    case when endometrial_cancer >= 1 then 1 else 0 end endometrial_cancer,\n    case when epilepsy >= 1 then 1 else 0 end epilepsy,\n    case when female_male_breast_cancer >= 1 then 1 else 0 end female_male_breast_cancer,\n    case when fibromyalgia_and_chronic_pain_and_fatigue >= 1 then 1 else 0 end fibromyalgia_and_chronic_pain_and_fatigue,\n    case when glaucoma >= 1 then 1 else 0 end glaucoma,\n    case when heart_failure >= 1 then 1 else 0 end heart_failure,\n    case when hepatitis_a >= 1 then 1 else 0 end hepatitis_a,\n    case when hepatitis_b >= 1 then 1 else 0 end hepatitis_b,\n    case when hepatitis_c_acute >= 1 then 1 else 0 end hepatitis_c_acute,\n    case when hepatitis_c_chronic >= 1 then 1 else 0 end hepatitis_c_chronic,\n    case when hepatitis_c_unspecified >= 1 then 1 else 0 end hepatitis_c_unspecified,\n    case when hepatitis_d >= 1 then 1 else 0 end hepatitis_d,\n    case when hepatitis_e >= 1 then 1 else 0 end hepatitis_e,\n    case when hip_pelvic_fracture >= 1 then 1 else 0 end hip_pelvic_fracture,\n    case when human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids >= 1 then 1 else 0 end human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    case when hyperlipidemia >= 1 then 1 else 0 end hyperlipidemia,\n    case when hypertension >= 1 then 1 else 0 end hypertension,\n    case when intellectual_disabilities_and_related_conditions >= 1 then 1 else 0 end intellectual_disabilities_and_related_conditions,\n    case when ischemic_heart_disease >= 1 then 1 else 0 end ischemic_heart_disease,\n    case when learning_disabilities >= 1 then 1 else 0 end learning_disabilities,\n    case when leukemias_and_lymphomas >= 1 then 1 else 0 end leukemias_and_lymphomas,\n    case when liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis >= 1 then 1 else 0 end liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    case when lung_cancer >= 1 then 1 else 0 end lung_cancer,\n    case when migraine_and_chronic_headache >= 1 then 1 else 0 end migraine_and_chronic_headache,\n    case when mobility_impairments >= 1 then 1 else 0 end mobility_impairments,\n    case when multiple_sclerosis_and_transverse_myelitis >= 1 then 1 else 0 end multiple_sclerosis_and_transverse_myelitis,\n    case when muscular_dystrophy >= 1 then 1 else 0 end muscular_dystrophy,\n    case when obesity >= 1 then 1 else 0 end obesity,\n    case when opioid_use_disorder >= 1 then 1 else 0 end opioid_use_disorder,\n    case when osteoporosis >= 1 then 1 else 0 end osteoporosis,\n    case when other_developmental_delays >= 1 then 1 else 0 end other_developmental_delays,\n    case when peripheral_vascular_disease_pvd >= 1 then 1 else 0 end peripheral_vascular_disease_pvd,\n    case when personality_disorders >= 1 then 1 else 0 end personality_disorders,\n    case when post_traumatic_stress_disorder_ptsd >= 1 then 1 else 0 end post_traumatic_stress_disorder_ptsd,\n    case when pressure_and_chronic_ulcers >= 1 then 1 else 0 end pressure_and_chronic_ulcers,\n    case when prostate_cancer >= 1 then 1 else 0 end prostate_cancer,\n    case when rheumatoid_arthritis__osteoarthritis_ra_oa >= 1 then 1 else 0 end rheumatoid_arthritis__osteoarthritis_ra_oa,\n    case when schizophrenia >= 1 then 1 else 0 end schizophrenia,\n    case when schizophrenia_and_other_psychotic_disorders >= 1 then 1 else 0 end schizophrenia_and_other_psychotic_disorders,\n    case when sensory_blindness_and_visual_impairment >= 1 then 1 else 0 end sensory_blindness_and_visual_impairment,\n    case when sensory_deafness_and_hearing_impairment >= 1 then 1 else 0 end sensory_deafness_and_hearing_impairment,\n    case when sickle_cell_disease >= 1 then 1 else 0 end sickle_cell_disease,\n    case when spina_bifida_and_other_congenital_anomalies_of_the_nervous_system >= 1 then 1 else 0 end spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    case when spinal_cord_injury >= 1 then 1 else 0 end spinal_cord_injury,\n    case when stroke_transient_ischemic_attack >= 1 then 1 else 0 end stroke_transient_ischemic_attack,\n    case when tobacco_use >= 1 then 1 else 0 end tobacco_use,\n    case when traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage >= 1 then 1 else 0 end traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\nfrom conditions\npivot\n(\n    sum(condition_count)\n    for condition_column_name in\n    (\n        'acquired_hypothyroidism',\n        'acute_myocardial_infarction',\n        'adhd_conduct_disorders_and_hyperkinetic_syndrome',\n        'alcohol_use_disorders',\n        'alzheimers_disease',\n        'alzheimers_disease_and_related_disorders_or_senile_dementia',\n        'anemia',\n        'anxiety_disorders',\n        'asthma',\n        'atrial_fibrillation',\n        'autism_spectrum_disorders',\n        'benign_prostatic_hyperplasia',\n        'bipolar_disorder',\n        'cataract',\n        'cerebral_palsy',\n        'chronic_kidney_disease',\n        'chronic_obstructive_pulmonary_disease_and_bronchiectasis',\n        'colorectal_cancer',\n        'cystic_fibrosis_and_other_metabolic_developmental_disorders',\n        'depression',\n        'diabetes',\n        'drug_use_disorders',\n        'endometrial_cancer',\n        'epilepsy',\n        'female_male_breast_cancer',\n        'fibromyalgia_and_chronic_pain_and_fatigue',\n        'glaucoma',\n        'heart_failure',\n        'hepatitis_a',\n        'hepatitis_b',\n        'hepatitis_c_acute',\n        'hepatitis_c_chronic',\n        'hepatitis_c_unspecified',\n        'hepatitis_d',\n        'hepatitis_e',\n        'hip_pelvic_fracture',\n        'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids',\n        'hyperlipidemia',\n        'hypertension',\n        'intellectual_disabilities_and_related_conditions',\n        'ischemic_heart_disease',\n        'learning_disabilities',\n        'leukemias_and_lymphomas',\n        'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis',\n        'lung_cancer',\n        'migraine_and_chronic_headache',\n        'mobility_impairments',\n        'multiple_sclerosis_and_transverse_myelitis',\n        'muscular_dystrophy',\n        'obesity',\n        'opioid_use_disorder',\n        'osteoporosis',\n        'other_developmental_delays',\n        'peripheral_vascular_disease_pvd',\n        'personality_disorders',\n        'post_traumatic_stress_disorder_ptsd',\n        'pressure_and_chronic_ulcers',\n        'prostate_cancer',\n        'rheumatoid_arthritis__osteoarthritis_ra_oa',\n        'schizophrenia',\n        'schizophrenia_and_other_psychotic_disorders',\n        'sensory_blindness_and_visual_impairment',\n        'sensory_deafness_and_hearing_impairment',\n        'sickle_cell_disease',\n        'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system',\n        'spinal_cord_injury',\n        'stroke_transient_ischemic_attack',\n        'tobacco_use',\n        'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n    )) \nas pvt (\n    patient_id,\n    acquired_hypothyroidism,\n    acute_myocardial_infarction,\n    adhd_conduct_disorders_and_hyperkinetic_syndrome,\n    alcohol_use_disorders,\n    alzheimers_disease,\n    alzheimers_disease_and_related_disorders_or_senile_dementia,\n    anemia,\n    anxiety_disorders,\n    asthma,\n    atrial_fibrillation,\n    autism_spectrum_disorders,\n    benign_prostatic_hyperplasia,\n    bipolar_disorder,\n    cataract,\n    cerebral_palsy,\n    chronic_kidney_disease,\n    chronic_obstructive_pulmonary_disease_and_bronchiectasis,\n    colorectal_cancer,\n    cystic_fibrosis_and_other_metabolic_developmental_disorders,\n    depression,\n    diabetes,\n    drug_use_disorders,\n    endometrial_cancer,\n    epilepsy,\n    female_male_breast_cancer,\n    fibromyalgia_and_chronic_pain_and_fatigue,\n    glaucoma,\n    heart_failure,\n    hepatitis_a,\n    hepatitis_b,\n    hepatitis_c_acute,\n    hepatitis_c_chronic,\n    hepatitis_c_unspecified,\n    hepatitis_d,\n    hepatitis_e,\n    hip_pelvic_fracture,\n    human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids,\n    hyperlipidemia,\n    hypertension,\n    intellectual_disabilities_and_related_conditions,\n    ischemic_heart_disease,\n    learning_disabilities,\n    leukemias_and_lymphomas,\n    liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis,\n    lung_cancer,\n    migraine_and_chronic_headache,\n    mobility_impairments,\n    multiple_sclerosis_and_transverse_myelitis,\n    muscular_dystrophy,\n    obesity,\n    opioid_use_disorder,\n    osteoporosis,\n    other_developmental_delays,\n    peripheral_vascular_disease_pvd,\n    personality_disorders,\n    post_traumatic_stress_disorder_ptsd,\n    pressure_and_chronic_ulcers,\n    prostate_cancer,\n    rheumatoid_arthritis__osteoarthritis_ra_oa,\n    schizophrenia,\n    schizophrenia_and_other_psychotic_disorders,\n    sensory_blindness_and_visual_impairment,\n    sensory_deafness_and_hearing_impairment,\n    sickle_cell_disease,\n    spina_bifida_and_other_congenital_anomalies_of_the_nervous_system,\n    spinal_cord_injury,\n    stroke_transient_ischemic_attack,\n    tobacco_use,\n    traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.chronic_conditions_wide"}, "model.tuva.index_discharge_requirements": {"raw_sql": "-- Here we list encounter_ids that meet\n-- the discharge_status_code requirements to be an\n-- index admission:\n--    *** Must NOT be discharged to another acute care hospital\n--    *** Must NOT have left against medical advice\n--    *** Patient must be alive at discharge\n\n\n{{ config(materialized='view') }}\n\n\n\n\n-- Encounters where the patient is discharged to\n-- another acute care hospital\n-- (discharge_status_code = '02', which is:\n-- 'Discharged/transferred to other short term\n--  general hospital for inpatient care.' )\nwith acute_care_discharge as (\nselect encounter_id\nfrom {{ var('src_encounter') }}\nwhere discharge_status_code = '02'\n),\n\n\n-- Encounters where the patient left against medical advice\nagainst_medical_advice as (\nselect encounter_id\nfrom {{ var('src_encounter') }}\nwhere discharge_status_code = '07'   \n),\n\n\n-- Encounters where patient died\ndied as (\nselect encounter_id\nfrom {{ var('src_encounter') }}\nwhere discharge_status_code = '20'   \n),\n\n\n-- Union of all invalid discharges\nall_invalid_discharges as (\nselect encounter_id from acute_care_discharge\nunion\nselect encounter_id from against_medical_advice\nunion\nselect encounter_id from died\n)\n\n\n-- All discharges that meet the discharge_status_code\n-- requirements to be an index admission\nselect encounter_id\nfrom {{ var('src_encounter') }}\nwhere encounter_id not in (select * from all_invalid_discharges)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_encounter"]}, "config": {"enabled": true, "alias": null, "schema": "tuva", "database": "hcup", "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "tuva", "fqn": ["tuva", "index_discharge_requirements"], "unique_id": "model.tuva.index_discharge_requirements", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "index_discharge_requirements.sql", "original_file_path": "models/index_discharge_requirements.sql", "name": "index_discharge_requirements", "alias": "index_discharge_requirements", "checksum": {"name": "sha256", "checksum": "5a6a99e7979610e6fa7743cd47dfc33149e44e0d29ddb5d9dd785d251c1d7fa8"}, "tags": [], "refs": [], "sources": [["hcup", "stg_encounter"], ["hcup", "stg_encounter"], ["hcup", "stg_encounter"], ["hcup", "stg_encounter"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/tuva/models/index_discharge_requirements.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "tuva", "materialized": "view"}, "created_at": 1645656364, "compiled_sql": "-- Here we list encounter_ids that meet\n-- the discharge_status_code requirements to be an\n-- index admission:\n--    *** Must NOT be discharged to another acute care hospital\n--    *** Must NOT have left against medical advice\n--    *** Patient must be alive at discharge\n\n\n\n\n\n\n\n-- Encounters where the patient is discharged to\n-- another acute care hospital\n-- (discharge_status_code = '02', which is:\n-- 'Discharged/transferred to other short term\n--  general hospital for inpatient care.' )\nwith acute_care_discharge as (\nselect encounter_id\nfrom hcup.staging.stg_encounter\nwhere discharge_status_code = '02'\n),\n\n\n-- Encounters where the patient left against medical advice\nagainst_medical_advice as (\nselect encounter_id\nfrom hcup.staging.stg_encounter\nwhere discharge_status_code = '07'   \n),\n\n\n-- Encounters where patient died\ndied as (\nselect encounter_id\nfrom hcup.staging.stg_encounter\nwhere discharge_status_code = '20'   \n),\n\n\n-- Union of all invalid discharges\nall_invalid_discharges as (\nselect encounter_id from acute_care_discharge\nunion\nselect encounter_id from against_medical_advice\nunion\nselect encounter_id from died\n)\n\n\n-- All discharges that meet the discharge_status_code\n-- requirements to be an index admission\nselect encounter_id\nfrom hcup.staging.stg_encounter\nwhere encounter_id not in (select * from all_invalid_discharges)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.tuva.index_discharge_requirements"}, "seed.tuva.exclusion_categories": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "exclusion_categories"], "unique_id": "seed.tuva.exclusion_categories", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "exclusion_categories.csv", "original_file_path": "data/exclusion_categories.csv", "name": "exclusion_categories", "alias": "exclusion_categories", "checksum": {"name": "sha256", "checksum": "4bacd904ef0767100c7371e367970c9b25139aae994d3b020ceee61a7aa1e0a7"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.exclusion_categories"}, "seed.tuva.ms_drg": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "ms_drg"], "unique_id": "seed.tuva.ms_drg", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "ms_drg.csv", "original_file_path": "data/ms_drg.csv", "name": "ms_drg", "alias": "ms_drg", "checksum": {"name": "sha256", "checksum": "76ed9d54b1bcbc62563308326928bb9a38ab312da6002cb9b1d73d6639200fa6"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.ms_drg"}, "seed.tuva.acute_diagnoses_icd10cm": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "acute_diagnoses_icd10cm"], "unique_id": "seed.tuva.acute_diagnoses_icd10cm", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "acute_diagnoses_icd10cm.csv", "original_file_path": "data/acute_diagnoses_icd10cm.csv", "name": "acute_diagnoses_icd10cm", "alias": "acute_diagnoses_icd10cm", "checksum": {"name": "path", "checksum": "data/acute_diagnoses_icd10cm.csv"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.acute_diagnoses_icd10cm"}, "seed.tuva.ccs_icd_10_cm": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "ccs_icd_10_cm"], "unique_id": "seed.tuva.ccs_icd_10_cm", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "ccs_icd_10_cm.csv", "original_file_path": "data/ccs_icd_10_cm.csv", "name": "ccs_icd_10_cm", "alias": "ccs_icd_10_cm", "checksum": {"name": "path", "checksum": "data/ccs_icd_10_cm.csv"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.ccs_icd_10_cm"}, "seed.tuva.surgery_gynecology_cohort": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "surgery_gynecology_cohort"], "unique_id": "seed.tuva.surgery_gynecology_cohort", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "surgery_gynecology_cohort.csv", "original_file_path": "data/surgery_gynecology_cohort.csv", "name": "surgery_gynecology_cohort", "alias": "surgery_gynecology_cohort", "checksum": {"name": "sha256", "checksum": "aebcfa4c5a82d3af091d8d223b26ca9349da581228f32f0d59a7754343199a58"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.surgery_gynecology_cohort"}, "seed.tuva.potentially_planned_px_icd10pcs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "potentially_planned_px_icd10pcs"], "unique_id": "seed.tuva.potentially_planned_px_icd10pcs", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "potentially_planned_px_icd10pcs.csv", "original_file_path": "data/potentially_planned_px_icd10pcs.csv", "name": "potentially_planned_px_icd10pcs", "alias": "potentially_planned_px_icd10pcs", "checksum": {"name": "sha256", "checksum": "e71b1a8a76662445dd0c3c01ca3782cfa250dde1b3e53cb866acf3de92b40e3c"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.potentially_planned_px_icd10pcs"}, "seed.tuva.gender_descriptions": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "gender_descriptions"], "unique_id": "seed.tuva.gender_descriptions", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "gender_descriptions.csv", "original_file_path": "data/gender_descriptions.csv", "name": "gender_descriptions", "alias": "gender_descriptions", "checksum": {"name": "sha256", "checksum": "85ad95c8db48faf3d36084740aaac18e7eeb889c0ce789eeb1ee913a67c1c2c0"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.gender_descriptions"}, "seed.tuva.potentially_planned_px_ccs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "potentially_planned_px_ccs"], "unique_id": "seed.tuva.potentially_planned_px_ccs", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "potentially_planned_px_ccs.csv", "original_file_path": "data/potentially_planned_px_ccs.csv", "name": "potentially_planned_px_ccs", "alias": "potentially_planned_px_ccs", "checksum": {"name": "sha256", "checksum": "34f4a6685fe044aaa0e20314dc74f64ba409b30d7edf0ded56cbea08828b6b32"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.potentially_planned_px_ccs"}, "seed.tuva.acute_diagnoses_ccs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "acute_diagnoses_ccs"], "unique_id": "seed.tuva.acute_diagnoses_ccs", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "acute_diagnoses_ccs.csv", "original_file_path": "data/acute_diagnoses_ccs.csv", "name": "acute_diagnoses_ccs", "alias": "acute_diagnoses_ccs", "checksum": {"name": "sha256", "checksum": "1cf512e93a870f944ef7017721d449eab3cd28cc30f37a9eb38c7e74d9d81816"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.acute_diagnoses_ccs"}, "seed.tuva.chronic_conditions": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "chronic_conditions"], "unique_id": "seed.tuva.chronic_conditions", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "chronic_conditions.csv", "original_file_path": "data/chronic_conditions.csv", "name": "chronic_conditions", "alias": "chronic_conditions", "checksum": {"name": "sha256", "checksum": "745da9257b114671d9b1a495f5122daa81daccec89b414a687c5fff79959e142"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.chronic_conditions"}, "seed.tuva.icd_10_pcs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "icd_10_pcs"], "unique_id": "seed.tuva.icd_10_pcs", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "icd_10_pcs.csv", "original_file_path": "data/icd_10_pcs.csv", "name": "icd_10_pcs", "alias": "icd_10_pcs", "checksum": {"name": "path", "checksum": "data/icd_10_pcs.csv"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.icd_10_pcs"}, "seed.tuva.discharge_status_codes": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "discharge_status_codes"], "unique_id": "seed.tuva.discharge_status_codes", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "discharge_status_codes.csv", "original_file_path": "data/discharge_status_codes.csv", "name": "discharge_status_codes", "alias": "discharge_status_codes", "checksum": {"name": "sha256", "checksum": "6a1b7eb047dc0b609b2dd895d39c04f20f1214be17064e07acebcca84b07ca97"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.discharge_status_codes"}, "seed.tuva.icd_10_cm": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "icd_10_cm"], "unique_id": "seed.tuva.icd_10_cm", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "icd_10_cm.csv", "original_file_path": "data/icd_10_cm.csv", "name": "icd_10_cm", "alias": "icd_10_cm", "checksum": {"name": "path", "checksum": "data/icd_10_cm.csv"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.icd_10_cm"}, "seed.tuva.always_planned_dx": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "always_planned_dx"], "unique_id": "seed.tuva.always_planned_dx", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "always_planned_dx.csv", "original_file_path": "data/always_planned_dx.csv", "name": "always_planned_dx", "alias": "always_planned_dx", "checksum": {"name": "sha256", "checksum": "aeab4add7044fa9db15cdbd10474741b63bc00f8f34fe68d95845acdf8b840ff"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.always_planned_dx"}, "seed.tuva.specialty_cohorts": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "specialty_cohorts"], "unique_id": "seed.tuva.specialty_cohorts", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "specialty_cohorts.csv", "original_file_path": "data/specialty_cohorts.csv", "name": "specialty_cohorts", "alias": "specialty_cohorts", "checksum": {"name": "sha256", "checksum": "f4c090fe63477ea354c6a36dd54816fe76cdead723bbb39aeeba640a319c6d8d"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.specialty_cohorts"}, "seed.tuva.always_planned_px": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "always_planned_px"], "unique_id": "seed.tuva.always_planned_px", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "always_planned_px.csv", "original_file_path": "data/always_planned_px.csv", "name": "always_planned_px", "alias": "always_planned_px", "checksum": {"name": "sha256", "checksum": "d5e6d96665db15860cdf4860ce1e2f0953e32e5f1b3f9ad2b10bf66bbf104b6c"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.always_planned_px"}, "seed.tuva.ccs_icd_10_pcs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "vocabulary", "database": "hcup", "tags": ["vocabulary"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "hcup", "schema": "vocabulary", "fqn": ["tuva", "ccs_icd_10_pcs"], "unique_id": "seed.tuva.ccs_icd_10_pcs", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "ccs_icd_10_pcs.csv", "original_file_path": "data/ccs_icd_10_pcs.csv", "name": "ccs_icd_10_pcs", "alias": "ccs_icd_10_pcs", "checksum": {"name": "path", "checksum": "data/ccs_icd_10_pcs.csv"}, "tags": ["vocabulary"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "hcup", "schema": "vocabulary", "tags": "vocabulary"}, "created_at": 1645656364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "hcup.vocabulary.ccs_icd_10_pcs"}}, "sources": {"source.tuva.hcup.stg_patient": {"fqn": ["tuva", "hcup", "stg_patient"], "database": "hcup", "schema": "staging", "unique_id": "source.tuva.hcup.stg_patient", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "stg_patient", "source_name": "hcup", "source_description": "", "loader": "", "identifier": "stg_patient", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Staging table to prepare data to feed core.patient.", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Indicates whether the patient's gender is male, female, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Patient's date of birth (YYYY-MM-DD).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hcup.staging.stg_patient", "created_at": 1645656364}, "source.tuva.hcup.stg_encounter": {"fqn": ["tuva", "hcup", "stg_encounter"], "database": "hcup", "schema": "staging", "unique_id": "source.tuva.hcup.stg_encounter", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "stg_encounter", "source_name": "hcup", "source_description": "", "loader": "", "identifier": "stg_encounter", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Staging table to prepare data to feed core.encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique ID for each healthcare visit (i.e. encounter) in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique ID for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date when the encounter began (YYYY-MM-DD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date when the encounter ended (YYYY-MM-DD).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "Indicates where the patient was discharged to for acute inpatient visits (e.g. home, SNF, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility": {"name": "facility", "description": "Unique identifier for the facility.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg": {"name": "ms_drg", "description": "The MS-DRG code for acute inpatient visits.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hcup.staging.stg_encounter", "created_at": 1645656364}, "source.tuva.hcup.stg_diagnosis": {"fqn": ["tuva", "hcup", "stg_diagnosis"], "database": "hcup", "schema": "staging", "unique_id": "source.tuva.hcup.stg_diagnosis", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "stg_diagnosis", "source_name": "hcup", "source_description": "", "loader": "", "identifier": "stg_diagnosis", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Staging table to prepare data to feed core.diagnoses.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique ID for each healthcare visit (i.e. encounter) in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code": {"name": "diagnosis_code", "description": "The actual diagnosis code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_rank": {"name": "diagnosis_rank", "description": "The rank of the diagnosis code on the encounter (primary=1).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hcup.staging.stg_diagnosis", "created_at": 1645656364}, "source.tuva.hcup.stg_procedure": {"fqn": ["tuva", "hcup", "stg_procedure"], "database": "hcup", "schema": "staging", "unique_id": "source.tuva.hcup.stg_procedure", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "models/source.yml", "original_file_path": "models/source.yml", "name": "stg_procedure", "source_name": "hcup", "source_description": "", "loader": "", "identifier": "stg_procedure", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Staging table to prepare data to feed core.procedures.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique ID for each healthcare visit (i.e. encounter) in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code": {"name": "procedure_code", "description": "The actual procedure code.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "hcup.staging.stg_procedure", "created_at": 1645656364}}, "macros": {"macro.tuva.test_valid_values": {"unique_id": "macro.tuva.test_valid_values", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "macros/valid_values_test.sql", "original_file_path": "macros/valid_values_test.sql", "name": "test_valid_values", "macro_sql": "{% test valid_values(model, column_name, lookup_table, lookup_column) %}\n\nwith validation as (\nselect\n    {{ column_name }} as col\nfrom {{ model }}\nwhere {{ column_name }} is not null\n),\n\nvalidation_errors as (\nselect\n    col\nfrom validation aa\nleft join {{ lookup_table }} bb\n    on aa.col = bb.{{ lookup_column }}\nwhere bb.{{ lookup_column }} is null\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.tuva.generate_schema_name": {"unique_id": "macro.tuva.generate_schema_name", "package_name": "tuva", "root_path": "/Users/aaronneiderhiser/dev/syntegra/tuva", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1645656363}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt/0.21.1_1/libexec/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.tuva.benign_prostatic_hyperplasia": ["seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "source.tuva.hcup.stg_diagnosis", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_patient"], "model.tuva.chronic_conditions_long": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack"], "model.tuva.encounter_specialty_cohorts": ["model.tuva.diagnosis_ccs", "model.tuva.diagnosis_ccs", "model.tuva.diagnosis_ccs", "model.tuva.diagnosis_ccs", "model.tuva.procedure_ccs", "seed.tuva.specialty_cohorts", "seed.tuva.specialty_cohorts", "seed.tuva.specialty_cohorts", "seed.tuva.specialty_cohorts", "seed.tuva.specialty_cohorts", "seed.tuva.surgery_gynecology_cohort", "source.tuva.hcup.stg_encounter"], "model.tuva.stroke_transient_ischemic_attack": ["seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "source.tuva.hcup.stg_diagnosis", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_patient"], "model.tuva.readmissions_summary": ["model.tuva.encounters_augmented", "model.tuva.readmission_calculation"], "model.tuva.died": ["source.tuva.hcup.stg_encounter"], "model.tuva.readmission_calculation": ["model.tuva.encounters_augmented", "model.tuva.planned_encounters"], "model.tuva.planned_encounters": ["model.tuva.diagnosis_ccs", "model.tuva.diagnosis_ccs", "model.tuva.procedure_ccs", "model.tuva.procedure_ccs", "model.tuva.procedure_ccs", "seed.tuva.acute_diagnoses_ccs", "seed.tuva.acute_diagnoses_icd10cm", "seed.tuva.always_planned_dx", "seed.tuva.always_planned_px", "seed.tuva.potentially_planned_px_ccs", "seed.tuva.potentially_planned_px_icd10pcs"], "model.tuva.condition_logic_simple": ["seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "source.tuva.hcup.stg_diagnosis", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_patient", "source.tuva.hcup.stg_procedure"], "model.tuva.index_time_requirements": ["source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_encounter"], "model.tuva.encounters_augmented": ["model.tuva.died", "model.tuva.disqualified_encounters", "model.tuva.encounter_specialty_cohorts", "model.tuva.index_admissions", "model.tuva.planned_encounters", "source.tuva.hcup.stg_encounter"], "model.tuva.diagnosis_ccs": ["seed.tuva.ccs_icd_10_cm", "seed.tuva.icd_10_cm", "source.tuva.hcup.stg_diagnosis"], "model.tuva.index_admissions": ["model.tuva.exclusions", "model.tuva.index_discharge_requirements", "model.tuva.index_time_requirements", "source.tuva.hcup.stg_encounter"], "model.tuva.exclusions": ["model.tuva.diagnosis_ccs", "seed.tuva.exclusion_categories"], "model.tuva.condition_logic": ["seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "seed.tuva.chronic_conditions", "source.tuva.hcup.stg_diagnosis", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_patient"], "model.tuva.disqualified_encounters": ["model.tuva.diagnosis_ccs", "model.tuva.diagnosis_ccs", "seed.tuva.discharge_status_codes", "source.tuva.hcup.stg_encounter"], "model.tuva.procedure_ccs": ["seed.tuva.ccs_icd_10_pcs", "seed.tuva.icd_10_pcs", "source.tuva.hcup.stg_procedure"], "model.tuva.chronic_conditions_wide": ["model.tuva.chronic_conditions_long", "seed.tuva.chronic_conditions"], "model.tuva.index_discharge_requirements": ["source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_encounter", "source.tuva.hcup.stg_encounter"], "seed.tuva.exclusion_categories": [], "seed.tuva.ms_drg": [], "seed.tuva.acute_diagnoses_icd10cm": [], "seed.tuva.ccs_icd_10_cm": [], "seed.tuva.surgery_gynecology_cohort": [], "seed.tuva.potentially_planned_px_icd10pcs": [], "seed.tuva.gender_descriptions": [], "seed.tuva.potentially_planned_px_ccs": [], "seed.tuva.acute_diagnoses_ccs": [], "seed.tuva.chronic_conditions": [], "seed.tuva.icd_10_pcs": [], "seed.tuva.discharge_status_codes": [], "seed.tuva.icd_10_cm": [], "seed.tuva.always_planned_dx": [], "seed.tuva.specialty_cohorts": [], "seed.tuva.always_planned_px": [], "seed.tuva.ccs_icd_10_pcs": [], "source.tuva.hcup.stg_patient": [], "source.tuva.hcup.stg_encounter": [], "source.tuva.hcup.stg_diagnosis": [], "source.tuva.hcup.stg_procedure": []}, "child_map": {"model.tuva.benign_prostatic_hyperplasia": ["model.tuva.chronic_conditions_long"], "model.tuva.chronic_conditions_long": ["model.tuva.chronic_conditions_wide"], "model.tuva.encounter_specialty_cohorts": ["model.tuva.encounters_augmented"], "model.tuva.stroke_transient_ischemic_attack": ["model.tuva.chronic_conditions_long"], "model.tuva.readmissions_summary": [], "model.tuva.died": ["model.tuva.encounters_augmented"], "model.tuva.readmission_calculation": ["model.tuva.readmissions_summary"], "model.tuva.planned_encounters": ["model.tuva.encounters_augmented", "model.tuva.readmission_calculation"], "model.tuva.condition_logic_simple": ["model.tuva.chronic_conditions_long"], "model.tuva.index_time_requirements": ["model.tuva.index_admissions"], "model.tuva.encounters_augmented": ["model.tuva.readmission_calculation", "model.tuva.readmissions_summary"], "model.tuva.diagnosis_ccs": ["model.tuva.disqualified_encounters", "model.tuva.disqualified_encounters", "model.tuva.encounter_specialty_cohorts", "model.tuva.encounter_specialty_cohorts", "model.tuva.encounter_specialty_cohorts", "model.tuva.encounter_specialty_cohorts", "model.tuva.exclusions", "model.tuva.planned_encounters", "model.tuva.planned_encounters"], "model.tuva.index_admissions": ["model.tuva.encounters_augmented"], "model.tuva.exclusions": ["model.tuva.index_admissions"], "model.tuva.condition_logic": ["model.tuva.chronic_conditions_long"], "model.tuva.disqualified_encounters": ["model.tuva.encounters_augmented"], "model.tuva.procedure_ccs": ["model.tuva.encounter_specialty_cohorts", "model.tuva.planned_encounters", "model.tuva.planned_encounters", "model.tuva.planned_encounters"], "model.tuva.chronic_conditions_wide": [], "model.tuva.index_discharge_requirements": ["model.tuva.index_admissions"], "seed.tuva.exclusion_categories": ["model.tuva.exclusions"], "seed.tuva.ms_drg": [], "seed.tuva.acute_diagnoses_icd10cm": ["model.tuva.planned_encounters"], "seed.tuva.ccs_icd_10_cm": ["model.tuva.diagnosis_ccs"], "seed.tuva.surgery_gynecology_cohort": ["model.tuva.encounter_specialty_cohorts"], "seed.tuva.potentially_planned_px_icd10pcs": ["model.tuva.planned_encounters"], "seed.tuva.gender_descriptions": [], "seed.tuva.potentially_planned_px_ccs": ["model.tuva.planned_encounters"], "seed.tuva.acute_diagnoses_ccs": ["model.tuva.planned_encounters"], "seed.tuva.chronic_conditions": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.benign_prostatic_hyperplasia", "model.tuva.chronic_conditions_wide", "model.tuva.condition_logic", "model.tuva.condition_logic", "model.tuva.condition_logic", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack", "model.tuva.stroke_transient_ischemic_attack"], "seed.tuva.icd_10_pcs": ["model.tuva.procedure_ccs"], "seed.tuva.discharge_status_codes": ["model.tuva.disqualified_encounters"], "seed.tuva.icd_10_cm": ["model.tuva.diagnosis_ccs"], "seed.tuva.always_planned_dx": ["model.tuva.planned_encounters"], "seed.tuva.specialty_cohorts": ["model.tuva.encounter_specialty_cohorts", "model.tuva.encounter_specialty_cohorts", "model.tuva.encounter_specialty_cohorts", "model.tuva.encounter_specialty_cohorts", "model.tuva.encounter_specialty_cohorts"], "seed.tuva.always_planned_px": ["model.tuva.planned_encounters"], "seed.tuva.ccs_icd_10_pcs": ["model.tuva.procedure_ccs"], "source.tuva.hcup.stg_patient": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.stroke_transient_ischemic_attack"], "source.tuva.hcup.stg_encounter": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.died", "model.tuva.disqualified_encounters", "model.tuva.encounter_specialty_cohorts", "model.tuva.encounters_augmented", "model.tuva.index_admissions", "model.tuva.index_discharge_requirements", "model.tuva.index_discharge_requirements", "model.tuva.index_discharge_requirements", "model.tuva.index_discharge_requirements", "model.tuva.index_time_requirements", "model.tuva.index_time_requirements", "model.tuva.stroke_transient_ischemic_attack"], "source.tuva.hcup.stg_diagnosis": ["model.tuva.benign_prostatic_hyperplasia", "model.tuva.condition_logic", "model.tuva.condition_logic_simple", "model.tuva.diagnosis_ccs", "model.tuva.stroke_transient_ischemic_attack"], "source.tuva.hcup.stg_procedure": ["model.tuva.condition_logic_simple", "model.tuva.procedure_ccs"]}}